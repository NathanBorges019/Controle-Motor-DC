
CONTROLE MOTOR DC_IHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e4  080038e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080038e4  080038e4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038e4  080038e4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080038ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  08003948  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003948  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007cd6  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001700  00000000  00000000  00027d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  000294a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000796  00000000  00000000  00029e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171a1  00000000  00000000  0002a616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad26  00000000  00000000  000417b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085c7b  00000000  00000000  0004c4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d40  00000000  00000000  000d2158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000d4e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037a0 	.word	0x080037a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080037a0 	.word	0x080037a0

0800014c <LCD_Cursor>:
 *  @return None
 *
 ******************************************************************************/

void LCD_Cursor(uint8_t x, uint8_t y)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if (x == 0)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d102      	bne.n	8000168 <LCD_Cursor+0x1c>
		temp = 0x80;
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e001      	b.n	800016c <LCD_Cursor+0x20>
	else
		temp = 0xC0;
 8000168:	23c0      	movs	r3, #192	; 0xc0
 800016a:	73fb      	strb	r3, [r7, #15]

	temp = temp + y;
 800016c:	7bfa      	ldrb	r2, [r7, #15]
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	4413      	add	r3, r2
 8000172:	73fb      	strb	r3, [r7, #15]

	LCD_Cmd(temp);
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	4618      	mov	r0, r3
 8000178:	f000 f8ae 	bl	80002d8 <LCD_Cmd>


}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <LCD_Data>:
*
*  @return  None
*
******************************************************************************/
void LCD_Data(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	RS_GPIO_Port->BSRR = RS_Pin;
 800018e:	4b45      	ldr	r3, [pc, #276]	; (80002a4 <LCD_Data+0x120>)
 8000190:	2208      	movs	r2, #8
 8000192:	611a      	str	r2, [r3, #16]
	if (data & 0x80)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	da04      	bge.n	80001a6 <LCD_Data+0x22>
		D7_GPIO_Port->BSRR = D7_Pin;
 800019c:	4b42      	ldr	r3, [pc, #264]	; (80002a8 <LCD_Data+0x124>)
 800019e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001a2:	611a      	str	r2, [r3, #16]
 80001a4:	e003      	b.n	80001ae <LCD_Data+0x2a>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 80001a6:	4b40      	ldr	r3, [pc, #256]	; (80002a8 <LCD_Data+0x124>)
 80001a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001ac:	611a      	str	r2, [r3, #16]
	if (data & 0x40)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <LCD_Data+0x3c>
		D6_GPIO_Port->BSRR = D6_Pin;
 80001b8:	4b3b      	ldr	r3, [pc, #236]	; (80002a8 <LCD_Data+0x124>)
 80001ba:	2208      	movs	r2, #8
 80001bc:	611a      	str	r2, [r3, #16]
 80001be:	e003      	b.n	80001c8 <LCD_Data+0x44>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 80001c0:	4b39      	ldr	r3, [pc, #228]	; (80002a8 <LCD_Data+0x124>)
 80001c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80001c6:	611a      	str	r2, [r3, #16]
	if (data & 0x20)
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	f003 0320 	and.w	r3, r3, #32
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d003      	beq.n	80001da <LCD_Data+0x56>
		D5_GPIO_Port->BSRR = D5_Pin;
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <LCD_Data+0x120>)
 80001d4:	2220      	movs	r2, #32
 80001d6:	611a      	str	r2, [r3, #16]
 80001d8:	e003      	b.n	80001e2 <LCD_Data+0x5e>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 80001da:	4b32      	ldr	r3, [pc, #200]	; (80002a4 <LCD_Data+0x120>)
 80001dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80001e0:	611a      	str	r2, [r3, #16]
	if (data & 0x10)
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f003 0310 	and.w	r3, r3, #16
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d003      	beq.n	80001f4 <LCD_Data+0x70>
		D4_GPIO_Port->BSRR = D4_Pin;
 80001ec:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <LCD_Data+0x120>)
 80001ee:	2210      	movs	r2, #16
 80001f0:	611a      	str	r2, [r3, #16]
 80001f2:	e003      	b.n	80001fc <LCD_Data+0x78>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 80001f4:	4b2b      	ldr	r3, [pc, #172]	; (80002a4 <LCD_Data+0x120>)
 80001f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001fa:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <LCD_Data+0x120>)
 80001fe:	2201      	movs	r2, #1
 8000200:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f001 f9c8 	bl	8001598 <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 8000208:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <LCD_Data+0x120>)
 800020a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800020e:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f001 f9c1 	bl	8001598 <HAL_Delay>

	if (data & 0x08)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 0308 	and.w	r3, r3, #8
 800021c:	2b00      	cmp	r3, #0
 800021e:	d004      	beq.n	800022a <LCD_Data+0xa6>
		D7_GPIO_Port->BSRR = D7_Pin;
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <LCD_Data+0x124>)
 8000222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	e003      	b.n	8000232 <LCD_Data+0xae>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <LCD_Data+0x124>)
 800022c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000230:	611a      	str	r2, [r3, #16]
	if (data & 0x04)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	2b00      	cmp	r3, #0
 800023a:	d003      	beq.n	8000244 <LCD_Data+0xc0>
		D6_GPIO_Port->BSRR = D6_Pin;
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <LCD_Data+0x124>)
 800023e:	2208      	movs	r2, #8
 8000240:	611a      	str	r2, [r3, #16]
 8000242:	e003      	b.n	800024c <LCD_Data+0xc8>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <LCD_Data+0x124>)
 8000246:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800024a:	611a      	str	r2, [r3, #16]
	if (data & 0x02)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <LCD_Data+0xda>
		D5_GPIO_Port->BSRR = D5_Pin;
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <LCD_Data+0x120>)
 8000258:	2220      	movs	r2, #32
 800025a:	611a      	str	r2, [r3, #16]
 800025c:	e003      	b.n	8000266 <LCD_Data+0xe2>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <LCD_Data+0x120>)
 8000260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000264:	611a      	str	r2, [r3, #16]
	if (data & 0x01)
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d003      	beq.n	8000278 <LCD_Data+0xf4>
		D4_GPIO_Port->BSRR = D4_Pin;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <LCD_Data+0x120>)
 8000272:	2210      	movs	r2, #16
 8000274:	611a      	str	r2, [r3, #16]
 8000276:	e003      	b.n	8000280 <LCD_Data+0xfc>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <LCD_Data+0x120>)
 800027a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800027e:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <LCD_Data+0x120>)
 8000282:	2201      	movs	r2, #1
 8000284:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f001 f986 	bl	8001598 <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <LCD_Data+0x120>)
 800028e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000292:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f001 f97f 	bl	8001598 <HAL_Delay>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40010c00 	.word	0x40010c00

080002ac <LCD_String>:
*
*  @param1 String to be sended.
*
******************************************************************************/
void LCD_String(char *string)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	while (*string)
 80002b4:	e007      	b.n	80002c6 <LCD_String+0x1a>
	{
		LCD_Data(*string);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff62 	bl	8000184 <LCD_Data>
		string++;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	while (*string)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1f3      	bne.n	80002b6 <LCD_String+0xa>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <LCD_Cmd>:
*
*  @return None.
*
******************************************************************************/
void LCD_Cmd(uint8_t cmd)  // Fun��o para enviar um comando para o Display
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2108      	movs	r1, #8
 80002e6:	4855      	ldr	r0, [pc, #340]	; (800043c <LCD_Cmd+0x164>)
 80002e8:	f001 fbf1 	bl	8001ace <HAL_GPIO_WritePin>

	if (cmd & 0x80)
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da06      	bge.n	8000302 <LCD_Cmd+0x2a>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fa:	4851      	ldr	r0, [pc, #324]	; (8000440 <LCD_Cmd+0x168>)
 80002fc:	f001 fbe7 	bl	8001ace <HAL_GPIO_WritePin>
 8000300:	e005      	b.n	800030e <LCD_Cmd+0x36>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000308:	484d      	ldr	r0, [pc, #308]	; (8000440 <LCD_Cmd+0x168>)
 800030a:	f001 fbe0 	bl	8001ace <HAL_GPIO_WritePin>
	if (cmd & 0x40)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000314:	2b00      	cmp	r3, #0
 8000316:	d005      	beq.n	8000324 <LCD_Cmd+0x4c>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2108      	movs	r1, #8
 800031c:	4848      	ldr	r0, [pc, #288]	; (8000440 <LCD_Cmd+0x168>)
 800031e:	f001 fbd6 	bl	8001ace <HAL_GPIO_WritePin>
 8000322:	e004      	b.n	800032e <LCD_Cmd+0x56>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2108      	movs	r1, #8
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <LCD_Cmd+0x168>)
 800032a:	f001 fbd0 	bl	8001ace <HAL_GPIO_WritePin>
	if (cmd & 0x20)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d005      	beq.n	8000344 <LCD_Cmd+0x6c>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	483f      	ldr	r0, [pc, #252]	; (800043c <LCD_Cmd+0x164>)
 800033e:	f001 fbc6 	bl	8001ace <HAL_GPIO_WritePin>
 8000342:	e004      	b.n	800034e <LCD_Cmd+0x76>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2120      	movs	r1, #32
 8000348:	483c      	ldr	r0, [pc, #240]	; (800043c <LCD_Cmd+0x164>)
 800034a:	f001 fbc0 	bl	8001ace <HAL_GPIO_WritePin>
	if (cmd & 0x10)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	2b00      	cmp	r3, #0
 8000356:	d005      	beq.n	8000364 <LCD_Cmd+0x8c>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2110      	movs	r1, #16
 800035c:	4837      	ldr	r0, [pc, #220]	; (800043c <LCD_Cmd+0x164>)
 800035e:	f001 fbb6 	bl	8001ace <HAL_GPIO_WritePin>
 8000362:	e004      	b.n	800036e <LCD_Cmd+0x96>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4834      	ldr	r0, [pc, #208]	; (800043c <LCD_Cmd+0x164>)
 800036a:	f001 fbb0 	bl	8001ace <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2101      	movs	r1, #1
 8000372:	4832      	ldr	r0, [pc, #200]	; (800043c <LCD_Cmd+0x164>)
 8000374:	f001 fbab 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000378:	2001      	movs	r0, #1
 800037a:	f001 f90d 	bl	8001598 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2101      	movs	r1, #1
 8000382:	482e      	ldr	r0, [pc, #184]	; (800043c <LCD_Cmd+0x164>)
 8000384:	f001 fba3 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f001 f905 	bl	8001598 <HAL_Delay>

	if (cmd & 0x08)
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	2b00      	cmp	r3, #0
 8000396:	d006      	beq.n	80003a6 <LCD_Cmd+0xce>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039e:	4828      	ldr	r0, [pc, #160]	; (8000440 <LCD_Cmd+0x168>)
 80003a0:	f001 fb95 	bl	8001ace <HAL_GPIO_WritePin>
 80003a4:	e005      	b.n	80003b2 <LCD_Cmd+0xda>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4824      	ldr	r0, [pc, #144]	; (8000440 <LCD_Cmd+0x168>)
 80003ae:	f001 fb8e 	bl	8001ace <HAL_GPIO_WritePin>
	if (cmd & 0x04)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d005      	beq.n	80003c8 <LCD_Cmd+0xf0>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	481f      	ldr	r0, [pc, #124]	; (8000440 <LCD_Cmd+0x168>)
 80003c2:	f001 fb84 	bl	8001ace <HAL_GPIO_WritePin>
 80003c6:	e004      	b.n	80003d2 <LCD_Cmd+0xfa>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2108      	movs	r1, #8
 80003cc:	481c      	ldr	r0, [pc, #112]	; (8000440 <LCD_Cmd+0x168>)
 80003ce:	f001 fb7e 	bl	8001ace <HAL_GPIO_WritePin>
	if (cmd & 0x02)
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 0302 	and.w	r3, r3, #2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d005      	beq.n	80003e8 <LCD_Cmd+0x110>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	4816      	ldr	r0, [pc, #88]	; (800043c <LCD_Cmd+0x164>)
 80003e2:	f001 fb74 	bl	8001ace <HAL_GPIO_WritePin>
 80003e6:	e004      	b.n	80003f2 <LCD_Cmd+0x11a>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2120      	movs	r1, #32
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <LCD_Cmd+0x164>)
 80003ee:	f001 fb6e 	bl	8001ace <HAL_GPIO_WritePin>
	if (cmd & 0x01)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d005      	beq.n	8000408 <LCD_Cmd+0x130>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2110      	movs	r1, #16
 8000400:	480e      	ldr	r0, [pc, #56]	; (800043c <LCD_Cmd+0x164>)
 8000402:	f001 fb64 	bl	8001ace <HAL_GPIO_WritePin>
 8000406:	e004      	b.n	8000412 <LCD_Cmd+0x13a>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2110      	movs	r1, #16
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LCD_Cmd+0x164>)
 800040e:	f001 fb5e 	bl	8001ace <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2101      	movs	r1, #1
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <LCD_Cmd+0x164>)
 8000418:	f001 fb59 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f001 f8bb 	bl	8001598 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2101      	movs	r1, #1
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <LCD_Cmd+0x164>)
 8000428:	f001 fb51 	bl	8001ace <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800042c:	2001      	movs	r0, #1
 800042e:	f001 f8b3 	bl	8001598 <HAL_Delay>

}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010800 	.word	0x40010800
 8000440:	40010c00 	.word	0x40010c00

08000444 <LCD_Clear>:
*
*  @return None.
*
******************************************************************************/
void LCD_Clear(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	LCD_Cmd(0x01);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff ff45 	bl	80002d8 <LCD_Cmd>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}

08000452 <LCD_Init>:
*
*  @return None.
*
******************************************************************************/
void LCD_Init(void)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0
	LCD_Cmd(0x33);
 8000456:	2033      	movs	r0, #51	; 0x33
 8000458:	f7ff ff3e 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x32);
 800045c:	2032      	movs	r0, #50	; 0x32
 800045e:	f7ff ff3b 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x28);
 8000462:	2028      	movs	r0, #40	; 0x28
 8000464:	f7ff ff38 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x06);
 8000468:	2006      	movs	r0, #6
 800046a:	f7ff ff35 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x0C);
 800046e:	200c      	movs	r0, #12
 8000470:	f7ff ff32 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x01);
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff2f 	bl	80002d8 <LCD_Cmd>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f001 f826 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 fdba 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 fe74 	bl	8001178 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000490:	f000 fdfc 	bl	800108c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000494:	2108      	movs	r1, #8
 8000496:	4896      	ldr	r0, [pc, #600]	; (80006f0 <main+0x270>)
 8000498:	f001 ffb8 	bl	800240c <HAL_TIM_PWM_Start>
  motor = 0;
 800049c:	4b95      	ldr	r3, [pc, #596]	; (80006f4 <main+0x274>)
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
  void start_config();
  void sys_init();
  void set_converter();
  void converter_preset();

  sys_init();
 80004a2:	f000 fd25 	bl	8000ef0 <sys_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80004a6:	4b94      	ldr	r3, [pc, #592]	; (80006f8 <main+0x278>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d110      	bne.n	80004d0 <main+0x50>
 80004ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b2:	4892      	ldr	r0, [pc, #584]	; (80006fc <main+0x27c>)
 80004b4:	f001 faf4 	bl	8001aa0 <HAL_GPIO_ReadPin>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d008      	beq.n	80004d0 <main+0x50>
		{
			ENTER_Boucing();
 80004be:	f000 fba5 	bl	8000c0c <ENTER_Boucing>
			Buzzer_Teclas();
 80004c2:	f000 fb67 	bl	8000b94 <Buzzer_Teclas>
			start = 3;
 80004c6:	4b8c      	ldr	r3, [pc, #560]	; (80006f8 <main+0x278>)
 80004c8:	2203      	movs	r2, #3
 80004ca:	701a      	strb	r2, [r3, #0]
			converter_preset();
 80004cc:	f000 fd68 	bl	8000fa0 <converter_preset>
		}

		if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (start == 1))
 80004d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d4:	4889      	ldr	r0, [pc, #548]	; (80006fc <main+0x27c>)
 80004d6:	f001 fae3 	bl	8001aa0 <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00f      	beq.n	8000500 <main+0x80>
 80004e0:	4b85      	ldr	r3, [pc, #532]	; (80006f8 <main+0x278>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d10b      	bne.n	8000500 <main+0x80>
		{
			INC_Boucing();
 80004e8:	f000 fb6a 	bl	8000bc0 <INC_Boucing>
			Buzzer_Teclas();
 80004ec:	f000 fb52 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 80004f0:	f7ff ffa8 	bl	8000444 <LCD_Clear>
			menu = 1;
 80004f4:	4b82      	ldr	r3, [pc, #520]	; (8000700 <main+0x280>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
			start = 0;
 80004fa:	4b7f      	ldr	r3, [pc, #508]	; (80006f8 <main+0x278>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
		}

		if ((menu == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin)))
 8000500:	4b7f      	ldr	r3, [pc, #508]	; (8000700 <main+0x280>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d112      	bne.n	800052e <main+0xae>
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	487c      	ldr	r0, [pc, #496]	; (80006fc <main+0x27c>)
 800050c:	f001 fac8 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d00b      	beq.n	800052e <main+0xae>
		{
			DEC_Boucing();
 8000516:	f000 fb67 	bl	8000be8 <DEC_Boucing>
			Buzzer_Teclas();
 800051a:	f000 fb3b 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 800051e:	f7ff ff91 	bl	8000444 <LCD_Clear>
			menu = 0;
 8000522:	4b77      	ldr	r3, [pc, #476]	; (8000700 <main+0x280>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
			start = 2;
 8000528:	4b73      	ldr	r3, [pc, #460]	; (80006f8 <main+0x278>)
 800052a:	2202      	movs	r2, #2
 800052c:	701a      	strb	r2, [r3, #0]
		}

		if ((aux_start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800052e:	4b75      	ldr	r3, [pc, #468]	; (8000704 <main+0x284>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d113      	bne.n	800055e <main+0xde>
 8000536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053a:	4870      	ldr	r0, [pc, #448]	; (80006fc <main+0x27c>)
 800053c:	f001 fab0 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00b      	beq.n	800055e <main+0xde>
		{
			ENTER_Boucing();
 8000546:	f000 fb61 	bl	8000c0c <ENTER_Boucing>
			Buzzer_Teclas();
 800054a:	f000 fb23 	bl	8000b94 <Buzzer_Teclas>
			start = 3;
 800054e:	4b6a      	ldr	r3, [pc, #424]	; (80006f8 <main+0x278>)
 8000550:	2203      	movs	r2, #3
 8000552:	701a      	strb	r2, [r3, #0]
			aux_start = 0;
 8000554:	4b6b      	ldr	r3, [pc, #428]	; (8000704 <main+0x284>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
			converter_preset();
 800055a:	f000 fd21 	bl	8000fa0 <converter_preset>
		}

		if ((aux_menu == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800055e:	4b6a      	ldr	r3, [pc, #424]	; (8000708 <main+0x288>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d11d      	bne.n	80005a2 <main+0x122>
 8000566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056a:	4864      	ldr	r0, [pc, #400]	; (80006fc <main+0x27c>)
 800056c:	f001 fa98 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d015      	beq.n	80005a2 <main+0x122>
		{
			ENTER_Boucing();
 8000576:	f000 fb49 	bl	8000c0c <ENTER_Boucing>
			Buzzer_Teclas();
 800057a:	f000 fb0b 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 800057e:	f7ff ff61 	bl	8000444 <LCD_Clear>
			menu = 2;
 8000582:	4b5f      	ldr	r3, [pc, #380]	; (8000700 <main+0x280>)
 8000584:	2202      	movs	r2, #2
 8000586:	701a      	strb	r2, [r3, #0]
			aux_menu = 0;
 8000588:	4b5f      	ldr	r3, [pc, #380]	; (8000708 <main+0x288>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
			a_inc = 5;
 800058e:	4b5f      	ldr	r3, [pc, #380]	; (800070c <main+0x28c>)
 8000590:	2205      	movs	r2, #5
 8000592:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 8000594:	4b5d      	ldr	r3, [pc, #372]	; (800070c <main+0x28c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	495d      	ldr	r1, [pc, #372]	; (8000710 <main+0x290>)
 800059c:	485d      	ldr	r0, [pc, #372]	; (8000714 <main+0x294>)
 800059e:	f002 fc4d 	bl	8002e3c <siprintf>
		}

		if ((aux_accel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (a_inc <= 80)))
 80005a2:	4b5d      	ldr	r3, [pc, #372]	; (8000718 <main+0x298>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d125      	bne.n	80005f6 <main+0x176>
 80005aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ae:	4853      	ldr	r0, [pc, #332]	; (80006fc <main+0x27c>)
 80005b0:	f001 fa76 	bl	8001aa0 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d01d      	beq.n	80005f6 <main+0x176>
 80005ba:	4b54      	ldr	r3, [pc, #336]	; (800070c <main+0x28c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b50      	cmp	r3, #80	; 0x50
 80005c0:	d819      	bhi.n	80005f6 <main+0x176>
		{
			aux_menu =0;
 80005c2:	4b51      	ldr	r3, [pc, #324]	; (8000708 <main+0x288>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
			INC_Boucing();
 80005c8:	f000 fafa 	bl	8000bc0 <INC_Boucing>
			Buzzer_Teclas();
 80005cc:	f000 fae2 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 80005d0:	f7ff ff38 	bl	8000444 <LCD_Clear>
			a_inc += 5;
 80005d4:	4b4d      	ldr	r3, [pc, #308]	; (800070c <main+0x28c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3305      	adds	r3, #5
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b4b      	ldr	r3, [pc, #300]	; (800070c <main+0x28c>)
 80005de:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 80005e0:	4b4a      	ldr	r3, [pc, #296]	; (800070c <main+0x28c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	494a      	ldr	r1, [pc, #296]	; (8000710 <main+0x290>)
 80005e8:	484a      	ldr	r0, [pc, #296]	; (8000714 <main+0x294>)
 80005ea:	f002 fc27 	bl	8002e3c <siprintf>
			menu = 3;
 80005ee:	4b44      	ldr	r3, [pc, #272]	; (8000700 <main+0x280>)
 80005f0:	2203      	movs	r2, #3
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e02b      	b.n	800064e <main+0x1ce>
		}
		else if (((aux_accel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (a_inc <= 80) && (a_inc >5))))
 80005f6:	4b48      	ldr	r3, [pc, #288]	; (8000718 <main+0x298>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d127      	bne.n	800064e <main+0x1ce>
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	483e      	ldr	r0, [pc, #248]	; (80006fc <main+0x27c>)
 8000602:	f001 fa4d 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d020      	beq.n	800064e <main+0x1ce>
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <main+0x28c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b50      	cmp	r3, #80	; 0x50
 8000612:	d81c      	bhi.n	800064e <main+0x1ce>
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <main+0x28c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b05      	cmp	r3, #5
 800061a:	d918      	bls.n	800064e <main+0x1ce>
		{
			aux_menu = 0;
 800061c:	4b3a      	ldr	r3, [pc, #232]	; (8000708 <main+0x288>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
			DEC_Boucing();
 8000622:	f000 fae1 	bl	8000be8 <DEC_Boucing>
			Buzzer_Teclas();
 8000626:	f000 fab5 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 800062a:	f7ff ff0b 	bl	8000444 <LCD_Clear>
			a_inc -= 5;
 800062e:	4b37      	ldr	r3, [pc, #220]	; (800070c <main+0x28c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3b05      	subs	r3, #5
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b35      	ldr	r3, [pc, #212]	; (800070c <main+0x28c>)
 8000638:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 800063a:	4b34      	ldr	r3, [pc, #208]	; (800070c <main+0x28c>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	4933      	ldr	r1, [pc, #204]	; (8000710 <main+0x290>)
 8000642:	4834      	ldr	r0, [pc, #208]	; (8000714 <main+0x294>)
 8000644:	f002 fbfa 	bl	8002e3c <siprintf>
			menu = 3;
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <main+0x280>)
 800064a:	2203      	movs	r2, #3
 800064c:	701a      	strb	r2, [r3, #0]
		}

		if ((aux_running == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800064e:	4b33      	ldr	r3, [pc, #204]	; (800071c <main+0x29c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d121      	bne.n	800069a <main+0x21a>
 8000656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065a:	4828      	ldr	r0, [pc, #160]	; (80006fc <main+0x27c>)
 800065c:	f001 fa20 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d019      	beq.n	800069a <main+0x21a>
		{
			a_inc = a_inc;
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <main+0x28c>)
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <main+0x28c>)
 800066c:	701a      	strb	r2, [r3, #0]
			aux_accel = 0;
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <main+0x298>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
			ENTER_Boucing();
 8000674:	f000 faca 	bl	8000c0c <ENTER_Boucing>
			Buzzer_Teclas();
 8000678:	f000 fa8c 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 800067c:	f7ff fee2 	bl	8000444 <LCD_Clear>
			menu = 4;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <main+0x280>)
 8000682:	2204      	movs	r2, #4
 8000684:	701a      	strb	r2, [r3, #0]
			r_inc = 5;
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <main+0x2a0>)
 8000688:	2205      	movs	r2, #5
 800068a:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <main+0x2a0>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	491f      	ldr	r1, [pc, #124]	; (8000710 <main+0x290>)
 8000694:	4823      	ldr	r0, [pc, #140]	; (8000724 <main+0x2a4>)
 8000696:	f002 fbd1 	bl	8002e3c <siprintf>
		}

		if ((inc_running == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (r_inc <= 180)))
 800069a:	4b23      	ldr	r3, [pc, #140]	; (8000728 <main+0x2a8>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d144      	bne.n	800072c <main+0x2ac>
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	4815      	ldr	r0, [pc, #84]	; (80006fc <main+0x27c>)
 80006a8:	f001 f9fa 	bl	8001aa0 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d03c      	beq.n	800072c <main+0x2ac>
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <main+0x2a0>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2bb4      	cmp	r3, #180	; 0xb4
 80006b8:	d838      	bhi.n	800072c <main+0x2ac>
		{
			aux_running = 0;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <main+0x29c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
			INC_Boucing();
 80006c0:	f000 fa7e 	bl	8000bc0 <INC_Boucing>
			Buzzer_Teclas();
 80006c4:	f000 fa66 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 80006c8:	f7ff febc 	bl	8000444 <LCD_Clear>
			r_inc += 5;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <main+0x2a0>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3305      	adds	r3, #5
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <main+0x2a0>)
 80006d6:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <main+0x2a0>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	490c      	ldr	r1, [pc, #48]	; (8000710 <main+0x290>)
 80006e0:	4810      	ldr	r0, [pc, #64]	; (8000724 <main+0x2a4>)
 80006e2:	f002 fbab 	bl	8002e3c <siprintf>
			menu = 5;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <main+0x280>)
 80006e8:	2205      	movs	r2, #5
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e04a      	b.n	8000784 <main+0x304>
 80006ee:	bf00      	nop
 80006f0:	20000078 	.word	0x20000078
 80006f4:	200000cf 	.word	0x200000cf
 80006f8:	200000c1 	.word	0x200000c1
 80006fc:	40010c00 	.word	0x40010c00
 8000700:	200000c0 	.word	0x200000c0
 8000704:	200000c3 	.word	0x200000c3
 8000708:	200000c2 	.word	0x200000c2
 800070c:	200000c8 	.word	0x200000c8
 8000710:	080037b8 	.word	0x080037b8
 8000714:	200000d0 	.word	0x200000d0
 8000718:	200000c4 	.word	0x200000c4
 800071c:	200000c5 	.word	0x200000c5
 8000720:	200000c9 	.word	0x200000c9
 8000724:	200000e0 	.word	0x200000e0
 8000728:	200000cb 	.word	0x200000cb
		}
		else if ((inc_running == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (r_inc <= 180) && (r_inc > 5)))
 800072c:	4bb4      	ldr	r3, [pc, #720]	; (8000a00 <main+0x580>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d127      	bne.n	8000784 <main+0x304>
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	48b3      	ldr	r0, [pc, #716]	; (8000a04 <main+0x584>)
 8000738:	f001 f9b2 	bl	8001aa0 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d020      	beq.n	8000784 <main+0x304>
 8000742:	4bb1      	ldr	r3, [pc, #708]	; (8000a08 <main+0x588>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2bb4      	cmp	r3, #180	; 0xb4
 8000748:	d81c      	bhi.n	8000784 <main+0x304>
 800074a:	4baf      	ldr	r3, [pc, #700]	; (8000a08 <main+0x588>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b05      	cmp	r3, #5
 8000750:	d918      	bls.n	8000784 <main+0x304>
		{
			aux_running = 0;
 8000752:	4bae      	ldr	r3, [pc, #696]	; (8000a0c <main+0x58c>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
			DEC_Boucing();
 8000758:	f000 fa46 	bl	8000be8 <DEC_Boucing>
			Buzzer_Teclas();
 800075c:	f000 fa1a 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 8000760:	f7ff fe70 	bl	8000444 <LCD_Clear>
			r_inc -= 5;
 8000764:	4ba8      	ldr	r3, [pc, #672]	; (8000a08 <main+0x588>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	3b05      	subs	r3, #5
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4ba6      	ldr	r3, [pc, #664]	; (8000a08 <main+0x588>)
 800076e:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 8000770:	4ba5      	ldr	r3, [pc, #660]	; (8000a08 <main+0x588>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	49a6      	ldr	r1, [pc, #664]	; (8000a10 <main+0x590>)
 8000778:	48a6      	ldr	r0, [pc, #664]	; (8000a14 <main+0x594>)
 800077a:	f002 fb5f 	bl	8002e3c <siprintf>
			menu = 5;
 800077e:	4ba6      	ldr	r3, [pc, #664]	; (8000a18 <main+0x598>)
 8000780:	2205      	movs	r2, #5
 8000782:	701a      	strb	r2, [r3, #0]
		}

		if ((aux_decel == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000784:	4ba5      	ldr	r3, [pc, #660]	; (8000a1c <main+0x59c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d121      	bne.n	80007d0 <main+0x350>
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	489c      	ldr	r0, [pc, #624]	; (8000a04 <main+0x584>)
 8000792:	f001 f985 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d019      	beq.n	80007d0 <main+0x350>
		{
			r_inc = r_inc;
 800079c:	4b9a      	ldr	r3, [pc, #616]	; (8000a08 <main+0x588>)
 800079e:	781a      	ldrb	r2, [r3, #0]
 80007a0:	4b99      	ldr	r3, [pc, #612]	; (8000a08 <main+0x588>)
 80007a2:	701a      	strb	r2, [r3, #0]
			inc_running = 0;
 80007a4:	4b96      	ldr	r3, [pc, #600]	; (8000a00 <main+0x580>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
			ENTER_Boucing();
 80007aa:	f000 fa2f 	bl	8000c0c <ENTER_Boucing>
			Buzzer_Teclas();
 80007ae:	f000 f9f1 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 80007b2:	f7ff fe47 	bl	8000444 <LCD_Clear>
			menu = 6;
 80007b6:	4b98      	ldr	r3, [pc, #608]	; (8000a18 <main+0x598>)
 80007b8:	2206      	movs	r2, #6
 80007ba:	701a      	strb	r2, [r3, #0]
			d_inc = 5;
 80007bc:	4b98      	ldr	r3, [pc, #608]	; (8000a20 <main+0x5a0>)
 80007be:	2205      	movs	r2, #5
 80007c0:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 80007c2:	4b97      	ldr	r3, [pc, #604]	; (8000a20 <main+0x5a0>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	4991      	ldr	r1, [pc, #580]	; (8000a10 <main+0x590>)
 80007ca:	4896      	ldr	r0, [pc, #600]	; (8000a24 <main+0x5a4>)
 80007cc:	f002 fb36 	bl	8002e3c <siprintf>
		}

		if ((inc_decel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (d_inc <= 80)))
 80007d0:	4b95      	ldr	r3, [pc, #596]	; (8000a28 <main+0x5a8>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d125      	bne.n	8000824 <main+0x3a4>
 80007d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007dc:	4889      	ldr	r0, [pc, #548]	; (8000a04 <main+0x584>)
 80007de:	f001 f95f 	bl	8001aa0 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d01d      	beq.n	8000824 <main+0x3a4>
 80007e8:	4b8d      	ldr	r3, [pc, #564]	; (8000a20 <main+0x5a0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b50      	cmp	r3, #80	; 0x50
 80007ee:	d819      	bhi.n	8000824 <main+0x3a4>
		{
			aux_decel = 0;
 80007f0:	4b8a      	ldr	r3, [pc, #552]	; (8000a1c <main+0x59c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
			INC_Boucing();
 80007f6:	f000 f9e3 	bl	8000bc0 <INC_Boucing>
			Buzzer_Teclas();
 80007fa:	f000 f9cb 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 80007fe:	f7ff fe21 	bl	8000444 <LCD_Clear>
			d_inc += 5;
 8000802:	4b87      	ldr	r3, [pc, #540]	; (8000a20 <main+0x5a0>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3305      	adds	r3, #5
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b85      	ldr	r3, [pc, #532]	; (8000a20 <main+0x5a0>)
 800080c:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 800080e:	4b84      	ldr	r3, [pc, #528]	; (8000a20 <main+0x5a0>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	497e      	ldr	r1, [pc, #504]	; (8000a10 <main+0x590>)
 8000816:	4883      	ldr	r0, [pc, #524]	; (8000a24 <main+0x5a4>)
 8000818:	f002 fb10 	bl	8002e3c <siprintf>
			menu = 7;
 800081c:	4b7e      	ldr	r3, [pc, #504]	; (8000a18 <main+0x598>)
 800081e:	2207      	movs	r2, #7
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e02b      	b.n	800087c <main+0x3fc>
		}
		else if ((inc_decel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (d_inc <= 80) && (d_inc > 5)))
 8000824:	4b80      	ldr	r3, [pc, #512]	; (8000a28 <main+0x5a8>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d127      	bne.n	800087c <main+0x3fc>
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	4875      	ldr	r0, [pc, #468]	; (8000a04 <main+0x584>)
 8000830:	f001 f936 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d020      	beq.n	800087c <main+0x3fc>
 800083a:	4b79      	ldr	r3, [pc, #484]	; (8000a20 <main+0x5a0>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b50      	cmp	r3, #80	; 0x50
 8000840:	d81c      	bhi.n	800087c <main+0x3fc>
 8000842:	4b77      	ldr	r3, [pc, #476]	; (8000a20 <main+0x5a0>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b05      	cmp	r3, #5
 8000848:	d918      	bls.n	800087c <main+0x3fc>
		{
			aux_decel = 0;
 800084a:	4b74      	ldr	r3, [pc, #464]	; (8000a1c <main+0x59c>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
			DEC_Boucing();
 8000850:	f000 f9ca 	bl	8000be8 <DEC_Boucing>
			Buzzer_Teclas();
 8000854:	f000 f99e 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 8000858:	f7ff fdf4 	bl	8000444 <LCD_Clear>
			d_inc -= 5;
 800085c:	4b70      	ldr	r3, [pc, #448]	; (8000a20 <main+0x5a0>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3b05      	subs	r3, #5
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b6e      	ldr	r3, [pc, #440]	; (8000a20 <main+0x5a0>)
 8000866:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 8000868:	4b6d      	ldr	r3, [pc, #436]	; (8000a20 <main+0x5a0>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4968      	ldr	r1, [pc, #416]	; (8000a10 <main+0x590>)
 8000870:	486c      	ldr	r0, [pc, #432]	; (8000a24 <main+0x5a4>)
 8000872:	f002 fae3 	bl	8002e3c <siprintf>
			menu = 7;
 8000876:	4b68      	ldr	r3, [pc, #416]	; (8000a18 <main+0x598>)
 8000878:	2207      	movs	r2, #7
 800087a:	701a      	strb	r2, [r3, #0]
		}

		if ((config_finish == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800087c:	4b6b      	ldr	r3, [pc, #428]	; (8000a2c <main+0x5ac>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d11a      	bne.n	80008ba <main+0x43a>
 8000884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000888:	485e      	ldr	r0, [pc, #376]	; (8000a04 <main+0x584>)
 800088a:	f001 f909 	bl	8001aa0 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d012      	beq.n	80008ba <main+0x43a>
		{
			d_inc = d_inc;
 8000894:	4b62      	ldr	r3, [pc, #392]	; (8000a20 <main+0x5a0>)
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <main+0x5a0>)
 800089a:	701a      	strb	r2, [r3, #0]
			inc_decel = 0;
 800089c:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <main+0x5a8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
			ENTER_Boucing();
 80008a2:	f000 f9b3 	bl	8000c0c <ENTER_Boucing>
			Buzzer_Teclas();
 80008a6:	f000 f975 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 80008aa:	f7ff fdcb 	bl	8000444 <LCD_Clear>
			start = 4;
 80008ae:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <main+0x5b0>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	701a      	strb	r2, [r3, #0]
			menu = 0;
 80008b4:	4b58      	ldr	r3, [pc, #352]	; (8000a18 <main+0x598>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
		}

		if ((HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)) && (config_init = 1))
 80008ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008be:	4851      	ldr	r0, [pc, #324]	; (8000a04 <main+0x584>)
 80008c0:	f001 f8ee 	bl	8001aa0 <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00d      	beq.n	80008e6 <main+0x466>
 80008ca:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <main+0x5b4>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
		{
			ENTER_Boucing();
 80008d0:	f000 f99c 	bl	8000c0c <ENTER_Boucing>
			Buzzer_Teclas();
 80008d4:	f000 f95e 	bl	8000b94 <Buzzer_Teclas>
			LCD_Clear();
 80008d8:	f7ff fdb4 	bl	8000444 <LCD_Clear>
			set_converter();
 80008dc:	f000 fb2c 	bl	8000f38 <set_converter>
			start = 5;
 80008e0:	4b53      	ldr	r3, [pc, #332]	; (8000a30 <main+0x5b0>)
 80008e2:	2205      	movs	r2, #5
 80008e4:	701a      	strb	r2, [r3, #0]
		}

		switch (menu)
 80008e6:	4b4c      	ldr	r3, [pc, #304]	; (8000a18 <main+0x598>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	2b06      	cmp	r3, #6
 80008ee:	f200 80e5 	bhi.w	8000abc <main+0x63c>
 80008f2:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <main+0x478>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	08000915 	.word	0x08000915
 80008fc:	08000939 	.word	0x08000939
 8000900:	0800096b 	.word	0x0800096b
 8000904:	0800099d 	.word	0x0800099d
 8000908:	080009cf 	.word	0x080009cf
 800090c:	08000a59 	.word	0x08000a59
 8000910:	08000a8b 	.word	0x08000a8b
		{
		case 1:
			LCD_Cursor(0, 2);
 8000914:	2102      	movs	r1, #2
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff fc18 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 800091c:	4846      	ldr	r0, [pc, #280]	; (8000a38 <main+0x5b8>)
 800091e:	f7ff fcc5 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000922:	2100      	movs	r1, #0
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fc11 	bl	800014c <LCD_Cursor>
			LCD_String("<     MENU    ");
 800092a:	4844      	ldr	r0, [pc, #272]	; (8000a3c <main+0x5bc>)
 800092c:	f7ff fcbe 	bl	80002ac <LCD_String>
			aux_menu = 1;
 8000930:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <main+0x5c0>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
			break;
 8000936:	e0c1      	b.n	8000abc <main+0x63c>

		case 2:
			LCD_Cursor(0, 0);
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fc06 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 8000940:	4840      	ldr	r0, [pc, #256]	; (8000a44 <main+0x5c4>)
 8000942:	f7ff fcb3 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 8000946:	2107      	movs	r1, #7
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fbff 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 800094e:	483e      	ldr	r0, [pc, #248]	; (8000a48 <main+0x5c8>)
 8000950:	f7ff fcac 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000954:	2108      	movs	r1, #8
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fbf8 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 800095c:	483b      	ldr	r0, [pc, #236]	; (8000a4c <main+0x5cc>)
 800095e:	f7ff fca5 	bl	80002ac <LCD_String>
			aux_accel = 1;
 8000962:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <main+0x5d0>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
			break;
 8000968:	e0a8      	b.n	8000abc <main+0x63c>

		case 3:
			LCD_Cursor(0, 0);
 800096a:	2100      	movs	r1, #0
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff fbed 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 8000972:	4834      	ldr	r0, [pc, #208]	; (8000a44 <main+0x5c4>)
 8000974:	f7ff fc9a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 8000978:	2106      	movs	r1, #6
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff fbe6 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 8000980:	4831      	ldr	r0, [pc, #196]	; (8000a48 <main+0x5c8>)
 8000982:	f7ff fc93 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000986:	2108      	movs	r1, #8
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff fbdf 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 800098e:	482f      	ldr	r0, [pc, #188]	; (8000a4c <main+0x5cc>)
 8000990:	f7ff fc8c 	bl	80002ac <LCD_String>
			aux_running = 1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <main+0x58c>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
			break;
 800099a:	e08f      	b.n	8000abc <main+0x63c>

		case 4:
			LCD_Cursor(0, 0);
 800099c:	2100      	movs	r1, #0
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fbd4 	bl	800014c <LCD_Cursor>
			LCD_String("  RUNNING TIME  ");
 80009a4:	482b      	ldr	r0, [pc, #172]	; (8000a54 <main+0x5d4>)
 80009a6:	f7ff fc81 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 80009aa:	2107      	movs	r1, #7
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fbcd 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 80009b2:	4818      	ldr	r0, [pc, #96]	; (8000a14 <main+0x594>)
 80009b4:	f7ff fc7a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 80009b8:	2108      	movs	r1, #8
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff fbc6 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 80009c0:	4822      	ldr	r0, [pc, #136]	; (8000a4c <main+0x5cc>)
 80009c2:	f7ff fc73 	bl	80002ac <LCD_String>
			inc_running = 1;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <main+0x580>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
			break;
 80009cc:	e076      	b.n	8000abc <main+0x63c>

		case 5:
			LCD_Cursor(0, 0);
 80009ce:	2100      	movs	r1, #0
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fbbb 	bl	800014c <LCD_Cursor>
			LCD_String("  RUNNING TIME  ");
 80009d6:	481f      	ldr	r0, [pc, #124]	; (8000a54 <main+0x5d4>)
 80009d8:	f7ff fc68 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 80009dc:	2106      	movs	r1, #6
 80009de:	2001      	movs	r0, #1
 80009e0:	f7ff fbb4 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <main+0x594>)
 80009e6:	f7ff fc61 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 9);
 80009ea:	2109      	movs	r1, #9
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff fbad 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 80009f2:	4816      	ldr	r0, [pc, #88]	; (8000a4c <main+0x5cc>)
 80009f4:	f7ff fc5a 	bl	80002ac <LCD_String>
			aux_decel = 1;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <main+0x59c>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
			break;
 80009fe:	e05d      	b.n	8000abc <main+0x63c>
 8000a00:	200000cb 	.word	0x200000cb
 8000a04:	40010c00 	.word	0x40010c00
 8000a08:	200000c9 	.word	0x200000c9
 8000a0c:	200000c5 	.word	0x200000c5
 8000a10:	080037b8 	.word	0x080037b8
 8000a14:	200000e0 	.word	0x200000e0
 8000a18:	200000c0 	.word	0x200000c0
 8000a1c:	200000c6 	.word	0x200000c6
 8000a20:	200000ca 	.word	0x200000ca
 8000a24:	200000f0 	.word	0x200000f0
 8000a28:	200000cc 	.word	0x200000cc
 8000a2c:	200000c7 	.word	0x200000c7
 8000a30:	200000c1 	.word	0x200000c1
 8000a34:	200000cd 	.word	0x200000cd
 8000a38:	080037bc 	.word	0x080037bc
 8000a3c:	080037cc 	.word	0x080037cc
 8000a40:	200000c2 	.word	0x200000c2
 8000a44:	080037dc 	.word	0x080037dc
 8000a48:	200000d0 	.word	0x200000d0
 8000a4c:	080037f0 	.word	0x080037f0
 8000a50:	200000c4 	.word	0x200000c4
 8000a54:	080037f4 	.word	0x080037f4

		case 6:
			LCD_Cursor(0, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fb76 	bl	800014c <LCD_Cursor>
			LCD_String("   DECEL TIME   ");
 8000a60:	4841      	ldr	r0, [pc, #260]	; (8000b68 <main+0x6e8>)
 8000a62:	f7ff fc23 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 8000a66:	2107      	movs	r1, #7
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fb6f 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000a6e:	483f      	ldr	r0, [pc, #252]	; (8000b6c <main+0x6ec>)
 8000a70:	f7ff fc1c 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000a74:	2108      	movs	r1, #8
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff fb68 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000a7c:	483c      	ldr	r0, [pc, #240]	; (8000b70 <main+0x6f0>)
 8000a7e:	f7ff fc15 	bl	80002ac <LCD_String>
			inc_decel = 1;
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <main+0x6f4>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
			break;
 8000a88:	e018      	b.n	8000abc <main+0x63c>

		case 7:
			LCD_Cursor(0, 0);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff fb5d 	bl	800014c <LCD_Cursor>
			LCD_String("   DECEL TIME   ");
 8000a92:	4835      	ldr	r0, [pc, #212]	; (8000b68 <main+0x6e8>)
 8000a94:	f7ff fc0a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 8000a98:	2106      	movs	r1, #6
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fb56 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000aa0:	4832      	ldr	r0, [pc, #200]	; (8000b6c <main+0x6ec>)
 8000aa2:	f7ff fc03 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fb4f 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000aae:	4830      	ldr	r0, [pc, #192]	; (8000b70 <main+0x6f0>)
 8000ab0:	f7ff fbfc 	bl	80002ac <LCD_String>
			config_finish = 1;
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <main+0x6f8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
			break;
 8000aba:	bf00      	nop
		}

		switch (start)
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <main+0x6fc>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	f63f acef 	bhi.w	80004a6 <main+0x26>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <main+0x650>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000ae5 	.word	0x08000ae5
 8000ad4:	08000b03 	.word	0x08000b03
 8000ad8:	08000b27 	.word	0x08000b27
 8000adc:	08000b33 	.word	0x08000b33
 8000ae0:	08000b5d 	.word	0x08000b5d
		{

		case 1:
			LCD_Cursor(0, 2);
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff fb30 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000aec:	4824      	ldr	r0, [pc, #144]	; (8000b80 <main+0x700>)
 8000aee:	f7ff fbdd 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000af2:	2100      	movs	r1, #0
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff fb29 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000afa:	4822      	ldr	r0, [pc, #136]	; (8000b84 <main+0x704>)
 8000afc:	f7ff fbd6 	bl	80002ac <LCD_String>
			break;
 8000b00:	e030      	b.n	8000b64 <main+0x6e4>

		case 2:
			LCD_Cursor(0, 2);
 8000b02:	2102      	movs	r1, #2
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fb21 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000b0a:	481d      	ldr	r0, [pc, #116]	; (8000b80 <main+0x700>)
 8000b0c:	f7ff fbce 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000b10:	2100      	movs	r1, #0
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fb1a 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000b18:	481a      	ldr	r0, [pc, #104]	; (8000b84 <main+0x704>)
 8000b1a:	f7ff fbc7 	bl	80002ac <LCD_String>
			aux_start = 1;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <main+0x708>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
			break;
 8000b24:	e01e      	b.n	8000b64 <main+0x6e4>

		case 3:
			aux_pwmPreset = 1;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <main+0x70c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
			start_preset();
 8000b2c:	f000 f882 	bl	8000c34 <start_preset>
			break;
 8000b30:	e018      	b.n	8000b64 <main+0x6e4>

		case 4:
			LCD_Cursor(0, 2);
 8000b32:	2102      	movs	r1, #2
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fb09 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <main+0x700>)
 8000b3c:	f7ff fbb6 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff fb02 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000b48:	480e      	ldr	r0, [pc, #56]	; (8000b84 <main+0x704>)
 8000b4a:	f7ff fbaf 	bl	80002ac <LCD_String>
			config_init = 1;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <main+0x710>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
			config_finish = 0;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <main+0x6f8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
			break;
 8000b5a:	e003      	b.n	8000b64 <main+0x6e4>

		case 5:
			start_config();
 8000b5c:	f000 f91a 	bl	8000d94 <start_config>
			break;
 8000b60:	bf00      	nop
 8000b62:	e4a0      	b.n	80004a6 <main+0x26>
		if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000b64:	e49f      	b.n	80004a6 <main+0x26>
 8000b66:	bf00      	nop
 8000b68:	08003808 	.word	0x08003808
 8000b6c:	200000f0 	.word	0x200000f0
 8000b70:	080037f0 	.word	0x080037f0
 8000b74:	200000cc 	.word	0x200000cc
 8000b78:	200000c7 	.word	0x200000c7
 8000b7c:	200000c1 	.word	0x200000c1
 8000b80:	080037bc 	.word	0x080037bc
 8000b84:	0800381c 	.word	0x0800381c
 8000b88:	200000c3 	.word	0x200000c3
 8000b8c:	200000ce 	.word	0x200000ce
 8000b90:	200000cd 	.word	0x200000cd

08000b94 <Buzzer_Teclas>:

    /* USER CODE BEGIN 3 */
  }
}
	void Buzzer_Teclas()
	{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <Buzzer_Teclas+0x28>)
 8000b9e:	f000 ff96 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000ba2:	2032      	movs	r0, #50	; 0x32
 8000ba4:	f000 fcf8 	bl	8001598 <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2102      	movs	r1, #2
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <Buzzer_Teclas+0x28>)
 8000bae:	f000 ff8e 	bl	8001ace <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000bb2:	2032      	movs	r0, #50	; 0x32
 8000bb4:	f000 fcf0 	bl	8001598 <HAL_Delay>
	}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <INC_Boucing>:

	void INC_Boucing()
	{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	f000 fce7 	bl	8001598 <HAL_Delay>
		while (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin));
 8000bca:	bf00      	nop
 8000bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <INC_Boucing+0x24>)
 8000bd2:	f000 ff65 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f7      	bne.n	8000bcc <INC_Boucing+0xc>
	}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <DEC_Boucing>:
	void DEC_Boucing()
	{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f000 fcd3 	bl	8001598 <HAL_Delay>
		while (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin));
 8000bf2:	bf00      	nop
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	4804      	ldr	r0, [pc, #16]	; (8000c08 <DEC_Boucing+0x20>)
 8000bf8:	f000 ff52 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f8      	bne.n	8000bf4 <DEC_Boucing+0xc>
	}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40010c00 	.word	0x40010c00

08000c0c <ENTER_Boucing>:
	void ENTER_Boucing()
	{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f000 fcc1 	bl	8001598 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin));
 8000c16:	bf00      	nop
 8000c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <ENTER_Boucing+0x24>)
 8000c1e:	f000 ff3f 	bl	8001aa0 <HAL_GPIO_ReadPin>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f7      	bne.n	8000c18 <ENTER_Boucing+0xc>
	}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <start_preset>:

	void start_preset()
	{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	LCD_Clear();
 8000c38:	f7ff fc04 	bl	8000444 <LCD_Clear>
	LCD_Cursor(0, 0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fa84 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:    ACCEL");
 8000c44:	4846      	ldr	r0, [pc, #280]	; (8000d60 <start_preset+0x12c>)
 8000c46:	f7ff fb31 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fa7d 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000c52:	4844      	ldr	r0, [pc, #272]	; (8000d64 <start_preset+0x130>)
 8000c54:	f7ff fb2a 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 11);
 8000c58:	210b      	movs	r1, #11
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f7ff fa76 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000c60:	4841      	ldr	r0, [pc, #260]	; (8000d68 <start_preset+0x134>)
 8000c62:	f7ff fb23 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 13);
 8000c66:	210d      	movs	r1, #13
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fa6f 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_accel);
 8000c6e:	483f      	ldr	r0, [pc, #252]	; (8000d6c <start_preset+0x138>)
 8000c70:	f7ff fb1c 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 15);
 8000c74:	210f      	movs	r1, #15
 8000c76:	2001      	movs	r0, #1
 8000c78:	f7ff fa68 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000c7c:	483c      	ldr	r0, [pc, #240]	; (8000d70 <start_preset+0x13c>)
 8000c7e:	f7ff fb15 	bl	80002ac <LCD_String>
	HAL_Delay(a_inc * 1000);
 8000c82:	4b3c      	ldr	r3, [pc, #240]	; (8000d74 <start_preset+0x140>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8c:	fb02 f303 	mul.w	r3, r2, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fc81 	bl	8001598 <HAL_Delay>
	LCD_Clear();
 8000c96:	f7ff fbd5 	bl	8000444 <LCD_Clear>

	LCD_Cursor(0, 0);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fa55 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:  RUNNING");
 8000ca2:	4835      	ldr	r0, [pc, #212]	; (8000d78 <start_preset+0x144>)
 8000ca4:	f7ff fb02 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 0);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fa4e 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000cb0:	482c      	ldr	r0, [pc, #176]	; (8000d64 <start_preset+0x130>)
 8000cb2:	f7ff fafb 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 10);
 8000cb6:	210a      	movs	r1, #10
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff fa47 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000cbe:	482a      	ldr	r0, [pc, #168]	; (8000d68 <start_preset+0x134>)
 8000cc0:	f7ff faf4 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 12);
 8000cc4:	210c      	movs	r1, #12
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff fa40 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_running);
 8000ccc:	482b      	ldr	r0, [pc, #172]	; (8000d7c <start_preset+0x148>)
 8000cce:	f7ff faed 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 15);
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fa39 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000cda:	4825      	ldr	r0, [pc, #148]	; (8000d70 <start_preset+0x13c>)
 8000cdc:	f7ff fae6 	bl	80002ac <LCD_String>
	HAL_Delay(r_inc * 1000);
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <start_preset+0x14c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fc52 	bl	8001598 <HAL_Delay>
	LCD_Clear();
 8000cf4:	f7ff fba6 	bl	8000444 <LCD_Clear>

	LCD_Cursor(0, 0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fa26 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:    DECEL");
 8000d00:	4820      	ldr	r0, [pc, #128]	; (8000d84 <start_preset+0x150>)
 8000d02:	f7ff fad3 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 0);
 8000d06:	2100      	movs	r1, #0
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff fa1f 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <start_preset+0x130>)
 8000d10:	f7ff facc 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 11);
 8000d14:	210b      	movs	r1, #11
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff fa18 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000d1c:	4812      	ldr	r0, [pc, #72]	; (8000d68 <start_preset+0x134>)
 8000d1e:	f7ff fac5 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 13);
 8000d22:	210d      	movs	r1, #13
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fa11 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_decel);
 8000d2a:	4817      	ldr	r0, [pc, #92]	; (8000d88 <start_preset+0x154>)
 8000d2c:	f7ff fabe 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 15);
 8000d30:	210f      	movs	r1, #15
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fa0a 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <start_preset+0x13c>)
 8000d3a:	f7ff fab7 	bl	80002ac <LCD_String>
	HAL_Delay(d_inc * 1000);
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <start_preset+0x158>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d48:	fb02 f303 	mul.w	r3, r2, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fc23 	bl	8001598 <HAL_Delay>
	LCD_Clear();
 8000d52:	f7ff fb77 	bl	8000444 <LCD_Clear>
	start = 1;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <start_preset+0x15c>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
	}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08003830 	.word	0x08003830
 8000d64:	08003844 	.word	0x08003844
 8000d68:	08003850 	.word	0x08003850
 8000d6c:	200000d0 	.word	0x200000d0
 8000d70:	080037f0 	.word	0x080037f0
 8000d74:	200000c8 	.word	0x200000c8
 8000d78:	08003854 	.word	0x08003854
 8000d7c:	200000e0 	.word	0x200000e0
 8000d80:	200000c9 	.word	0x200000c9
 8000d84:	08003868 	.word	0x08003868
 8000d88:	200000f0 	.word	0x200000f0
 8000d8c:	200000ca 	.word	0x200000ca
 8000d90:	200000c1 	.word	0x200000c1

08000d94 <start_config>:

	void start_config()
	{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	LCD_Cursor(0, 0);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff f9d6 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:    ACCEL");
 8000da0:	4846      	ldr	r0, [pc, #280]	; (8000ebc <start_config+0x128>)
 8000da2:	f7ff fa83 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 0);
 8000da6:	2100      	movs	r1, #0
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff f9cf 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000dae:	4844      	ldr	r0, [pc, #272]	; (8000ec0 <start_config+0x12c>)
 8000db0:	f7ff fa7c 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 11);
 8000db4:	210b      	movs	r1, #11
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff f9c8 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000dbc:	4841      	ldr	r0, [pc, #260]	; (8000ec4 <start_config+0x130>)
 8000dbe:	f7ff fa75 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 13);
 8000dc2:	210d      	movs	r1, #13
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff f9c1 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_accel);
 8000dca:	483f      	ldr	r0, [pc, #252]	; (8000ec8 <start_config+0x134>)
 8000dcc:	f7ff fa6e 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 15);
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff f9ba 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000dd8:	483c      	ldr	r0, [pc, #240]	; (8000ecc <start_config+0x138>)
 8000dda:	f7ff fa67 	bl	80002ac <LCD_String>
	HAL_Delay(a_inc * 1000);
 8000dde:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <start_config+0x13c>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de8:	fb02 f303 	mul.w	r3, r2, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fbd3 	bl	8001598 <HAL_Delay>
	LCD_Clear();
 8000df2:	f7ff fb27 	bl	8000444 <LCD_Clear>

	LCD_Cursor(0, 0);
 8000df6:	2100      	movs	r1, #0
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff f9a7 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:  RUNNING");
 8000dfe:	4835      	ldr	r0, [pc, #212]	; (8000ed4 <start_config+0x140>)
 8000e00:	f7ff fa54 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 0);
 8000e04:	2100      	movs	r1, #0
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff f9a0 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000e0c:	482c      	ldr	r0, [pc, #176]	; (8000ec0 <start_config+0x12c>)
 8000e0e:	f7ff fa4d 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 10);
 8000e12:	210a      	movs	r1, #10
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff f999 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000e1a:	482a      	ldr	r0, [pc, #168]	; (8000ec4 <start_config+0x130>)
 8000e1c:	f7ff fa46 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 12);
 8000e20:	210c      	movs	r1, #12
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff f992 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_running);
 8000e28:	482b      	ldr	r0, [pc, #172]	; (8000ed8 <start_config+0x144>)
 8000e2a:	f7ff fa3f 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 15);
 8000e2e:	210f      	movs	r1, #15
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff f98b 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000e36:	4825      	ldr	r0, [pc, #148]	; (8000ecc <start_config+0x138>)
 8000e38:	f7ff fa38 	bl	80002ac <LCD_String>
	HAL_Delay(r_inc * 1000);
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <start_config+0x148>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fba4 	bl	8001598 <HAL_Delay>
	LCD_Clear();
 8000e50:	f7ff faf8 	bl	8000444 <LCD_Clear>

	LCD_Cursor(0, 0);
 8000e54:	2100      	movs	r1, #0
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff f978 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:    DECEL");
 8000e5c:	4820      	ldr	r0, [pc, #128]	; (8000ee0 <start_config+0x14c>)
 8000e5e:	f7ff fa25 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 0);
 8000e62:	2100      	movs	r1, #0
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff f971 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000e6a:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <start_config+0x12c>)
 8000e6c:	f7ff fa1e 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 11);
 8000e70:	210b      	movs	r1, #11
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff f96a 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000e78:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <start_config+0x130>)
 8000e7a:	f7ff fa17 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 13);
 8000e7e:	210d      	movs	r1, #13
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff f963 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_decel);
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <start_config+0x150>)
 8000e88:	f7ff fa10 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 15);
 8000e8c:	210f      	movs	r1, #15
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff f95c 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <start_config+0x138>)
 8000e96:	f7ff fa09 	bl	80002ac <LCD_String>
	HAL_Delay(d_inc * 1000);
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <start_config+0x154>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea4:	fb02 f303 	mul.w	r3, r2, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fb75 	bl	8001598 <HAL_Delay>
	LCD_Clear();
 8000eae:	f7ff fac9 	bl	8000444 <LCD_Clear>
	start = 4;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <start_config+0x158>)
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	701a      	strb	r2, [r3, #0]
	}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	08003830 	.word	0x08003830
 8000ec0:	08003844 	.word	0x08003844
 8000ec4:	08003850 	.word	0x08003850
 8000ec8:	200000d0 	.word	0x200000d0
 8000ecc:	080037f0 	.word	0x080037f0
 8000ed0:	200000c8 	.word	0x200000c8
 8000ed4:	08003854 	.word	0x08003854
 8000ed8:	200000e0 	.word	0x200000e0
 8000edc:	200000c9 	.word	0x200000c9
 8000ee0:	08003868 	.word	0x08003868
 8000ee4:	200000f0 	.word	0x200000f0
 8000ee8:	200000ca 	.word	0x200000ca
 8000eec:	200000c1 	.word	0x200000c1

08000ef0 <sys_init>:

	void sys_init()
	{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	LCD_Init();
 8000ef4:	f7ff faad 	bl	8000452 <LCD_Init>
	LCD_Cursor(0, 2);
 8000ef8:	2102      	movs	r1, #2
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff f926 	bl	800014c <LCD_Cursor>
	LCD_String("DC MOTOR SYS");
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <sys_init+0x3c>)
 8000f02:	f7ff f9d3 	bl	80002ac <LCD_String>
	LCD_Cursor(1, 2);
 8000f06:	2102      	movs	r1, #2
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff f91f 	bl	800014c <LCD_Cursor>
	LCD_String("VERSION: 1.0");
 8000f0e:	4808      	ldr	r0, [pc, #32]	; (8000f30 <sys_init+0x40>)
 8000f10:	f7ff f9cc 	bl	80002ac <LCD_String>
	HAL_Delay(3000);
 8000f14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f18:	f000 fb3e 	bl	8001598 <HAL_Delay>
	LCD_Clear();
 8000f1c:	f7ff fa92 	bl	8000444 <LCD_Clear>
	start = 1;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <sys_init+0x44>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
	}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	080037bc 	.word	0x080037bc
 8000f30:	0800387c 	.word	0x0800387c
 8000f34:	200000c1 	.word	0x200000c1

08000f38 <set_converter>:

	void set_converter()
	{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	a_inc = a_inc;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <set_converter+0x4c>)
 8000f3e:	781a      	ldrb	r2, [r3, #0]
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <set_converter+0x4c>)
 8000f42:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_accel, "%d", a_inc);
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <set_converter+0x4c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	490f      	ldr	r1, [pc, #60]	; (8000f88 <set_converter+0x50>)
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <set_converter+0x54>)
 8000f4e:	f001 ff75 	bl	8002e3c <siprintf>
	r_inc = r_inc;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <set_converter+0x58>)
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <set_converter+0x58>)
 8000f58:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_running, "%d", r_inc);
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <set_converter+0x58>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4909      	ldr	r1, [pc, #36]	; (8000f88 <set_converter+0x50>)
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <set_converter+0x5c>)
 8000f64:	f001 ff6a 	bl	8002e3c <siprintf>
	d_inc = d_inc;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <set_converter+0x60>)
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <set_converter+0x60>)
 8000f6e:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_decel, "%d", d_inc);
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <set_converter+0x60>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4904      	ldr	r1, [pc, #16]	; (8000f88 <set_converter+0x50>)
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <set_converter+0x64>)
 8000f7a:	f001 ff5f 	bl	8002e3c <siprintf>
	}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000c8 	.word	0x200000c8
 8000f88:	080037b8 	.word	0x080037b8
 8000f8c:	200000d0 	.word	0x200000d0
 8000f90:	200000c9 	.word	0x200000c9
 8000f94:	200000e0 	.word	0x200000e0
 8000f98:	200000ca 	.word	0x200000ca
 8000f9c:	200000f0 	.word	0x200000f0

08000fa0 <converter_preset>:

	void converter_preset()
	{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	a_inc = 10;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <converter_preset+0x44>)
 8000fa6:	220a      	movs	r2, #10
 8000fa8:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_accel, "%d", a_inc);
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <converter_preset+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <converter_preset+0x48>)
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <converter_preset+0x4c>)
 8000fb4:	f001 ff42 	bl	8002e3c <siprintf>
	r_inc = 120;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <converter_preset+0x50>)
 8000fba:	2278      	movs	r2, #120	; 0x78
 8000fbc:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_running, "%d", r_inc);
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <converter_preset+0x50>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <converter_preset+0x48>)
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <converter_preset+0x54>)
 8000fc8:	f001 ff38 	bl	8002e3c <siprintf>
	d_inc = 10;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <converter_preset+0x58>)
 8000fce:	220a      	movs	r2, #10
 8000fd0:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_decel, "%d", d_inc);
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <converter_preset+0x58>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4903      	ldr	r1, [pc, #12]	; (8000fe8 <converter_preset+0x48>)
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <converter_preset+0x5c>)
 8000fdc:	f001 ff2e 	bl	8002e3c <siprintf>
	}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000c8 	.word	0x200000c8
 8000fe8:	080037b8 	.word	0x080037b8
 8000fec:	200000d0 	.word	0x200000d0
 8000ff0:	200000c9 	.word	0x200000c9
 8000ff4:	200000e0 	.word	0x200000e0
 8000ff8:	200000ca 	.word	0x200000ca
 8000ffc:	200000f0 	.word	0x200000f0

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b090      	sub	sp, #64	; 0x40
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0318 	add.w	r3, r7, #24
 800100a:	2228      	movs	r2, #40	; 0x28
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f001 ff34 	bl	8002e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800102a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800103e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fd59 	bl	8001b00 <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001054:	f000 f930 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2102      	movs	r1, #2
 8001072:	4618      	mov	r0, r3
 8001074:	f000 ffc6 	bl	8002004 <HAL_RCC_ClockConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800107e:	f000 f91b 	bl	80012b8 <Error_Handler>
  }
}
 8001082:	bf00      	nop
 8001084:	3740      	adds	r7, #64	; 0x40
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
 80010b8:	615a      	str	r2, [r3, #20]
 80010ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_TIM2_Init+0xe8>)
 80010be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <MX_TIM2_Init+0xe8>)
 80010c6:	2247      	movs	r2, #71	; 0x47
 80010c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <MX_TIM2_Init+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <MX_TIM2_Init+0xe8>)
 80010d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_TIM2_Init+0xe8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_TIM2_Init+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <MX_TIM2_Init+0xe8>)
 80010e6:	f001 f8e9 	bl	80022bc <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010f0:	f000 f8e2 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	4619      	mov	r1, r3
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <MX_TIM2_Init+0xe8>)
 8001102:	f001 fae1 	bl	80026c8 <HAL_TIM_ConfigClockSource>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800110c:	f000 f8d4 	bl	80012b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <MX_TIM2_Init+0xe8>)
 8001112:	f001 f922 	bl	800235a <HAL_TIM_PWM_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800111c:	f000 f8cc 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4619      	mov	r1, r3
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_TIM2_Init+0xe8>)
 8001130:	f001 fe2c 	bl	8002d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800113a:	f000 f8bd 	bl	80012b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113e:	2360      	movs	r3, #96	; 0x60
 8001140:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800114a:	2304      	movs	r3, #4
 800114c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2208      	movs	r2, #8
 8001152:	4619      	mov	r1, r3
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <MX_TIM2_Init+0xe8>)
 8001156:	f001 f9f5 	bl	8002544 <HAL_TIM_PWM_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001160:	f000 f8aa 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <MX_TIM2_Init+0xe8>)
 8001166:	f000 f8fb 	bl	8001360 <HAL_TIM_MspPostInit>

}
 800116a:	bf00      	nop
 800116c:	3738      	adds	r7, #56	; 0x38
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000078 	.word	0x20000078

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <MX_GPIO_Init+0x12c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a44      	ldr	r2, [pc, #272]	; (80012a4 <MX_GPIO_Init+0x12c>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <MX_GPIO_Init+0x12c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <MX_GPIO_Init+0x12c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a3e      	ldr	r2, [pc, #248]	; (80012a4 <MX_GPIO_Init+0x12c>)
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <MX_GPIO_Init+0x12c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <MX_GPIO_Init+0x12c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a38      	ldr	r2, [pc, #224]	; (80012a4 <MX_GPIO_Init+0x12c>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <MX_GPIO_Init+0x12c>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <MX_GPIO_Init+0x12c>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a32      	ldr	r2, [pc, #200]	; (80012a4 <MX_GPIO_Init+0x12c>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <MX_GPIO_Init+0x12c>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f2:	482d      	ldr	r0, [pc, #180]	; (80012a8 <MX_GPIO_Init+0x130>)
 80011f4:	f000 fc6b 	bl	8001ace <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 80011f8:	2200      	movs	r2, #0
 80011fa:	213b      	movs	r1, #59	; 0x3b
 80011fc:	482b      	ldr	r0, [pc, #172]	; (80012ac <MX_GPIO_Init+0x134>)
 80011fe:	f000 fc66 	bl	8001ace <HAL_GPIO_WritePin>
                          |D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f241 0108 	movw	r1, #4104	; 0x1008
 8001208:	4829      	ldr	r0, [pc, #164]	; (80012b0 <MX_GPIO_Init+0x138>)
 800120a:	f000 fc60 	bl	8001ace <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800120e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2302      	movs	r3, #2
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	4820      	ldr	r0, [pc, #128]	; (80012a8 <MX_GPIO_Init+0x130>)
 8001228:	f000 fabe 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin BUZZER_Pin RS_Pin D4_Pin
                           D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 800122c:	233b      	movs	r3, #59	; 0x3b
 800122e:	613b      	str	r3, [r7, #16]
                          |D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	481a      	ldr	r0, [pc, #104]	; (80012ac <MX_GPIO_Init+0x134>)
 8001244:	f000 fab0 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin;
 8001248:	f241 0308 	movw	r3, #4104	; 0x1008
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2302      	movs	r3, #2
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	4619      	mov	r1, r3
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <MX_GPIO_Init+0x138>)
 8001262:	f000 faa1 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TACHOMETER_Pin */
  GPIO_InitStruct.Pin = TACHOMETER_Pin;
 8001266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_GPIO_Init+0x13c>)
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TACHOMETER_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_GPIO_Init+0x138>)
 800127c:	f000 fa94 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEC_Pin ENTER_Pin INC_Pin */
  GPIO_InitStruct.Pin = DEC_Pin|ENTER_Pin|INC_Pin;
 8001280:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4619      	mov	r1, r3
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <MX_GPIO_Init+0x138>)
 8001296:	f000 fa87 	bl	80017a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40010800 	.word	0x40010800
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	10110000 	.word	0x10110000

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_MspInit+0x5c>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_MspInit+0x5c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_MspInit+0x5c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_MspInit+0x5c>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_MspInit+0x5c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_MspInit+0x5c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_MspInit+0x60>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_MspInit+0x60>)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000

08001328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001338:	d10b      	bne.n	8001352 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_TIM_Base_MspInit+0x34>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_TIM_Base_MspInit+0x34>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_TIM_Base_MspInit+0x34>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000

08001360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137e:	d117      	bne.n	80013b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_TIM_MspPostInit+0x58>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <HAL_TIM_MspPostInit+0x58>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_TIM_MspPostInit+0x58>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_Pin;
 8001398:	2304      	movs	r3, #4
 800139a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4619      	mov	r1, r3
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <HAL_TIM_MspPostInit+0x5c>)
 80013ac:	f000 f9fc 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001406:	f000 f8ab 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f001 fd24 	bl	8002e8c <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20002800 	.word	0x20002800
 8001470:	00000400 	.word	0x00000400
 8001474:	20000100 	.word	0x20000100
 8001478:	20000250 	.word	0x20000250

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001488:	f7ff fff8 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800148e:	490c      	ldr	r1, [pc, #48]	; (80014c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014a4:	4c09      	ldr	r4, [pc, #36]	; (80014cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f001 fcf1 	bl	8002e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7fe ffe3 	bl	8000480 <main>
  bx lr
 80014ba:	4770      	bx	lr
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014c4:	080038ec 	.word	0x080038ec
  ldr r2, =_sbss
 80014c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014cc:	20000250 	.word	0x20000250

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x28>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f92b 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fee8 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f935 	bl	800178e <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f90b 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	20000008 	.word	0x20000008
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000008 	.word	0x20000008
 8001580:	20000104 	.word	0x20000104

08001584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000104 	.word	0x20000104

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fff0 	bl	8001584 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffe0 	bl	8001584 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff90 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff49 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff5e 	bl	8001628 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff90 	bl	8001698 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5f 	bl	8001644 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffb0 	bl	80016fc <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e161      	b.n	8001a80 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017bc:	2201      	movs	r2, #1
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8150 	bne.w	8001a7a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a97      	ldr	r2, [pc, #604]	; (8001a3c <HAL_GPIO_Init+0x294>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d05e      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017e4:	4a95      	ldr	r2, [pc, #596]	; (8001a3c <HAL_GPIO_Init+0x294>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d875      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017ea:	4a95      	ldr	r2, [pc, #596]	; (8001a40 <HAL_GPIO_Init+0x298>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d058      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017f0:	4a93      	ldr	r2, [pc, #588]	; (8001a40 <HAL_GPIO_Init+0x298>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d86f      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017f6:	4a93      	ldr	r2, [pc, #588]	; (8001a44 <HAL_GPIO_Init+0x29c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d052      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017fc:	4a91      	ldr	r2, [pc, #580]	; (8001a44 <HAL_GPIO_Init+0x29c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d869      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001802:	4a91      	ldr	r2, [pc, #580]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d04c      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001808:	4a8f      	ldr	r2, [pc, #572]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d863      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800180e:	4a8f      	ldr	r2, [pc, #572]	; (8001a4c <HAL_GPIO_Init+0x2a4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d046      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001814:	4a8d      	ldr	r2, [pc, #564]	; (8001a4c <HAL_GPIO_Init+0x2a4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d85d      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d82a      	bhi.n	8001874 <HAL_GPIO_Init+0xcc>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d859      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001822:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_GPIO_Init+0x80>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	080018a3 	.word	0x080018a3
 800182c:	0800187d 	.word	0x0800187d
 8001830:	0800188f 	.word	0x0800188f
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d7 	.word	0x080018d7
 800183c:	080018d7 	.word	0x080018d7
 8001840:	080018d7 	.word	0x080018d7
 8001844:	080018d7 	.word	0x080018d7
 8001848:	080018d7 	.word	0x080018d7
 800184c:	080018d7 	.word	0x080018d7
 8001850:	080018d7 	.word	0x080018d7
 8001854:	080018d7 	.word	0x080018d7
 8001858:	080018d7 	.word	0x080018d7
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018d7 	.word	0x080018d7
 8001864:	080018d7 	.word	0x080018d7
 8001868:	080018d7 	.word	0x080018d7
 800186c:	08001885 	.word	0x08001885
 8001870:	08001899 	.word	0x08001899
 8001874:	4a76      	ldr	r2, [pc, #472]	; (8001a50 <HAL_GPIO_Init+0x2a8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187a:	e02c      	b.n	80018d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e029      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	3304      	adds	r3, #4
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e024      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	3308      	adds	r3, #8
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e01f      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	330c      	adds	r3, #12
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e01a      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018aa:	2304      	movs	r3, #4
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e013      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	611a      	str	r2, [r3, #16]
          break;
 80018c2:	e009      	b.n	80018d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	615a      	str	r2, [r3, #20]
          break;
 80018ce:	e003      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          break;
 80018d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d801      	bhi.n	80018e2 <HAL_GPIO_Init+0x13a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_Init+0x13e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3304      	adds	r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d802      	bhi.n	80018f4 <HAL_GPIO_Init+0x14c>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x152>
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	3b08      	subs	r3, #8
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	210f      	movs	r1, #15
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80a9 	beq.w	8001a7a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001928:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001940:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3d      	ldr	r2, [pc, #244]	; (8001a5c <HAL_GPIO_Init+0x2b4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1e0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3c      	ldr	r2, [pc, #240]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1dc>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <HAL_GPIO_Init+0x2bc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1d8>
 800197c:	2302      	movs	r3, #2
 800197e:	e004      	b.n	800198a <HAL_GPIO_Init+0x1e2>
 8001980:	2303      	movs	r3, #3
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x1e2>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_GPIO_Init+0x1e2>
 8001988:	2300      	movs	r3, #0
 800198a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198c:	f002 0203 	and.w	r2, r2, #3
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	4093      	lsls	r3, r2
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199a:	492f      	ldr	r1, [pc, #188]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3302      	adds	r3, #2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b4:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	492b      	ldr	r1, [pc, #172]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4927      	ldr	r1, [pc, #156]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	4921      	ldr	r1, [pc, #132]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	491d      	ldr	r1, [pc, #116]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4917      	ldr	r1, [pc, #92]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4913      	ldr	r1, [pc, #76]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01f      	beq.n	8001a6c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	490d      	ldr	r1, [pc, #52]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e01f      	b.n	8001a7a <HAL_GPIO_Init+0x2d2>
 8001a3a:	bf00      	nop
 8001a3c:	10320000 	.word	0x10320000
 8001a40:	10310000 	.word	0x10310000
 8001a44:	10220000 	.word	0x10220000
 8001a48:	10210000 	.word	0x10210000
 8001a4c:	10120000 	.word	0x10120000
 8001a50:	10110000 	.word	0x10110000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	40010800 	.word	0x40010800
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	40011000 	.word	0x40011000
 8001a68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_GPIO_Init+0x2f4>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	4909      	ldr	r1, [pc, #36]	; (8001a9c <HAL_GPIO_Init+0x2f4>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f47f ae96 	bne.w	80017bc <HAL_GPIO_Init+0x14>
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	372c      	adds	r7, #44	; 0x2c
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	807b      	strh	r3, [r7, #2]
 8001ada:	4613      	mov	r3, r2
 8001adc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ade:	787b      	ldrb	r3, [r7, #1]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae4:	887a      	ldrh	r2, [r7, #2]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aea:	e003      	b.n	8001af4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	041a      	lsls	r2, r3, #16
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	611a      	str	r2, [r3, #16]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e272      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8087 	beq.w	8001c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b20:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d00c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b2c:	4b8f      	ldr	r3, [pc, #572]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d112      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
 8001b38:	4b8c      	ldr	r3, [pc, #560]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d10b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d06c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x12c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d168      	bne.n	8001c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e24c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x76>
 8001b68:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a7f      	ldr	r2, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e02e      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b7b      	ldr	r3, [pc, #492]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7a      	ldr	r2, [pc, #488]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0xbc>
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a71      	ldr	r2, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001bbc:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a6a      	ldr	r2, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a67      	ldr	r2, [pc, #412]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fcd2 	bl	8001584 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fcce 	bl	8001584 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e200      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe4>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fcbe 	bl	8001584 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fcba 	bl	8001584 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1ec      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x10c>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d11c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1c0      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4939      	ldr	r1, [pc, #228]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e03a      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fc73 	bl	8001584 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fc6f 	bl	8001584 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1a1      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4927      	ldr	r1, [pc, #156]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fc52 	bl	8001584 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fc4e 	bl	8001584 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e180      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03a      	beq.n	8001d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d019      	beq.n	8001d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fc32 	bl	8001584 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff fc2e 	bl	8001584 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e160      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f000 fa9c 	bl	8002280 <RCC_Delay>
 8001d48:	e01c      	b.n	8001d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7ff fc18 	bl	8001584 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d56:	e00f      	b.n	8001d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc14 	bl	8001584 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d908      	bls.n	8001d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e146      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	42420000 	.word	0x42420000
 8001d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e9      	bne.n	8001d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80a6 	beq.w	8001ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10d      	bne.n	8001dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a87      	ldr	r2, [pc, #540]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d118      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7e      	ldr	r2, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fbd5 	bl	8001584 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7ff fbd1 	bl	8001584 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b64      	cmp	r3, #100	; 0x64
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e103      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x312>
 8001e04:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	e02d      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x334>
 8001e1a:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a66      	ldr	r2, [pc, #408]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	e01c      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d10c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x356>
 8001e3c:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a60      	ldr	r2, [pc, #384]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	4b5e      	ldr	r3, [pc, #376]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a5d      	ldr	r2, [pc, #372]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	e00b      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a57      	ldr	r2, [pc, #348]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fb85 	bl	8001584 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fb81 	bl	8001584 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0b1      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ee      	beq.n	8001e7e <HAL_RCC_OscConfig+0x37e>
 8001ea0:	e014      	b.n	8001ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb6f 	bl	8001584 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fb6b 	bl	8001584 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e09b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ee      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8087 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d061      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d146      	bne.n	8001f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff fb3f 	bl	8001584 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7ff fb3b 	bl	8001584 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e06d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4921      	ldr	r1, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a19      	ldr	r1, [r3, #32]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	430b      	orrs	r3, r1
 8001f56:	491b      	ldr	r1, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fb0f 	bl	8001584 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff fb0b 	bl	8001584 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e03d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x46a>
 8001f88:	e035      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff faf8 	bl	8001584 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff faf4 	bl	8001584 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e026      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x498>
 8001fb6:	e01e      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e019      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x500>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d0      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4965      	ldr	r1, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e073      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7ff fa46 	bl	8001584 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff fa42 	bl	8001584 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e053      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1cc>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f9a4 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	0800388c 	.word	0x0800388c
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x30>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x36>
 8002206:	e027      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	e027      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d010      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0c5b      	lsrs	r3, r3, #17
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800223a:	fb03 f202 	mul.w	r2, r3, r2
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e004      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_RCC_GetSysClockFreq+0xa4>)
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	613b      	str	r3, [r7, #16]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800225a:	613b      	str	r3, [r7, #16]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	693b      	ldr	r3, [r7, #16]
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	007a1200 	.word	0x007a1200
 8002274:	0800389c 	.word	0x0800389c
 8002278:	080038ac 	.word	0x080038ac
 800227c:	003d0900 	.word	0x003d0900

08002280 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <RCC_Delay+0x34>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <RCC_Delay+0x38>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0a5b      	lsrs	r3, r3, #9
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800229c:	bf00      	nop
  }
  while (Delay --);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	60fa      	str	r2, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f9      	bne.n	800229c <RCC_Delay+0x1c>
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	20000000 	.word	0x20000000
 80022b8:	10624dd3 	.word	0x10624dd3

080022bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e041      	b.n	8002352 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff f820 	bl	8001328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f000 faac 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e041      	b.n	80023f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f839 	bl	80023f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f000 fa5d 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
	...

0800240c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_TIM_PWM_Start+0x24>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e022      	b.n	8002476 <HAL_TIM_PWM_Start+0x6a>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d109      	bne.n	800244a <HAL_TIM_PWM_Start+0x3e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	e015      	b.n	8002476 <HAL_TIM_PWM_Start+0x6a>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d109      	bne.n	8002464 <HAL_TIM_PWM_Start+0x58>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e008      	b.n	8002476 <HAL_TIM_PWM_Start+0x6a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e059      	b.n	8002532 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d104      	bne.n	800248e <HAL_TIM_PWM_Start+0x82>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800248c:	e013      	b.n	80024b6 <HAL_TIM_PWM_Start+0xaa>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d104      	bne.n	800249e <HAL_TIM_PWM_Start+0x92>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800249c:	e00b      	b.n	80024b6 <HAL_TIM_PWM_Start+0xaa>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d104      	bne.n	80024ae <HAL_TIM_PWM_Start+0xa2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ac:	e003      	b.n	80024b6 <HAL_TIM_PWM_Start+0xaa>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2201      	movs	r2, #1
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fc40 	bl	8002d44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_TIM_PWM_Start+0x130>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d107      	bne.n	80024de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a16      	ldr	r2, [pc, #88]	; (800253c <HAL_TIM_PWM_Start+0x130>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_TIM_PWM_Start+0xf0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d004      	beq.n	80024fc <HAL_TIM_PWM_Start+0xf0>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <HAL_TIM_PWM_Start+0x134>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d111      	bne.n	8002520 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b06      	cmp	r3, #6
 800250c:	d010      	beq.n	8002530 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251e:	e007      	b.n	8002530 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40000400 	.word	0x40000400

08002544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800255e:	2302      	movs	r3, #2
 8002560:	e0ae      	b.n	80026c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	f200 809f 	bhi.w	80026b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	080025ad 	.word	0x080025ad
 800257c:	080026b1 	.word	0x080026b1
 8002580:	080026b1 	.word	0x080026b1
 8002584:	080026b1 	.word	0x080026b1
 8002588:	080025ed 	.word	0x080025ed
 800258c:	080026b1 	.word	0x080026b1
 8002590:	080026b1 	.word	0x080026b1
 8002594:	080026b1 	.word	0x080026b1
 8002598:	0800262f 	.word	0x0800262f
 800259c:	080026b1 	.word	0x080026b1
 80025a0:	080026b1 	.word	0x080026b1
 80025a4:	080026b1 	.word	0x080026b1
 80025a8:	0800266f 	.word	0x0800266f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f9a8 	bl	8002908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0208 	orr.w	r2, r2, #8
 80025c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0204 	bic.w	r2, r2, #4
 80025d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6999      	ldr	r1, [r3, #24]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	619a      	str	r2, [r3, #24]
      break;
 80025ea:	e064      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f9ee 	bl	80029d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6999      	ldr	r1, [r3, #24]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	021a      	lsls	r2, r3, #8
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	619a      	str	r2, [r3, #24]
      break;
 800262c:	e043      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fa37 	bl	8002aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0208 	orr.w	r2, r2, #8
 8002648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0204 	bic.w	r2, r2, #4
 8002658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69d9      	ldr	r1, [r3, #28]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	61da      	str	r2, [r3, #28]
      break;
 800266c:	e023      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fa81 	bl	8002b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69d9      	ldr	r1, [r3, #28]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	021a      	lsls	r2, r3, #8
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	61da      	str	r2, [r3, #28]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	75fb      	strb	r3, [r7, #23]
      break;
 80026b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026be:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_TIM_ConfigClockSource+0x1c>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0b4      	b.n	800284e <HAL_TIM_ConfigClockSource+0x186>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271c:	d03e      	beq.n	800279c <HAL_TIM_ConfigClockSource+0xd4>
 800271e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002722:	f200 8087 	bhi.w	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272a:	f000 8086 	beq.w	800283a <HAL_TIM_ConfigClockSource+0x172>
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002732:	d87f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b70      	cmp	r3, #112	; 0x70
 8002736:	d01a      	beq.n	800276e <HAL_TIM_ConfigClockSource+0xa6>
 8002738:	2b70      	cmp	r3, #112	; 0x70
 800273a:	d87b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b60      	cmp	r3, #96	; 0x60
 800273e:	d050      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002740:	2b60      	cmp	r3, #96	; 0x60
 8002742:	d877      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b50      	cmp	r3, #80	; 0x50
 8002746:	d03c      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002748:	2b50      	cmp	r3, #80	; 0x50
 800274a:	d873      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d058      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x13a>
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d86f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b30      	cmp	r3, #48	; 0x30
 8002756:	d064      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x15a>
 8002758:	2b30      	cmp	r3, #48	; 0x30
 800275a:	d86b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d060      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x15a>
 8002760:	2b20      	cmp	r3, #32
 8002762:	d867      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05c      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x15a>
 8002768:	2b10      	cmp	r3, #16
 800276a:	d05a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	e062      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800277e:	f000 fac2 	bl	8002d06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	609a      	str	r2, [r3, #8]
      break;
 800279a:	e04f      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027ac:	f000 faab 	bl	8002d06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027be:	609a      	str	r2, [r3, #8]
      break;
 80027c0:	e03c      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 fa22 	bl	8002c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2150      	movs	r1, #80	; 0x50
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fa79 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e02c      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 fa40 	bl	8002c74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2160      	movs	r1, #96	; 0x60
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fa69 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002800:	e01c      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	461a      	mov	r2, r3
 8002810:	f000 fa02 	bl	8002c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2140      	movs	r1, #64	; 0x40
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fa59 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002820:	e00c      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 fa50 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002832:	e003      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      break;
 8002838:	e000      	b.n	800283c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800283a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a25      	ldr	r2, [pc, #148]	; (8002900 <TIM_Base_SetConfig+0xa8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d007      	beq.n	8002880 <TIM_Base_SetConfig+0x28>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002876:	d003      	beq.n	8002880 <TIM_Base_SetConfig+0x28>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a22      	ldr	r2, [pc, #136]	; (8002904 <TIM_Base_SetConfig+0xac>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d108      	bne.n	8002892 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <TIM_Base_SetConfig+0xa8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <TIM_Base_SetConfig+0x52>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d003      	beq.n	80028aa <TIM_Base_SetConfig+0x52>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a17      	ldr	r2, [pc, #92]	; (8002904 <TIM_Base_SetConfig+0xac>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d108      	bne.n	80028bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a07      	ldr	r2, [pc, #28]	; (8002900 <TIM_Base_SetConfig+0xa8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d103      	bne.n	80028f0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	615a      	str	r2, [r3, #20]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40000400 	.word	0x40000400

08002908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f023 0201 	bic.w	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f023 0302 	bic.w	r3, r3, #2
 8002950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <TIM_OC1_SetConfig+0xc8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10c      	bne.n	800297e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f023 0308 	bic.w	r3, r3, #8
 800296a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <TIM_OC1_SetConfig+0xc8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d111      	bne.n	80029aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800298c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	621a      	str	r2, [r3, #32]
}
 80029c4:	bf00      	nop
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00

080029d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f023 0210 	bic.w	r2, r3, #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 0320 	bic.w	r3, r3, #32
 8002a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <TIM_OC2_SetConfig+0xd0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10d      	bne.n	8002a50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <TIM_OC2_SetConfig+0xd0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d113      	bne.n	8002a80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00

08002aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <TIM_OC3_SetConfig+0xd0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10d      	bne.n	8002b22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <TIM_OC3_SetConfig+0xd0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d113      	bne.n	8002b52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	621a      	str	r2, [r3, #32]
}
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40012c00 	.word	0x40012c00

08002b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	031b      	lsls	r3, r3, #12
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <TIM_OC4_SetConfig+0x98>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d109      	bne.n	8002bf0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	019b      	lsls	r3, r3, #6
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	621a      	str	r2, [r3, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40012c00 	.word	0x40012c00

08002c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f023 0201 	bic.w	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 030a 	bic.w	r3, r3, #10
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 0210 	bic.w	r2, r3, #16
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	031b      	lsls	r3, r3, #12
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	621a      	str	r2, [r3, #32]
}
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f043 0307 	orr.w	r3, r3, #7
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	609a      	str	r2, [r3, #8]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2201      	movs	r2, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1a      	ldr	r2, [r3, #32]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e041      	b.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d004      	beq.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d10c      	bne.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40000400 	.word	0x40000400

08002e3c <siprintf>:
 8002e3c:	b40e      	push	{r1, r2, r3}
 8002e3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e42:	b500      	push	{lr}
 8002e44:	b09c      	sub	sp, #112	; 0x70
 8002e46:	ab1d      	add	r3, sp, #116	; 0x74
 8002e48:	9002      	str	r0, [sp, #8]
 8002e4a:	9006      	str	r0, [sp, #24]
 8002e4c:	9107      	str	r1, [sp, #28]
 8002e4e:	9104      	str	r1, [sp, #16]
 8002e50:	4808      	ldr	r0, [pc, #32]	; (8002e74 <siprintf+0x38>)
 8002e52:	4909      	ldr	r1, [pc, #36]	; (8002e78 <siprintf+0x3c>)
 8002e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e58:	9105      	str	r1, [sp, #20]
 8002e5a:	6800      	ldr	r0, [r0, #0]
 8002e5c:	a902      	add	r1, sp, #8
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	f000 f98e 	bl	8003180 <_svfiprintf_r>
 8002e64:	2200      	movs	r2, #0
 8002e66:	9b02      	ldr	r3, [sp, #8]
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	b01c      	add	sp, #112	; 0x70
 8002e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e70:	b003      	add	sp, #12
 8002e72:	4770      	bx	lr
 8002e74:	20000058 	.word	0x20000058
 8002e78:	ffff0208 	.word	0xffff0208

08002e7c <memset>:
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4402      	add	r2, r0
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d100      	bne.n	8002e86 <memset+0xa>
 8002e84:	4770      	bx	lr
 8002e86:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8a:	e7f9      	b.n	8002e80 <memset+0x4>

08002e8c <__errno>:
 8002e8c:	4b01      	ldr	r3, [pc, #4]	; (8002e94 <__errno+0x8>)
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000058 	.word	0x20000058

08002e98 <__libc_init_array>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	4d0c      	ldr	r5, [pc, #48]	; (8002ed0 <__libc_init_array+0x38>)
 8002e9e:	4c0d      	ldr	r4, [pc, #52]	; (8002ed4 <__libc_init_array+0x3c>)
 8002ea0:	1b64      	subs	r4, r4, r5
 8002ea2:	10a4      	asrs	r4, r4, #2
 8002ea4:	42a6      	cmp	r6, r4
 8002ea6:	d109      	bne.n	8002ebc <__libc_init_array+0x24>
 8002ea8:	f000 fc7a 	bl	80037a0 <_init>
 8002eac:	2600      	movs	r6, #0
 8002eae:	4d0a      	ldr	r5, [pc, #40]	; (8002ed8 <__libc_init_array+0x40>)
 8002eb0:	4c0a      	ldr	r4, [pc, #40]	; (8002edc <__libc_init_array+0x44>)
 8002eb2:	1b64      	subs	r4, r4, r5
 8002eb4:	10a4      	asrs	r4, r4, #2
 8002eb6:	42a6      	cmp	r6, r4
 8002eb8:	d105      	bne.n	8002ec6 <__libc_init_array+0x2e>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec0:	4798      	blx	r3
 8002ec2:	3601      	adds	r6, #1
 8002ec4:	e7ee      	b.n	8002ea4 <__libc_init_array+0xc>
 8002ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eca:	4798      	blx	r3
 8002ecc:	3601      	adds	r6, #1
 8002ece:	e7f2      	b.n	8002eb6 <__libc_init_array+0x1e>
 8002ed0:	080038e4 	.word	0x080038e4
 8002ed4:	080038e4 	.word	0x080038e4
 8002ed8:	080038e4 	.word	0x080038e4
 8002edc:	080038e8 	.word	0x080038e8

08002ee0 <__retarget_lock_acquire_recursive>:
 8002ee0:	4770      	bx	lr

08002ee2 <__retarget_lock_release_recursive>:
 8002ee2:	4770      	bx	lr

08002ee4 <_free_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	2900      	cmp	r1, #0
 8002eea:	d040      	beq.n	8002f6e <_free_r+0x8a>
 8002eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef0:	1f0c      	subs	r4, r1, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bfb8      	it	lt
 8002ef6:	18e4      	addlt	r4, r4, r3
 8002ef8:	f000 f8dc 	bl	80030b4 <__malloc_lock>
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <_free_r+0x8c>)
 8002efe:	6813      	ldr	r3, [r2, #0]
 8002f00:	b933      	cbnz	r3, 8002f10 <_free_r+0x2c>
 8002f02:	6063      	str	r3, [r4, #4]
 8002f04:	6014      	str	r4, [r2, #0]
 8002f06:	4628      	mov	r0, r5
 8002f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f0c:	f000 b8d8 	b.w	80030c0 <__malloc_unlock>
 8002f10:	42a3      	cmp	r3, r4
 8002f12:	d908      	bls.n	8002f26 <_free_r+0x42>
 8002f14:	6820      	ldr	r0, [r4, #0]
 8002f16:	1821      	adds	r1, r4, r0
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	bf01      	itttt	eq
 8002f1c:	6819      	ldreq	r1, [r3, #0]
 8002f1e:	685b      	ldreq	r3, [r3, #4]
 8002f20:	1809      	addeq	r1, r1, r0
 8002f22:	6021      	streq	r1, [r4, #0]
 8002f24:	e7ed      	b.n	8002f02 <_free_r+0x1e>
 8002f26:	461a      	mov	r2, r3
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	b10b      	cbz	r3, 8002f30 <_free_r+0x4c>
 8002f2c:	42a3      	cmp	r3, r4
 8002f2e:	d9fa      	bls.n	8002f26 <_free_r+0x42>
 8002f30:	6811      	ldr	r1, [r2, #0]
 8002f32:	1850      	adds	r0, r2, r1
 8002f34:	42a0      	cmp	r0, r4
 8002f36:	d10b      	bne.n	8002f50 <_free_r+0x6c>
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	4401      	add	r1, r0
 8002f3c:	1850      	adds	r0, r2, r1
 8002f3e:	4283      	cmp	r3, r0
 8002f40:	6011      	str	r1, [r2, #0]
 8002f42:	d1e0      	bne.n	8002f06 <_free_r+0x22>
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4408      	add	r0, r1
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	6053      	str	r3, [r2, #4]
 8002f4e:	e7da      	b.n	8002f06 <_free_r+0x22>
 8002f50:	d902      	bls.n	8002f58 <_free_r+0x74>
 8002f52:	230c      	movs	r3, #12
 8002f54:	602b      	str	r3, [r5, #0]
 8002f56:	e7d6      	b.n	8002f06 <_free_r+0x22>
 8002f58:	6820      	ldr	r0, [r4, #0]
 8002f5a:	1821      	adds	r1, r4, r0
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	bf01      	itttt	eq
 8002f60:	6819      	ldreq	r1, [r3, #0]
 8002f62:	685b      	ldreq	r3, [r3, #4]
 8002f64:	1809      	addeq	r1, r1, r0
 8002f66:	6021      	streq	r1, [r4, #0]
 8002f68:	6063      	str	r3, [r4, #4]
 8002f6a:	6054      	str	r4, [r2, #4]
 8002f6c:	e7cb      	b.n	8002f06 <_free_r+0x22>
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	20000248 	.word	0x20000248

08002f74 <sbrk_aligned>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	4e0e      	ldr	r6, [pc, #56]	; (8002fb0 <sbrk_aligned+0x3c>)
 8002f78:	460c      	mov	r4, r1
 8002f7a:	6831      	ldr	r1, [r6, #0]
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	b911      	cbnz	r1, 8002f86 <sbrk_aligned+0x12>
 8002f80:	f000 fbaa 	bl	80036d8 <_sbrk_r>
 8002f84:	6030      	str	r0, [r6, #0]
 8002f86:	4621      	mov	r1, r4
 8002f88:	4628      	mov	r0, r5
 8002f8a:	f000 fba5 	bl	80036d8 <_sbrk_r>
 8002f8e:	1c43      	adds	r3, r0, #1
 8002f90:	d00a      	beq.n	8002fa8 <sbrk_aligned+0x34>
 8002f92:	1cc4      	adds	r4, r0, #3
 8002f94:	f024 0403 	bic.w	r4, r4, #3
 8002f98:	42a0      	cmp	r0, r4
 8002f9a:	d007      	beq.n	8002fac <sbrk_aligned+0x38>
 8002f9c:	1a21      	subs	r1, r4, r0
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	f000 fb9a 	bl	80036d8 <_sbrk_r>
 8002fa4:	3001      	adds	r0, #1
 8002fa6:	d101      	bne.n	8002fac <sbrk_aligned+0x38>
 8002fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8002fac:	4620      	mov	r0, r4
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
 8002fb0:	2000024c 	.word	0x2000024c

08002fb4 <_malloc_r>:
 8002fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fb8:	1ccd      	adds	r5, r1, #3
 8002fba:	f025 0503 	bic.w	r5, r5, #3
 8002fbe:	3508      	adds	r5, #8
 8002fc0:	2d0c      	cmp	r5, #12
 8002fc2:	bf38      	it	cc
 8002fc4:	250c      	movcc	r5, #12
 8002fc6:	2d00      	cmp	r5, #0
 8002fc8:	4607      	mov	r7, r0
 8002fca:	db01      	blt.n	8002fd0 <_malloc_r+0x1c>
 8002fcc:	42a9      	cmp	r1, r5
 8002fce:	d905      	bls.n	8002fdc <_malloc_r+0x28>
 8002fd0:	230c      	movs	r3, #12
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030b0 <_malloc_r+0xfc>
 8002fe0:	f000 f868 	bl	80030b4 <__malloc_lock>
 8002fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fe8:	461c      	mov	r4, r3
 8002fea:	bb5c      	cbnz	r4, 8003044 <_malloc_r+0x90>
 8002fec:	4629      	mov	r1, r5
 8002fee:	4638      	mov	r0, r7
 8002ff0:	f7ff ffc0 	bl	8002f74 <sbrk_aligned>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	d155      	bne.n	80030a6 <_malloc_r+0xf2>
 8002ffa:	f8d8 4000 	ldr.w	r4, [r8]
 8002ffe:	4626      	mov	r6, r4
 8003000:	2e00      	cmp	r6, #0
 8003002:	d145      	bne.n	8003090 <_malloc_r+0xdc>
 8003004:	2c00      	cmp	r4, #0
 8003006:	d048      	beq.n	800309a <_malloc_r+0xe6>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	4631      	mov	r1, r6
 800300c:	4638      	mov	r0, r7
 800300e:	eb04 0903 	add.w	r9, r4, r3
 8003012:	f000 fb61 	bl	80036d8 <_sbrk_r>
 8003016:	4581      	cmp	r9, r0
 8003018:	d13f      	bne.n	800309a <_malloc_r+0xe6>
 800301a:	6821      	ldr	r1, [r4, #0]
 800301c:	4638      	mov	r0, r7
 800301e:	1a6d      	subs	r5, r5, r1
 8003020:	4629      	mov	r1, r5
 8003022:	f7ff ffa7 	bl	8002f74 <sbrk_aligned>
 8003026:	3001      	adds	r0, #1
 8003028:	d037      	beq.n	800309a <_malloc_r+0xe6>
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	442b      	add	r3, r5
 800302e:	6023      	str	r3, [r4, #0]
 8003030:	f8d8 3000 	ldr.w	r3, [r8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d038      	beq.n	80030aa <_malloc_r+0xf6>
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	42a2      	cmp	r2, r4
 800303c:	d12b      	bne.n	8003096 <_malloc_r+0xe2>
 800303e:	2200      	movs	r2, #0
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	e00f      	b.n	8003064 <_malloc_r+0xb0>
 8003044:	6822      	ldr	r2, [r4, #0]
 8003046:	1b52      	subs	r2, r2, r5
 8003048:	d41f      	bmi.n	800308a <_malloc_r+0xd6>
 800304a:	2a0b      	cmp	r2, #11
 800304c:	d917      	bls.n	800307e <_malloc_r+0xca>
 800304e:	1961      	adds	r1, r4, r5
 8003050:	42a3      	cmp	r3, r4
 8003052:	6025      	str	r5, [r4, #0]
 8003054:	bf18      	it	ne
 8003056:	6059      	strne	r1, [r3, #4]
 8003058:	6863      	ldr	r3, [r4, #4]
 800305a:	bf08      	it	eq
 800305c:	f8c8 1000 	streq.w	r1, [r8]
 8003060:	5162      	str	r2, [r4, r5]
 8003062:	604b      	str	r3, [r1, #4]
 8003064:	4638      	mov	r0, r7
 8003066:	f104 060b 	add.w	r6, r4, #11
 800306a:	f000 f829 	bl	80030c0 <__malloc_unlock>
 800306e:	f026 0607 	bic.w	r6, r6, #7
 8003072:	1d23      	adds	r3, r4, #4
 8003074:	1af2      	subs	r2, r6, r3
 8003076:	d0ae      	beq.n	8002fd6 <_malloc_r+0x22>
 8003078:	1b9b      	subs	r3, r3, r6
 800307a:	50a3      	str	r3, [r4, r2]
 800307c:	e7ab      	b.n	8002fd6 <_malloc_r+0x22>
 800307e:	42a3      	cmp	r3, r4
 8003080:	6862      	ldr	r2, [r4, #4]
 8003082:	d1dd      	bne.n	8003040 <_malloc_r+0x8c>
 8003084:	f8c8 2000 	str.w	r2, [r8]
 8003088:	e7ec      	b.n	8003064 <_malloc_r+0xb0>
 800308a:	4623      	mov	r3, r4
 800308c:	6864      	ldr	r4, [r4, #4]
 800308e:	e7ac      	b.n	8002fea <_malloc_r+0x36>
 8003090:	4634      	mov	r4, r6
 8003092:	6876      	ldr	r6, [r6, #4]
 8003094:	e7b4      	b.n	8003000 <_malloc_r+0x4c>
 8003096:	4613      	mov	r3, r2
 8003098:	e7cc      	b.n	8003034 <_malloc_r+0x80>
 800309a:	230c      	movs	r3, #12
 800309c:	4638      	mov	r0, r7
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	f000 f80e 	bl	80030c0 <__malloc_unlock>
 80030a4:	e797      	b.n	8002fd6 <_malloc_r+0x22>
 80030a6:	6025      	str	r5, [r4, #0]
 80030a8:	e7dc      	b.n	8003064 <_malloc_r+0xb0>
 80030aa:	605b      	str	r3, [r3, #4]
 80030ac:	deff      	udf	#255	; 0xff
 80030ae:	bf00      	nop
 80030b0:	20000248 	.word	0x20000248

080030b4 <__malloc_lock>:
 80030b4:	4801      	ldr	r0, [pc, #4]	; (80030bc <__malloc_lock+0x8>)
 80030b6:	f7ff bf13 	b.w	8002ee0 <__retarget_lock_acquire_recursive>
 80030ba:	bf00      	nop
 80030bc:	20000244 	.word	0x20000244

080030c0 <__malloc_unlock>:
 80030c0:	4801      	ldr	r0, [pc, #4]	; (80030c8 <__malloc_unlock+0x8>)
 80030c2:	f7ff bf0e 	b.w	8002ee2 <__retarget_lock_release_recursive>
 80030c6:	bf00      	nop
 80030c8:	20000244 	.word	0x20000244

080030cc <__ssputs_r>:
 80030cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d0:	461f      	mov	r7, r3
 80030d2:	688e      	ldr	r6, [r1, #8]
 80030d4:	4682      	mov	sl, r0
 80030d6:	42be      	cmp	r6, r7
 80030d8:	460c      	mov	r4, r1
 80030da:	4690      	mov	r8, r2
 80030dc:	680b      	ldr	r3, [r1, #0]
 80030de:	d82c      	bhi.n	800313a <__ssputs_r+0x6e>
 80030e0:	898a      	ldrh	r2, [r1, #12]
 80030e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030e6:	d026      	beq.n	8003136 <__ssputs_r+0x6a>
 80030e8:	6965      	ldr	r5, [r4, #20]
 80030ea:	6909      	ldr	r1, [r1, #16]
 80030ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030f0:	eba3 0901 	sub.w	r9, r3, r1
 80030f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030f8:	1c7b      	adds	r3, r7, #1
 80030fa:	444b      	add	r3, r9
 80030fc:	106d      	asrs	r5, r5, #1
 80030fe:	429d      	cmp	r5, r3
 8003100:	bf38      	it	cc
 8003102:	461d      	movcc	r5, r3
 8003104:	0553      	lsls	r3, r2, #21
 8003106:	d527      	bpl.n	8003158 <__ssputs_r+0x8c>
 8003108:	4629      	mov	r1, r5
 800310a:	f7ff ff53 	bl	8002fb4 <_malloc_r>
 800310e:	4606      	mov	r6, r0
 8003110:	b360      	cbz	r0, 800316c <__ssputs_r+0xa0>
 8003112:	464a      	mov	r2, r9
 8003114:	6921      	ldr	r1, [r4, #16]
 8003116:	f000 fafd 	bl	8003714 <memcpy>
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003124:	81a3      	strh	r3, [r4, #12]
 8003126:	6126      	str	r6, [r4, #16]
 8003128:	444e      	add	r6, r9
 800312a:	6026      	str	r6, [r4, #0]
 800312c:	463e      	mov	r6, r7
 800312e:	6165      	str	r5, [r4, #20]
 8003130:	eba5 0509 	sub.w	r5, r5, r9
 8003134:	60a5      	str	r5, [r4, #8]
 8003136:	42be      	cmp	r6, r7
 8003138:	d900      	bls.n	800313c <__ssputs_r+0x70>
 800313a:	463e      	mov	r6, r7
 800313c:	4632      	mov	r2, r6
 800313e:	4641      	mov	r1, r8
 8003140:	6820      	ldr	r0, [r4, #0]
 8003142:	f000 faaf 	bl	80036a4 <memmove>
 8003146:	2000      	movs	r0, #0
 8003148:	68a3      	ldr	r3, [r4, #8]
 800314a:	1b9b      	subs	r3, r3, r6
 800314c:	60a3      	str	r3, [r4, #8]
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	4433      	add	r3, r6
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003158:	462a      	mov	r2, r5
 800315a:	f000 fae9 	bl	8003730 <_realloc_r>
 800315e:	4606      	mov	r6, r0
 8003160:	2800      	cmp	r0, #0
 8003162:	d1e0      	bne.n	8003126 <__ssputs_r+0x5a>
 8003164:	4650      	mov	r0, sl
 8003166:	6921      	ldr	r1, [r4, #16]
 8003168:	f7ff febc 	bl	8002ee4 <_free_r>
 800316c:	230c      	movs	r3, #12
 800316e:	f8ca 3000 	str.w	r3, [sl]
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	f04f 30ff 	mov.w	r0, #4294967295
 8003178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317c:	81a3      	strh	r3, [r4, #12]
 800317e:	e7e9      	b.n	8003154 <__ssputs_r+0x88>

08003180 <_svfiprintf_r>:
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	4698      	mov	r8, r3
 8003186:	898b      	ldrh	r3, [r1, #12]
 8003188:	4607      	mov	r7, r0
 800318a:	061b      	lsls	r3, r3, #24
 800318c:	460d      	mov	r5, r1
 800318e:	4614      	mov	r4, r2
 8003190:	b09d      	sub	sp, #116	; 0x74
 8003192:	d50e      	bpl.n	80031b2 <_svfiprintf_r+0x32>
 8003194:	690b      	ldr	r3, [r1, #16]
 8003196:	b963      	cbnz	r3, 80031b2 <_svfiprintf_r+0x32>
 8003198:	2140      	movs	r1, #64	; 0x40
 800319a:	f7ff ff0b 	bl	8002fb4 <_malloc_r>
 800319e:	6028      	str	r0, [r5, #0]
 80031a0:	6128      	str	r0, [r5, #16]
 80031a2:	b920      	cbnz	r0, 80031ae <_svfiprintf_r+0x2e>
 80031a4:	230c      	movs	r3, #12
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	e0d0      	b.n	8003350 <_svfiprintf_r+0x1d0>
 80031ae:	2340      	movs	r3, #64	; 0x40
 80031b0:	616b      	str	r3, [r5, #20]
 80031b2:	2300      	movs	r3, #0
 80031b4:	9309      	str	r3, [sp, #36]	; 0x24
 80031b6:	2320      	movs	r3, #32
 80031b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031bc:	2330      	movs	r3, #48	; 0x30
 80031be:	f04f 0901 	mov.w	r9, #1
 80031c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80031c6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003368 <_svfiprintf_r+0x1e8>
 80031ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031ce:	4623      	mov	r3, r4
 80031d0:	469a      	mov	sl, r3
 80031d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031d6:	b10a      	cbz	r2, 80031dc <_svfiprintf_r+0x5c>
 80031d8:	2a25      	cmp	r2, #37	; 0x25
 80031da:	d1f9      	bne.n	80031d0 <_svfiprintf_r+0x50>
 80031dc:	ebba 0b04 	subs.w	fp, sl, r4
 80031e0:	d00b      	beq.n	80031fa <_svfiprintf_r+0x7a>
 80031e2:	465b      	mov	r3, fp
 80031e4:	4622      	mov	r2, r4
 80031e6:	4629      	mov	r1, r5
 80031e8:	4638      	mov	r0, r7
 80031ea:	f7ff ff6f 	bl	80030cc <__ssputs_r>
 80031ee:	3001      	adds	r0, #1
 80031f0:	f000 80a9 	beq.w	8003346 <_svfiprintf_r+0x1c6>
 80031f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031f6:	445a      	add	r2, fp
 80031f8:	9209      	str	r2, [sp, #36]	; 0x24
 80031fa:	f89a 3000 	ldrb.w	r3, [sl]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80a1 	beq.w	8003346 <_svfiprintf_r+0x1c6>
 8003204:	2300      	movs	r3, #0
 8003206:	f04f 32ff 	mov.w	r2, #4294967295
 800320a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800320e:	f10a 0a01 	add.w	sl, sl, #1
 8003212:	9304      	str	r3, [sp, #16]
 8003214:	9307      	str	r3, [sp, #28]
 8003216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800321a:	931a      	str	r3, [sp, #104]	; 0x68
 800321c:	4654      	mov	r4, sl
 800321e:	2205      	movs	r2, #5
 8003220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003224:	4850      	ldr	r0, [pc, #320]	; (8003368 <_svfiprintf_r+0x1e8>)
 8003226:	f000 fa67 	bl	80036f8 <memchr>
 800322a:	9a04      	ldr	r2, [sp, #16]
 800322c:	b9d8      	cbnz	r0, 8003266 <_svfiprintf_r+0xe6>
 800322e:	06d0      	lsls	r0, r2, #27
 8003230:	bf44      	itt	mi
 8003232:	2320      	movmi	r3, #32
 8003234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003238:	0711      	lsls	r1, r2, #28
 800323a:	bf44      	itt	mi
 800323c:	232b      	movmi	r3, #43	; 0x2b
 800323e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003242:	f89a 3000 	ldrb.w	r3, [sl]
 8003246:	2b2a      	cmp	r3, #42	; 0x2a
 8003248:	d015      	beq.n	8003276 <_svfiprintf_r+0xf6>
 800324a:	4654      	mov	r4, sl
 800324c:	2000      	movs	r0, #0
 800324e:	f04f 0c0a 	mov.w	ip, #10
 8003252:	9a07      	ldr	r2, [sp, #28]
 8003254:	4621      	mov	r1, r4
 8003256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800325a:	3b30      	subs	r3, #48	; 0x30
 800325c:	2b09      	cmp	r3, #9
 800325e:	d94d      	bls.n	80032fc <_svfiprintf_r+0x17c>
 8003260:	b1b0      	cbz	r0, 8003290 <_svfiprintf_r+0x110>
 8003262:	9207      	str	r2, [sp, #28]
 8003264:	e014      	b.n	8003290 <_svfiprintf_r+0x110>
 8003266:	eba0 0308 	sub.w	r3, r0, r8
 800326a:	fa09 f303 	lsl.w	r3, r9, r3
 800326e:	4313      	orrs	r3, r2
 8003270:	46a2      	mov	sl, r4
 8003272:	9304      	str	r3, [sp, #16]
 8003274:	e7d2      	b.n	800321c <_svfiprintf_r+0x9c>
 8003276:	9b03      	ldr	r3, [sp, #12]
 8003278:	1d19      	adds	r1, r3, #4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	9103      	str	r1, [sp, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	bfbb      	ittet	lt
 8003282:	425b      	neglt	r3, r3
 8003284:	f042 0202 	orrlt.w	r2, r2, #2
 8003288:	9307      	strge	r3, [sp, #28]
 800328a:	9307      	strlt	r3, [sp, #28]
 800328c:	bfb8      	it	lt
 800328e:	9204      	strlt	r2, [sp, #16]
 8003290:	7823      	ldrb	r3, [r4, #0]
 8003292:	2b2e      	cmp	r3, #46	; 0x2e
 8003294:	d10c      	bne.n	80032b0 <_svfiprintf_r+0x130>
 8003296:	7863      	ldrb	r3, [r4, #1]
 8003298:	2b2a      	cmp	r3, #42	; 0x2a
 800329a:	d134      	bne.n	8003306 <_svfiprintf_r+0x186>
 800329c:	9b03      	ldr	r3, [sp, #12]
 800329e:	3402      	adds	r4, #2
 80032a0:	1d1a      	adds	r2, r3, #4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	9203      	str	r2, [sp, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bfb8      	it	lt
 80032aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80032ae:	9305      	str	r3, [sp, #20]
 80032b0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800336c <_svfiprintf_r+0x1ec>
 80032b4:	2203      	movs	r2, #3
 80032b6:	4650      	mov	r0, sl
 80032b8:	7821      	ldrb	r1, [r4, #0]
 80032ba:	f000 fa1d 	bl	80036f8 <memchr>
 80032be:	b138      	cbz	r0, 80032d0 <_svfiprintf_r+0x150>
 80032c0:	2240      	movs	r2, #64	; 0x40
 80032c2:	9b04      	ldr	r3, [sp, #16]
 80032c4:	eba0 000a 	sub.w	r0, r0, sl
 80032c8:	4082      	lsls	r2, r0
 80032ca:	4313      	orrs	r3, r2
 80032cc:	3401      	adds	r4, #1
 80032ce:	9304      	str	r3, [sp, #16]
 80032d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d4:	2206      	movs	r2, #6
 80032d6:	4826      	ldr	r0, [pc, #152]	; (8003370 <_svfiprintf_r+0x1f0>)
 80032d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032dc:	f000 fa0c 	bl	80036f8 <memchr>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d038      	beq.n	8003356 <_svfiprintf_r+0x1d6>
 80032e4:	4b23      	ldr	r3, [pc, #140]	; (8003374 <_svfiprintf_r+0x1f4>)
 80032e6:	bb1b      	cbnz	r3, 8003330 <_svfiprintf_r+0x1b0>
 80032e8:	9b03      	ldr	r3, [sp, #12]
 80032ea:	3307      	adds	r3, #7
 80032ec:	f023 0307 	bic.w	r3, r3, #7
 80032f0:	3308      	adds	r3, #8
 80032f2:	9303      	str	r3, [sp, #12]
 80032f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032f6:	4433      	add	r3, r6
 80032f8:	9309      	str	r3, [sp, #36]	; 0x24
 80032fa:	e768      	b.n	80031ce <_svfiprintf_r+0x4e>
 80032fc:	460c      	mov	r4, r1
 80032fe:	2001      	movs	r0, #1
 8003300:	fb0c 3202 	mla	r2, ip, r2, r3
 8003304:	e7a6      	b.n	8003254 <_svfiprintf_r+0xd4>
 8003306:	2300      	movs	r3, #0
 8003308:	f04f 0c0a 	mov.w	ip, #10
 800330c:	4619      	mov	r1, r3
 800330e:	3401      	adds	r4, #1
 8003310:	9305      	str	r3, [sp, #20]
 8003312:	4620      	mov	r0, r4
 8003314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003318:	3a30      	subs	r2, #48	; 0x30
 800331a:	2a09      	cmp	r2, #9
 800331c:	d903      	bls.n	8003326 <_svfiprintf_r+0x1a6>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0c6      	beq.n	80032b0 <_svfiprintf_r+0x130>
 8003322:	9105      	str	r1, [sp, #20]
 8003324:	e7c4      	b.n	80032b0 <_svfiprintf_r+0x130>
 8003326:	4604      	mov	r4, r0
 8003328:	2301      	movs	r3, #1
 800332a:	fb0c 2101 	mla	r1, ip, r1, r2
 800332e:	e7f0      	b.n	8003312 <_svfiprintf_r+0x192>
 8003330:	ab03      	add	r3, sp, #12
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	462a      	mov	r2, r5
 8003336:	4638      	mov	r0, r7
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <_svfiprintf_r+0x1f8>)
 800333a:	a904      	add	r1, sp, #16
 800333c:	f3af 8000 	nop.w
 8003340:	1c42      	adds	r2, r0, #1
 8003342:	4606      	mov	r6, r0
 8003344:	d1d6      	bne.n	80032f4 <_svfiprintf_r+0x174>
 8003346:	89ab      	ldrh	r3, [r5, #12]
 8003348:	065b      	lsls	r3, r3, #25
 800334a:	f53f af2d 	bmi.w	80031a8 <_svfiprintf_r+0x28>
 800334e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003350:	b01d      	add	sp, #116	; 0x74
 8003352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003356:	ab03      	add	r3, sp, #12
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	462a      	mov	r2, r5
 800335c:	4638      	mov	r0, r7
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <_svfiprintf_r+0x1f8>)
 8003360:	a904      	add	r1, sp, #16
 8003362:	f000 f87d 	bl	8003460 <_printf_i>
 8003366:	e7eb      	b.n	8003340 <_svfiprintf_r+0x1c0>
 8003368:	080038ae 	.word	0x080038ae
 800336c:	080038b4 	.word	0x080038b4
 8003370:	080038b8 	.word	0x080038b8
 8003374:	00000000 	.word	0x00000000
 8003378:	080030cd 	.word	0x080030cd

0800337c <_printf_common>:
 800337c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003380:	4616      	mov	r6, r2
 8003382:	4699      	mov	r9, r3
 8003384:	688a      	ldr	r2, [r1, #8]
 8003386:	690b      	ldr	r3, [r1, #16]
 8003388:	4607      	mov	r7, r0
 800338a:	4293      	cmp	r3, r2
 800338c:	bfb8      	it	lt
 800338e:	4613      	movlt	r3, r2
 8003390:	6033      	str	r3, [r6, #0]
 8003392:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003396:	460c      	mov	r4, r1
 8003398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800339c:	b10a      	cbz	r2, 80033a2 <_printf_common+0x26>
 800339e:	3301      	adds	r3, #1
 80033a0:	6033      	str	r3, [r6, #0]
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	0699      	lsls	r1, r3, #26
 80033a6:	bf42      	ittt	mi
 80033a8:	6833      	ldrmi	r3, [r6, #0]
 80033aa:	3302      	addmi	r3, #2
 80033ac:	6033      	strmi	r3, [r6, #0]
 80033ae:	6825      	ldr	r5, [r4, #0]
 80033b0:	f015 0506 	ands.w	r5, r5, #6
 80033b4:	d106      	bne.n	80033c4 <_printf_common+0x48>
 80033b6:	f104 0a19 	add.w	sl, r4, #25
 80033ba:	68e3      	ldr	r3, [r4, #12]
 80033bc:	6832      	ldr	r2, [r6, #0]
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	42ab      	cmp	r3, r5
 80033c2:	dc2b      	bgt.n	800341c <_printf_common+0xa0>
 80033c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033c8:	1e13      	subs	r3, r2, #0
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	bf18      	it	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	0692      	lsls	r2, r2, #26
 80033d2:	d430      	bmi.n	8003436 <_printf_common+0xba>
 80033d4:	4649      	mov	r1, r9
 80033d6:	4638      	mov	r0, r7
 80033d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033dc:	47c0      	blx	r8
 80033de:	3001      	adds	r0, #1
 80033e0:	d023      	beq.n	800342a <_printf_common+0xae>
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	6922      	ldr	r2, [r4, #16]
 80033e6:	f003 0306 	and.w	r3, r3, #6
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	bf14      	ite	ne
 80033ee:	2500      	movne	r5, #0
 80033f0:	6833      	ldreq	r3, [r6, #0]
 80033f2:	f04f 0600 	mov.w	r6, #0
 80033f6:	bf08      	it	eq
 80033f8:	68e5      	ldreq	r5, [r4, #12]
 80033fa:	f104 041a 	add.w	r4, r4, #26
 80033fe:	bf08      	it	eq
 8003400:	1aed      	subeq	r5, r5, r3
 8003402:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003406:	bf08      	it	eq
 8003408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800340c:	4293      	cmp	r3, r2
 800340e:	bfc4      	itt	gt
 8003410:	1a9b      	subgt	r3, r3, r2
 8003412:	18ed      	addgt	r5, r5, r3
 8003414:	42b5      	cmp	r5, r6
 8003416:	d11a      	bne.n	800344e <_printf_common+0xd2>
 8003418:	2000      	movs	r0, #0
 800341a:	e008      	b.n	800342e <_printf_common+0xb2>
 800341c:	2301      	movs	r3, #1
 800341e:	4652      	mov	r2, sl
 8003420:	4649      	mov	r1, r9
 8003422:	4638      	mov	r0, r7
 8003424:	47c0      	blx	r8
 8003426:	3001      	adds	r0, #1
 8003428:	d103      	bne.n	8003432 <_printf_common+0xb6>
 800342a:	f04f 30ff 	mov.w	r0, #4294967295
 800342e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003432:	3501      	adds	r5, #1
 8003434:	e7c1      	b.n	80033ba <_printf_common+0x3e>
 8003436:	2030      	movs	r0, #48	; 0x30
 8003438:	18e1      	adds	r1, r4, r3
 800343a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003444:	4422      	add	r2, r4
 8003446:	3302      	adds	r3, #2
 8003448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800344c:	e7c2      	b.n	80033d4 <_printf_common+0x58>
 800344e:	2301      	movs	r3, #1
 8003450:	4622      	mov	r2, r4
 8003452:	4649      	mov	r1, r9
 8003454:	4638      	mov	r0, r7
 8003456:	47c0      	blx	r8
 8003458:	3001      	adds	r0, #1
 800345a:	d0e6      	beq.n	800342a <_printf_common+0xae>
 800345c:	3601      	adds	r6, #1
 800345e:	e7d9      	b.n	8003414 <_printf_common+0x98>

08003460 <_printf_i>:
 8003460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003464:	7e0f      	ldrb	r7, [r1, #24]
 8003466:	4691      	mov	r9, r2
 8003468:	2f78      	cmp	r7, #120	; 0x78
 800346a:	4680      	mov	r8, r0
 800346c:	460c      	mov	r4, r1
 800346e:	469a      	mov	sl, r3
 8003470:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003476:	d807      	bhi.n	8003488 <_printf_i+0x28>
 8003478:	2f62      	cmp	r7, #98	; 0x62
 800347a:	d80a      	bhi.n	8003492 <_printf_i+0x32>
 800347c:	2f00      	cmp	r7, #0
 800347e:	f000 80d5 	beq.w	800362c <_printf_i+0x1cc>
 8003482:	2f58      	cmp	r7, #88	; 0x58
 8003484:	f000 80c1 	beq.w	800360a <_printf_i+0x1aa>
 8003488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800348c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003490:	e03a      	b.n	8003508 <_printf_i+0xa8>
 8003492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003496:	2b15      	cmp	r3, #21
 8003498:	d8f6      	bhi.n	8003488 <_printf_i+0x28>
 800349a:	a101      	add	r1, pc, #4	; (adr r1, 80034a0 <_printf_i+0x40>)
 800349c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034a0:	080034f9 	.word	0x080034f9
 80034a4:	0800350d 	.word	0x0800350d
 80034a8:	08003489 	.word	0x08003489
 80034ac:	08003489 	.word	0x08003489
 80034b0:	08003489 	.word	0x08003489
 80034b4:	08003489 	.word	0x08003489
 80034b8:	0800350d 	.word	0x0800350d
 80034bc:	08003489 	.word	0x08003489
 80034c0:	08003489 	.word	0x08003489
 80034c4:	08003489 	.word	0x08003489
 80034c8:	08003489 	.word	0x08003489
 80034cc:	08003613 	.word	0x08003613
 80034d0:	08003539 	.word	0x08003539
 80034d4:	080035cd 	.word	0x080035cd
 80034d8:	08003489 	.word	0x08003489
 80034dc:	08003489 	.word	0x08003489
 80034e0:	08003635 	.word	0x08003635
 80034e4:	08003489 	.word	0x08003489
 80034e8:	08003539 	.word	0x08003539
 80034ec:	08003489 	.word	0x08003489
 80034f0:	08003489 	.word	0x08003489
 80034f4:	080035d5 	.word	0x080035d5
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	602a      	str	r2, [r5, #0]
 8003500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003508:	2301      	movs	r3, #1
 800350a:	e0a0      	b.n	800364e <_printf_i+0x1ee>
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	682b      	ldr	r3, [r5, #0]
 8003510:	0607      	lsls	r7, r0, #24
 8003512:	f103 0104 	add.w	r1, r3, #4
 8003516:	6029      	str	r1, [r5, #0]
 8003518:	d501      	bpl.n	800351e <_printf_i+0xbe>
 800351a:	681e      	ldr	r6, [r3, #0]
 800351c:	e003      	b.n	8003526 <_printf_i+0xc6>
 800351e:	0646      	lsls	r6, r0, #25
 8003520:	d5fb      	bpl.n	800351a <_printf_i+0xba>
 8003522:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003526:	2e00      	cmp	r6, #0
 8003528:	da03      	bge.n	8003532 <_printf_i+0xd2>
 800352a:	232d      	movs	r3, #45	; 0x2d
 800352c:	4276      	negs	r6, r6
 800352e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003532:	230a      	movs	r3, #10
 8003534:	4859      	ldr	r0, [pc, #356]	; (800369c <_printf_i+0x23c>)
 8003536:	e012      	b.n	800355e <_printf_i+0xfe>
 8003538:	682b      	ldr	r3, [r5, #0]
 800353a:	6820      	ldr	r0, [r4, #0]
 800353c:	1d19      	adds	r1, r3, #4
 800353e:	6029      	str	r1, [r5, #0]
 8003540:	0605      	lsls	r5, r0, #24
 8003542:	d501      	bpl.n	8003548 <_printf_i+0xe8>
 8003544:	681e      	ldr	r6, [r3, #0]
 8003546:	e002      	b.n	800354e <_printf_i+0xee>
 8003548:	0641      	lsls	r1, r0, #25
 800354a:	d5fb      	bpl.n	8003544 <_printf_i+0xe4>
 800354c:	881e      	ldrh	r6, [r3, #0]
 800354e:	2f6f      	cmp	r7, #111	; 0x6f
 8003550:	bf0c      	ite	eq
 8003552:	2308      	moveq	r3, #8
 8003554:	230a      	movne	r3, #10
 8003556:	4851      	ldr	r0, [pc, #324]	; (800369c <_printf_i+0x23c>)
 8003558:	2100      	movs	r1, #0
 800355a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800355e:	6865      	ldr	r5, [r4, #4]
 8003560:	2d00      	cmp	r5, #0
 8003562:	bfa8      	it	ge
 8003564:	6821      	ldrge	r1, [r4, #0]
 8003566:	60a5      	str	r5, [r4, #8]
 8003568:	bfa4      	itt	ge
 800356a:	f021 0104 	bicge.w	r1, r1, #4
 800356e:	6021      	strge	r1, [r4, #0]
 8003570:	b90e      	cbnz	r6, 8003576 <_printf_i+0x116>
 8003572:	2d00      	cmp	r5, #0
 8003574:	d04b      	beq.n	800360e <_printf_i+0x1ae>
 8003576:	4615      	mov	r5, r2
 8003578:	fbb6 f1f3 	udiv	r1, r6, r3
 800357c:	fb03 6711 	mls	r7, r3, r1, r6
 8003580:	5dc7      	ldrb	r7, [r0, r7]
 8003582:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003586:	4637      	mov	r7, r6
 8003588:	42bb      	cmp	r3, r7
 800358a:	460e      	mov	r6, r1
 800358c:	d9f4      	bls.n	8003578 <_printf_i+0x118>
 800358e:	2b08      	cmp	r3, #8
 8003590:	d10b      	bne.n	80035aa <_printf_i+0x14a>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	07de      	lsls	r6, r3, #31
 8003596:	d508      	bpl.n	80035aa <_printf_i+0x14a>
 8003598:	6923      	ldr	r3, [r4, #16]
 800359a:	6861      	ldr	r1, [r4, #4]
 800359c:	4299      	cmp	r1, r3
 800359e:	bfde      	ittt	le
 80035a0:	2330      	movle	r3, #48	; 0x30
 80035a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035aa:	1b52      	subs	r2, r2, r5
 80035ac:	6122      	str	r2, [r4, #16]
 80035ae:	464b      	mov	r3, r9
 80035b0:	4621      	mov	r1, r4
 80035b2:	4640      	mov	r0, r8
 80035b4:	f8cd a000 	str.w	sl, [sp]
 80035b8:	aa03      	add	r2, sp, #12
 80035ba:	f7ff fedf 	bl	800337c <_printf_common>
 80035be:	3001      	adds	r0, #1
 80035c0:	d14a      	bne.n	8003658 <_printf_i+0x1f8>
 80035c2:	f04f 30ff 	mov.w	r0, #4294967295
 80035c6:	b004      	add	sp, #16
 80035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	f043 0320 	orr.w	r3, r3, #32
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	2778      	movs	r7, #120	; 0x78
 80035d6:	4832      	ldr	r0, [pc, #200]	; (80036a0 <_printf_i+0x240>)
 80035d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	6829      	ldr	r1, [r5, #0]
 80035e0:	061f      	lsls	r7, r3, #24
 80035e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80035e6:	d402      	bmi.n	80035ee <_printf_i+0x18e>
 80035e8:	065f      	lsls	r7, r3, #25
 80035ea:	bf48      	it	mi
 80035ec:	b2b6      	uxthmi	r6, r6
 80035ee:	07df      	lsls	r7, r3, #31
 80035f0:	bf48      	it	mi
 80035f2:	f043 0320 	orrmi.w	r3, r3, #32
 80035f6:	6029      	str	r1, [r5, #0]
 80035f8:	bf48      	it	mi
 80035fa:	6023      	strmi	r3, [r4, #0]
 80035fc:	b91e      	cbnz	r6, 8003606 <_printf_i+0x1a6>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	f023 0320 	bic.w	r3, r3, #32
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	2310      	movs	r3, #16
 8003608:	e7a6      	b.n	8003558 <_printf_i+0xf8>
 800360a:	4824      	ldr	r0, [pc, #144]	; (800369c <_printf_i+0x23c>)
 800360c:	e7e4      	b.n	80035d8 <_printf_i+0x178>
 800360e:	4615      	mov	r5, r2
 8003610:	e7bd      	b.n	800358e <_printf_i+0x12e>
 8003612:	682b      	ldr	r3, [r5, #0]
 8003614:	6826      	ldr	r6, [r4, #0]
 8003616:	1d18      	adds	r0, r3, #4
 8003618:	6961      	ldr	r1, [r4, #20]
 800361a:	6028      	str	r0, [r5, #0]
 800361c:	0635      	lsls	r5, r6, #24
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	d501      	bpl.n	8003626 <_printf_i+0x1c6>
 8003622:	6019      	str	r1, [r3, #0]
 8003624:	e002      	b.n	800362c <_printf_i+0x1cc>
 8003626:	0670      	lsls	r0, r6, #25
 8003628:	d5fb      	bpl.n	8003622 <_printf_i+0x1c2>
 800362a:	8019      	strh	r1, [r3, #0]
 800362c:	2300      	movs	r3, #0
 800362e:	4615      	mov	r5, r2
 8003630:	6123      	str	r3, [r4, #16]
 8003632:	e7bc      	b.n	80035ae <_printf_i+0x14e>
 8003634:	682b      	ldr	r3, [r5, #0]
 8003636:	2100      	movs	r1, #0
 8003638:	1d1a      	adds	r2, r3, #4
 800363a:	602a      	str	r2, [r5, #0]
 800363c:	681d      	ldr	r5, [r3, #0]
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	4628      	mov	r0, r5
 8003642:	f000 f859 	bl	80036f8 <memchr>
 8003646:	b108      	cbz	r0, 800364c <_printf_i+0x1ec>
 8003648:	1b40      	subs	r0, r0, r5
 800364a:	6060      	str	r0, [r4, #4]
 800364c:	6863      	ldr	r3, [r4, #4]
 800364e:	6123      	str	r3, [r4, #16]
 8003650:	2300      	movs	r3, #0
 8003652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003656:	e7aa      	b.n	80035ae <_printf_i+0x14e>
 8003658:	462a      	mov	r2, r5
 800365a:	4649      	mov	r1, r9
 800365c:	4640      	mov	r0, r8
 800365e:	6923      	ldr	r3, [r4, #16]
 8003660:	47d0      	blx	sl
 8003662:	3001      	adds	r0, #1
 8003664:	d0ad      	beq.n	80035c2 <_printf_i+0x162>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	079b      	lsls	r3, r3, #30
 800366a:	d413      	bmi.n	8003694 <_printf_i+0x234>
 800366c:	68e0      	ldr	r0, [r4, #12]
 800366e:	9b03      	ldr	r3, [sp, #12]
 8003670:	4298      	cmp	r0, r3
 8003672:	bfb8      	it	lt
 8003674:	4618      	movlt	r0, r3
 8003676:	e7a6      	b.n	80035c6 <_printf_i+0x166>
 8003678:	2301      	movs	r3, #1
 800367a:	4632      	mov	r2, r6
 800367c:	4649      	mov	r1, r9
 800367e:	4640      	mov	r0, r8
 8003680:	47d0      	blx	sl
 8003682:	3001      	adds	r0, #1
 8003684:	d09d      	beq.n	80035c2 <_printf_i+0x162>
 8003686:	3501      	adds	r5, #1
 8003688:	68e3      	ldr	r3, [r4, #12]
 800368a:	9903      	ldr	r1, [sp, #12]
 800368c:	1a5b      	subs	r3, r3, r1
 800368e:	42ab      	cmp	r3, r5
 8003690:	dcf2      	bgt.n	8003678 <_printf_i+0x218>
 8003692:	e7eb      	b.n	800366c <_printf_i+0x20c>
 8003694:	2500      	movs	r5, #0
 8003696:	f104 0619 	add.w	r6, r4, #25
 800369a:	e7f5      	b.n	8003688 <_printf_i+0x228>
 800369c:	080038bf 	.word	0x080038bf
 80036a0:	080038d0 	.word	0x080038d0

080036a4 <memmove>:
 80036a4:	4288      	cmp	r0, r1
 80036a6:	b510      	push	{r4, lr}
 80036a8:	eb01 0402 	add.w	r4, r1, r2
 80036ac:	d902      	bls.n	80036b4 <memmove+0x10>
 80036ae:	4284      	cmp	r4, r0
 80036b0:	4623      	mov	r3, r4
 80036b2:	d807      	bhi.n	80036c4 <memmove+0x20>
 80036b4:	1e43      	subs	r3, r0, #1
 80036b6:	42a1      	cmp	r1, r4
 80036b8:	d008      	beq.n	80036cc <memmove+0x28>
 80036ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036c2:	e7f8      	b.n	80036b6 <memmove+0x12>
 80036c4:	4601      	mov	r1, r0
 80036c6:	4402      	add	r2, r0
 80036c8:	428a      	cmp	r2, r1
 80036ca:	d100      	bne.n	80036ce <memmove+0x2a>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036d6:	e7f7      	b.n	80036c8 <memmove+0x24>

080036d8 <_sbrk_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	2300      	movs	r3, #0
 80036dc:	4d05      	ldr	r5, [pc, #20]	; (80036f4 <_sbrk_r+0x1c>)
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	602b      	str	r3, [r5, #0]
 80036e4:	f7fd fe94 	bl	8001410 <_sbrk>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_sbrk_r+0x1a>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_sbrk_r+0x1a>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	20000240 	.word	0x20000240

080036f8 <memchr>:
 80036f8:	4603      	mov	r3, r0
 80036fa:	b510      	push	{r4, lr}
 80036fc:	b2c9      	uxtb	r1, r1
 80036fe:	4402      	add	r2, r0
 8003700:	4293      	cmp	r3, r2
 8003702:	4618      	mov	r0, r3
 8003704:	d101      	bne.n	800370a <memchr+0x12>
 8003706:	2000      	movs	r0, #0
 8003708:	e003      	b.n	8003712 <memchr+0x1a>
 800370a:	7804      	ldrb	r4, [r0, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	428c      	cmp	r4, r1
 8003710:	d1f6      	bne.n	8003700 <memchr+0x8>
 8003712:	bd10      	pop	{r4, pc}

08003714 <memcpy>:
 8003714:	440a      	add	r2, r1
 8003716:	4291      	cmp	r1, r2
 8003718:	f100 33ff 	add.w	r3, r0, #4294967295
 800371c:	d100      	bne.n	8003720 <memcpy+0xc>
 800371e:	4770      	bx	lr
 8003720:	b510      	push	{r4, lr}
 8003722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003726:	4291      	cmp	r1, r2
 8003728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800372c:	d1f9      	bne.n	8003722 <memcpy+0xe>
 800372e:	bd10      	pop	{r4, pc}

08003730 <_realloc_r>:
 8003730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003734:	4680      	mov	r8, r0
 8003736:	4614      	mov	r4, r2
 8003738:	460e      	mov	r6, r1
 800373a:	b921      	cbnz	r1, 8003746 <_realloc_r+0x16>
 800373c:	4611      	mov	r1, r2
 800373e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003742:	f7ff bc37 	b.w	8002fb4 <_malloc_r>
 8003746:	b92a      	cbnz	r2, 8003754 <_realloc_r+0x24>
 8003748:	f7ff fbcc 	bl	8002ee4 <_free_r>
 800374c:	4625      	mov	r5, r4
 800374e:	4628      	mov	r0, r5
 8003750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003754:	f000 f81b 	bl	800378e <_malloc_usable_size_r>
 8003758:	4284      	cmp	r4, r0
 800375a:	4607      	mov	r7, r0
 800375c:	d802      	bhi.n	8003764 <_realloc_r+0x34>
 800375e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003762:	d812      	bhi.n	800378a <_realloc_r+0x5a>
 8003764:	4621      	mov	r1, r4
 8003766:	4640      	mov	r0, r8
 8003768:	f7ff fc24 	bl	8002fb4 <_malloc_r>
 800376c:	4605      	mov	r5, r0
 800376e:	2800      	cmp	r0, #0
 8003770:	d0ed      	beq.n	800374e <_realloc_r+0x1e>
 8003772:	42bc      	cmp	r4, r7
 8003774:	4622      	mov	r2, r4
 8003776:	4631      	mov	r1, r6
 8003778:	bf28      	it	cs
 800377a:	463a      	movcs	r2, r7
 800377c:	f7ff ffca 	bl	8003714 <memcpy>
 8003780:	4631      	mov	r1, r6
 8003782:	4640      	mov	r0, r8
 8003784:	f7ff fbae 	bl	8002ee4 <_free_r>
 8003788:	e7e1      	b.n	800374e <_realloc_r+0x1e>
 800378a:	4635      	mov	r5, r6
 800378c:	e7df      	b.n	800374e <_realloc_r+0x1e>

0800378e <_malloc_usable_size_r>:
 800378e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003792:	1f18      	subs	r0, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	bfbc      	itt	lt
 8003798:	580b      	ldrlt	r3, [r1, r0]
 800379a:	18c0      	addlt	r0, r0, r3
 800379c:	4770      	bx	lr
	...

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
