
CONTROLE MOTOR DC_IHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003660  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003898  08003898  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003898  08003898  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003898  08003898  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080038a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  080038fc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080038fc  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c23  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001700  00000000  00000000  00027ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  000293f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000776  00000000  00000000  00029da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171a1  00000000  00000000  0002a51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000acda  00000000  00000000  000416bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085c22  00000000  00000000  0004c399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cb4  00000000  00000000  000d1fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000d4c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003754 	.word	0x08003754

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003754 	.word	0x08003754

0800014c <LCD_Cursor>:
 *  @return None
 *
 ******************************************************************************/

void LCD_Cursor(uint8_t x, uint8_t y)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if (x == 0)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d102      	bne.n	8000168 <LCD_Cursor+0x1c>
		temp = 0x80;
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e001      	b.n	800016c <LCD_Cursor+0x20>
	else
		temp = 0xC0;
 8000168:	23c0      	movs	r3, #192	; 0xc0
 800016a:	73fb      	strb	r3, [r7, #15]

	temp = temp + y;
 800016c:	7bfa      	ldrb	r2, [r7, #15]
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	4413      	add	r3, r2
 8000172:	73fb      	strb	r3, [r7, #15]

	LCD_Cmd(temp);
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	4618      	mov	r0, r3
 8000178:	f000 f8ae 	bl	80002d8 <LCD_Cmd>


}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <LCD_Data>:
*
*  @return  None
*
******************************************************************************/
void LCD_Data(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	RS_GPIO_Port->BSRR = RS_Pin;
 800018e:	4b45      	ldr	r3, [pc, #276]	; (80002a4 <LCD_Data+0x120>)
 8000190:	2208      	movs	r2, #8
 8000192:	611a      	str	r2, [r3, #16]
	if (data & 0x80)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	da04      	bge.n	80001a6 <LCD_Data+0x22>
		D7_GPIO_Port->BSRR = D7_Pin;
 800019c:	4b42      	ldr	r3, [pc, #264]	; (80002a8 <LCD_Data+0x124>)
 800019e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001a2:	611a      	str	r2, [r3, #16]
 80001a4:	e003      	b.n	80001ae <LCD_Data+0x2a>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 80001a6:	4b40      	ldr	r3, [pc, #256]	; (80002a8 <LCD_Data+0x124>)
 80001a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001ac:	611a      	str	r2, [r3, #16]
	if (data & 0x40)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <LCD_Data+0x3c>
		D6_GPIO_Port->BSRR = D6_Pin;
 80001b8:	4b3b      	ldr	r3, [pc, #236]	; (80002a8 <LCD_Data+0x124>)
 80001ba:	2208      	movs	r2, #8
 80001bc:	611a      	str	r2, [r3, #16]
 80001be:	e003      	b.n	80001c8 <LCD_Data+0x44>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 80001c0:	4b39      	ldr	r3, [pc, #228]	; (80002a8 <LCD_Data+0x124>)
 80001c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80001c6:	611a      	str	r2, [r3, #16]
	if (data & 0x20)
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	f003 0320 	and.w	r3, r3, #32
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d003      	beq.n	80001da <LCD_Data+0x56>
		D5_GPIO_Port->BSRR = D5_Pin;
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <LCD_Data+0x120>)
 80001d4:	2220      	movs	r2, #32
 80001d6:	611a      	str	r2, [r3, #16]
 80001d8:	e003      	b.n	80001e2 <LCD_Data+0x5e>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 80001da:	4b32      	ldr	r3, [pc, #200]	; (80002a4 <LCD_Data+0x120>)
 80001dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80001e0:	611a      	str	r2, [r3, #16]
	if (data & 0x10)
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f003 0310 	and.w	r3, r3, #16
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d003      	beq.n	80001f4 <LCD_Data+0x70>
		D4_GPIO_Port->BSRR = D4_Pin;
 80001ec:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <LCD_Data+0x120>)
 80001ee:	2210      	movs	r2, #16
 80001f0:	611a      	str	r2, [r3, #16]
 80001f2:	e003      	b.n	80001fc <LCD_Data+0x78>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 80001f4:	4b2b      	ldr	r3, [pc, #172]	; (80002a4 <LCD_Data+0x120>)
 80001f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001fa:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <LCD_Data+0x120>)
 80001fe:	2201      	movs	r2, #1
 8000200:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f001 f9a2 	bl	800154c <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 8000208:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <LCD_Data+0x120>)
 800020a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800020e:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f001 f99b 	bl	800154c <HAL_Delay>

	if (data & 0x08)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 0308 	and.w	r3, r3, #8
 800021c:	2b00      	cmp	r3, #0
 800021e:	d004      	beq.n	800022a <LCD_Data+0xa6>
		D7_GPIO_Port->BSRR = D7_Pin;
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <LCD_Data+0x124>)
 8000222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	e003      	b.n	8000232 <LCD_Data+0xae>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <LCD_Data+0x124>)
 800022c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000230:	611a      	str	r2, [r3, #16]
	if (data & 0x04)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	2b00      	cmp	r3, #0
 800023a:	d003      	beq.n	8000244 <LCD_Data+0xc0>
		D6_GPIO_Port->BSRR = D6_Pin;
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <LCD_Data+0x124>)
 800023e:	2208      	movs	r2, #8
 8000240:	611a      	str	r2, [r3, #16]
 8000242:	e003      	b.n	800024c <LCD_Data+0xc8>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <LCD_Data+0x124>)
 8000246:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800024a:	611a      	str	r2, [r3, #16]
	if (data & 0x02)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <LCD_Data+0xda>
		D5_GPIO_Port->BSRR = D5_Pin;
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <LCD_Data+0x120>)
 8000258:	2220      	movs	r2, #32
 800025a:	611a      	str	r2, [r3, #16]
 800025c:	e003      	b.n	8000266 <LCD_Data+0xe2>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <LCD_Data+0x120>)
 8000260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000264:	611a      	str	r2, [r3, #16]
	if (data & 0x01)
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d003      	beq.n	8000278 <LCD_Data+0xf4>
		D4_GPIO_Port->BSRR = D4_Pin;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <LCD_Data+0x120>)
 8000272:	2210      	movs	r2, #16
 8000274:	611a      	str	r2, [r3, #16]
 8000276:	e003      	b.n	8000280 <LCD_Data+0xfc>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <LCD_Data+0x120>)
 800027a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800027e:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <LCD_Data+0x120>)
 8000282:	2201      	movs	r2, #1
 8000284:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f001 f960 	bl	800154c <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <LCD_Data+0x120>)
 800028e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000292:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f001 f959 	bl	800154c <HAL_Delay>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40010c00 	.word	0x40010c00

080002ac <LCD_String>:
*
*  @param1 String to be sended.
*
******************************************************************************/
void LCD_String(char *string)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	while (*string)
 80002b4:	e007      	b.n	80002c6 <LCD_String+0x1a>
	{
		LCD_Data(*string);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff62 	bl	8000184 <LCD_Data>
		string++;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	while (*string)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1f3      	bne.n	80002b6 <LCD_String+0xa>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <LCD_Cmd>:
*
*  @return None.
*
******************************************************************************/
void LCD_Cmd(uint8_t cmd)  // Fun��o para enviar um comando para o Display
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2108      	movs	r1, #8
 80002e6:	4855      	ldr	r0, [pc, #340]	; (800043c <LCD_Cmd+0x164>)
 80002e8:	f001 fbcb 	bl	8001a82 <HAL_GPIO_WritePin>

	if (cmd & 0x80)
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da06      	bge.n	8000302 <LCD_Cmd+0x2a>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fa:	4851      	ldr	r0, [pc, #324]	; (8000440 <LCD_Cmd+0x168>)
 80002fc:	f001 fbc1 	bl	8001a82 <HAL_GPIO_WritePin>
 8000300:	e005      	b.n	800030e <LCD_Cmd+0x36>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000308:	484d      	ldr	r0, [pc, #308]	; (8000440 <LCD_Cmd+0x168>)
 800030a:	f001 fbba 	bl	8001a82 <HAL_GPIO_WritePin>
	if (cmd & 0x40)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000314:	2b00      	cmp	r3, #0
 8000316:	d005      	beq.n	8000324 <LCD_Cmd+0x4c>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2108      	movs	r1, #8
 800031c:	4848      	ldr	r0, [pc, #288]	; (8000440 <LCD_Cmd+0x168>)
 800031e:	f001 fbb0 	bl	8001a82 <HAL_GPIO_WritePin>
 8000322:	e004      	b.n	800032e <LCD_Cmd+0x56>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2108      	movs	r1, #8
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <LCD_Cmd+0x168>)
 800032a:	f001 fbaa 	bl	8001a82 <HAL_GPIO_WritePin>
	if (cmd & 0x20)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d005      	beq.n	8000344 <LCD_Cmd+0x6c>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	483f      	ldr	r0, [pc, #252]	; (800043c <LCD_Cmd+0x164>)
 800033e:	f001 fba0 	bl	8001a82 <HAL_GPIO_WritePin>
 8000342:	e004      	b.n	800034e <LCD_Cmd+0x76>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2120      	movs	r1, #32
 8000348:	483c      	ldr	r0, [pc, #240]	; (800043c <LCD_Cmd+0x164>)
 800034a:	f001 fb9a 	bl	8001a82 <HAL_GPIO_WritePin>
	if (cmd & 0x10)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	2b00      	cmp	r3, #0
 8000356:	d005      	beq.n	8000364 <LCD_Cmd+0x8c>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2110      	movs	r1, #16
 800035c:	4837      	ldr	r0, [pc, #220]	; (800043c <LCD_Cmd+0x164>)
 800035e:	f001 fb90 	bl	8001a82 <HAL_GPIO_WritePin>
 8000362:	e004      	b.n	800036e <LCD_Cmd+0x96>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4834      	ldr	r0, [pc, #208]	; (800043c <LCD_Cmd+0x164>)
 800036a:	f001 fb8a 	bl	8001a82 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2101      	movs	r1, #1
 8000372:	4832      	ldr	r0, [pc, #200]	; (800043c <LCD_Cmd+0x164>)
 8000374:	f001 fb85 	bl	8001a82 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000378:	2001      	movs	r0, #1
 800037a:	f001 f8e7 	bl	800154c <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2101      	movs	r1, #1
 8000382:	482e      	ldr	r0, [pc, #184]	; (800043c <LCD_Cmd+0x164>)
 8000384:	f001 fb7d 	bl	8001a82 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f001 f8df 	bl	800154c <HAL_Delay>

	if (cmd & 0x08)
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	2b00      	cmp	r3, #0
 8000396:	d006      	beq.n	80003a6 <LCD_Cmd+0xce>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039e:	4828      	ldr	r0, [pc, #160]	; (8000440 <LCD_Cmd+0x168>)
 80003a0:	f001 fb6f 	bl	8001a82 <HAL_GPIO_WritePin>
 80003a4:	e005      	b.n	80003b2 <LCD_Cmd+0xda>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4824      	ldr	r0, [pc, #144]	; (8000440 <LCD_Cmd+0x168>)
 80003ae:	f001 fb68 	bl	8001a82 <HAL_GPIO_WritePin>
	if (cmd & 0x04)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d005      	beq.n	80003c8 <LCD_Cmd+0xf0>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	481f      	ldr	r0, [pc, #124]	; (8000440 <LCD_Cmd+0x168>)
 80003c2:	f001 fb5e 	bl	8001a82 <HAL_GPIO_WritePin>
 80003c6:	e004      	b.n	80003d2 <LCD_Cmd+0xfa>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2108      	movs	r1, #8
 80003cc:	481c      	ldr	r0, [pc, #112]	; (8000440 <LCD_Cmd+0x168>)
 80003ce:	f001 fb58 	bl	8001a82 <HAL_GPIO_WritePin>
	if (cmd & 0x02)
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 0302 	and.w	r3, r3, #2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d005      	beq.n	80003e8 <LCD_Cmd+0x110>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	4816      	ldr	r0, [pc, #88]	; (800043c <LCD_Cmd+0x164>)
 80003e2:	f001 fb4e 	bl	8001a82 <HAL_GPIO_WritePin>
 80003e6:	e004      	b.n	80003f2 <LCD_Cmd+0x11a>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2120      	movs	r1, #32
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <LCD_Cmd+0x164>)
 80003ee:	f001 fb48 	bl	8001a82 <HAL_GPIO_WritePin>
	if (cmd & 0x01)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d005      	beq.n	8000408 <LCD_Cmd+0x130>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2110      	movs	r1, #16
 8000400:	480e      	ldr	r0, [pc, #56]	; (800043c <LCD_Cmd+0x164>)
 8000402:	f001 fb3e 	bl	8001a82 <HAL_GPIO_WritePin>
 8000406:	e004      	b.n	8000412 <LCD_Cmd+0x13a>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2110      	movs	r1, #16
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LCD_Cmd+0x164>)
 800040e:	f001 fb38 	bl	8001a82 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2101      	movs	r1, #1
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <LCD_Cmd+0x164>)
 8000418:	f001 fb33 	bl	8001a82 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f001 f895 	bl	800154c <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2101      	movs	r1, #1
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <LCD_Cmd+0x164>)
 8000428:	f001 fb2b 	bl	8001a82 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800042c:	2001      	movs	r0, #1
 800042e:	f001 f88d 	bl	800154c <HAL_Delay>

}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010800 	.word	0x40010800
 8000440:	40010c00 	.word	0x40010c00

08000444 <LCD_Clear>:
*
*  @return None.
*
******************************************************************************/
void LCD_Clear(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	LCD_Cmd(0x01);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff ff45 	bl	80002d8 <LCD_Cmd>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}

08000452 <LCD_Init>:
*
*  @return None.
*
******************************************************************************/
void LCD_Init(void)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0
	LCD_Cmd(0x33);
 8000456:	2033      	movs	r0, #51	; 0x33
 8000458:	f7ff ff3e 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x32);
 800045c:	2032      	movs	r0, #50	; 0x32
 800045e:	f7ff ff3b 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x28);
 8000462:	2028      	movs	r0, #40	; 0x28
 8000464:	f7ff ff38 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x06);
 8000468:	2006      	movs	r0, #6
 800046a:	f7ff ff35 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x0C);
 800046e:	200c      	movs	r0, #12
 8000470:	f7ff ff32 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x01);
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff2f 	bl	80002d8 <LCD_Cmd>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f001 f800 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 fd94 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 fe4e 	bl	800112c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000490:	f000 fdd6 	bl	8001040 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000494:	2108      	movs	r1, #8
 8000496:	487f      	ldr	r0, [pc, #508]	; (8000694 <main+0x214>)
 8000498:	f001 ff92 	bl	80023c0 <HAL_TIM_PWM_Start>
  pwm = 0;
 800049c:	4b7e      	ldr	r3, [pc, #504]	; (8000698 <main+0x218>)
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
  void Buzzer_Teclas();
  void ENTER_Boucing();
  void DEC_Boucing();
  void INC_Boucing();

  LCD_Init();
 80004a2:	f7ff ffd6 	bl	8000452 <LCD_Init>
  LCD_Cursor(0,2);
 80004a6:	2102      	movs	r1, #2
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff fe4f 	bl	800014c <LCD_Cursor>
  LCD_String("DC MOTOR SYS" );
 80004ae:	487b      	ldr	r0, [pc, #492]	; (800069c <main+0x21c>)
 80004b0:	f7ff fefc 	bl	80002ac <LCD_String>
  LCD_Cursor(1,2);
 80004b4:	2102      	movs	r1, #2
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff fe48 	bl	800014c <LCD_Cursor>
  LCD_String("VERSION: 1.0" );
 80004bc:	4878      	ldr	r0, [pc, #480]	; (80006a0 <main+0x220>)
 80004be:	f7ff fef5 	bl	80002ac <LCD_String>
  HAL_Delay(3000);
 80004c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004c6:	f001 f841 	bl	800154c <HAL_Delay>
  LCD_Clear();
 80004ca:	f7ff ffbb 	bl	8000444 <LCD_Clear>
  start = 1;
 80004ce:	4b75      	ldr	r3, [pc, #468]	; (80006a4 <main+0x224>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80004d4:	4b73      	ldr	r3, [pc, #460]	; (80006a4 <main+0x224>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d12c      	bne.n	8000536 <main+0xb6>
 80004dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e0:	4871      	ldr	r0, [pc, #452]	; (80006a8 <main+0x228>)
 80004e2:	f001 fab7 	bl	8001a54 <HAL_GPIO_ReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d024      	beq.n	8000536 <main+0xb6>
		{
			ENTER_Boucing();
 80004ec:	f000 fd4e 	bl	8000f8c <ENTER_Boucing>
			Buzzer_Teclas();
 80004f0:	f000 fd10 	bl	8000f14 <Buzzer_Teclas>
			start = 3;
 80004f4:	4b6b      	ldr	r3, [pc, #428]	; (80006a4 <main+0x224>)
 80004f6:	2203      	movs	r2, #3
 80004f8:	701a      	strb	r2, [r3, #0]
			a_inc = 10;
 80004fa:	4b6c      	ldr	r3, [pc, #432]	; (80006ac <main+0x22c>)
 80004fc:	220a      	movs	r2, #10
 80004fe:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 8000500:	4b6a      	ldr	r3, [pc, #424]	; (80006ac <main+0x22c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	496a      	ldr	r1, [pc, #424]	; (80006b0 <main+0x230>)
 8000508:	486a      	ldr	r0, [pc, #424]	; (80006b4 <main+0x234>)
 800050a:	f002 fc71 	bl	8002df0 <siprintf>
			r_inc = 120;
 800050e:	4b6a      	ldr	r3, [pc, #424]	; (80006b8 <main+0x238>)
 8000510:	2278      	movs	r2, #120	; 0x78
 8000512:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 8000514:	4b68      	ldr	r3, [pc, #416]	; (80006b8 <main+0x238>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	4965      	ldr	r1, [pc, #404]	; (80006b0 <main+0x230>)
 800051c:	4867      	ldr	r0, [pc, #412]	; (80006bc <main+0x23c>)
 800051e:	f002 fc67 	bl	8002df0 <siprintf>
			d_inc = 10;
 8000522:	4b67      	ldr	r3, [pc, #412]	; (80006c0 <main+0x240>)
 8000524:	220a      	movs	r2, #10
 8000526:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 8000528:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <main+0x240>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4960      	ldr	r1, [pc, #384]	; (80006b0 <main+0x230>)
 8000530:	4864      	ldr	r0, [pc, #400]	; (80006c4 <main+0x244>)
 8000532:	f002 fc5d 	bl	8002df0 <siprintf>
		}

		if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (start == 1))
 8000536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053a:	485b      	ldr	r0, [pc, #364]	; (80006a8 <main+0x228>)
 800053c:	f001 fa8a 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00f      	beq.n	8000566 <main+0xe6>
 8000546:	4b57      	ldr	r3, [pc, #348]	; (80006a4 <main+0x224>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d10b      	bne.n	8000566 <main+0xe6>
		{
			INC_Boucing();
 800054e:	f000 fcf7 	bl	8000f40 <INC_Boucing>
			Buzzer_Teclas();
 8000552:	f000 fcdf 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 8000556:	f7ff ff75 	bl	8000444 <LCD_Clear>
			menu = 1;
 800055a:	4b5b      	ldr	r3, [pc, #364]	; (80006c8 <main+0x248>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
			start = 0;
 8000560:	4b50      	ldr	r3, [pc, #320]	; (80006a4 <main+0x224>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
		}

		if ((menu == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin)))
 8000566:	4b58      	ldr	r3, [pc, #352]	; (80006c8 <main+0x248>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d112      	bne.n	8000594 <main+0x114>
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	484d      	ldr	r0, [pc, #308]	; (80006a8 <main+0x228>)
 8000572:	f001 fa6f 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <main+0x114>
		{
			DEC_Boucing();
 800057c:	f000 fcf4 	bl	8000f68 <DEC_Boucing>
			Buzzer_Teclas();
 8000580:	f000 fcc8 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 8000584:	f7ff ff5e 	bl	8000444 <LCD_Clear>
			menu = 0;
 8000588:	4b4f      	ldr	r3, [pc, #316]	; (80006c8 <main+0x248>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
			start = 2;
 800058e:	4b45      	ldr	r3, [pc, #276]	; (80006a4 <main+0x224>)
 8000590:	2202      	movs	r2, #2
 8000592:	701a      	strb	r2, [r3, #0]
		}

		if ((aux_start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000594:	4b4d      	ldr	r3, [pc, #308]	; (80006cc <main+0x24c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d12f      	bne.n	80005fc <main+0x17c>
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	4841      	ldr	r0, [pc, #260]	; (80006a8 <main+0x228>)
 80005a2:	f001 fa57 	bl	8001a54 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d027      	beq.n	80005fc <main+0x17c>
		{
			ENTER_Boucing();
 80005ac:	f000 fcee 	bl	8000f8c <ENTER_Boucing>
			Buzzer_Teclas();
 80005b0:	f000 fcb0 	bl	8000f14 <Buzzer_Teclas>
			start = 3;
 80005b4:	4b3b      	ldr	r3, [pc, #236]	; (80006a4 <main+0x224>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	701a      	strb	r2, [r3, #0]
			aux_start = 0;
 80005ba:	4b44      	ldr	r3, [pc, #272]	; (80006cc <main+0x24c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
			a_inc = 10;
 80005c0:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <main+0x22c>)
 80005c2:	220a      	movs	r2, #10
 80005c4:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 80005c6:	4b39      	ldr	r3, [pc, #228]	; (80006ac <main+0x22c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4938      	ldr	r1, [pc, #224]	; (80006b0 <main+0x230>)
 80005ce:	4839      	ldr	r0, [pc, #228]	; (80006b4 <main+0x234>)
 80005d0:	f002 fc0e 	bl	8002df0 <siprintf>
			r_inc = 120;
 80005d4:	4b38      	ldr	r3, [pc, #224]	; (80006b8 <main+0x238>)
 80005d6:	2278      	movs	r2, #120	; 0x78
 80005d8:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 80005da:	4b37      	ldr	r3, [pc, #220]	; (80006b8 <main+0x238>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	4933      	ldr	r1, [pc, #204]	; (80006b0 <main+0x230>)
 80005e2:	4836      	ldr	r0, [pc, #216]	; (80006bc <main+0x23c>)
 80005e4:	f002 fc04 	bl	8002df0 <siprintf>
			d_inc = 10;
 80005e8:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <main+0x240>)
 80005ea:	220a      	movs	r2, #10
 80005ec:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 80005ee:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <main+0x240>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	492e      	ldr	r1, [pc, #184]	; (80006b0 <main+0x230>)
 80005f6:	4833      	ldr	r0, [pc, #204]	; (80006c4 <main+0x244>)
 80005f8:	f002 fbfa 	bl	8002df0 <siprintf>
		}

		if ((aux_menu == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <main+0x250>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d11d      	bne.n	8000640 <main+0x1c0>
 8000604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000608:	4827      	ldr	r0, [pc, #156]	; (80006a8 <main+0x228>)
 800060a:	f001 fa23 	bl	8001a54 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d015      	beq.n	8000640 <main+0x1c0>
		{
			ENTER_Boucing();
 8000614:	f000 fcba 	bl	8000f8c <ENTER_Boucing>
			Buzzer_Teclas();
 8000618:	f000 fc7c 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 800061c:	f7ff ff12 	bl	8000444 <LCD_Clear>
			menu = 2;
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <main+0x248>)
 8000622:	2202      	movs	r2, #2
 8000624:	701a      	strb	r2, [r3, #0]
			aux_menu = 0;
 8000626:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <main+0x250>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
			a_inc = 05;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <main+0x22c>)
 800062e:	2205      	movs	r2, #5
 8000630:	701a      	strb	r2, [r3, #0]

			sprintf(buffer_accel, "%d", a_inc);
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <main+0x22c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	491d      	ldr	r1, [pc, #116]	; (80006b0 <main+0x230>)
 800063a:	481e      	ldr	r0, [pc, #120]	; (80006b4 <main+0x234>)
 800063c:	f002 fbd8 	bl	8002df0 <siprintf>
		}

		if ((aux_accel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (a_inc <= 80)))
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <main+0x254>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d147      	bne.n	80006d8 <main+0x258>
 8000648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064c:	4816      	ldr	r0, [pc, #88]	; (80006a8 <main+0x228>)
 800064e:	f001 fa01 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d03f      	beq.n	80006d8 <main+0x258>
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <main+0x22c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b50      	cmp	r3, #80	; 0x50
 800065e:	d83b      	bhi.n	80006d8 <main+0x258>
		{
			aux_menu =0;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <main+0x250>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
			INC_Boucing();
 8000666:	f000 fc6b 	bl	8000f40 <INC_Boucing>
			Buzzer_Teclas();
 800066a:	f000 fc53 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 800066e:	f7ff fee9 	bl	8000444 <LCD_Clear>
			a_inc += 05;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <main+0x22c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3305      	adds	r3, #5
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <main+0x22c>)
 800067c:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <main+0x22c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	490a      	ldr	r1, [pc, #40]	; (80006b0 <main+0x230>)
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <main+0x234>)
 8000688:	f002 fbb2 	bl	8002df0 <siprintf>
			menu = 3;
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <main+0x248>)
 800068e:	2203      	movs	r2, #3
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e04d      	b.n	8000730 <main+0x2b0>
 8000694:	20000078 	.word	0x20000078
 8000698:	200000cd 	.word	0x200000cd
 800069c:	0800376c 	.word	0x0800376c
 80006a0:	0800377c 	.word	0x0800377c
 80006a4:	200000c1 	.word	0x200000c1
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	200000c8 	.word	0x200000c8
 80006b0:	0800378c 	.word	0x0800378c
 80006b4:	200000d0 	.word	0x200000d0
 80006b8:	200000c9 	.word	0x200000c9
 80006bc:	200000e0 	.word	0x200000e0
 80006c0:	200000ca 	.word	0x200000ca
 80006c4:	200000f0 	.word	0x200000f0
 80006c8:	200000c0 	.word	0x200000c0
 80006cc:	200000c3 	.word	0x200000c3
 80006d0:	200000c2 	.word	0x200000c2
 80006d4:	200000c4 	.word	0x200000c4
		}
		else if (((aux_accel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (a_inc <= 80) && (a_inc >5))))
 80006d8:	4b7b      	ldr	r3, [pc, #492]	; (80008c8 <main+0x448>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d127      	bne.n	8000730 <main+0x2b0>
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	487a      	ldr	r0, [pc, #488]	; (80008cc <main+0x44c>)
 80006e4:	f001 f9b6 	bl	8001a54 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d020      	beq.n	8000730 <main+0x2b0>
 80006ee:	4b78      	ldr	r3, [pc, #480]	; (80008d0 <main+0x450>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b50      	cmp	r3, #80	; 0x50
 80006f4:	d81c      	bhi.n	8000730 <main+0x2b0>
 80006f6:	4b76      	ldr	r3, [pc, #472]	; (80008d0 <main+0x450>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b05      	cmp	r3, #5
 80006fc:	d918      	bls.n	8000730 <main+0x2b0>
		{
			aux_menu = 0;
 80006fe:	4b75      	ldr	r3, [pc, #468]	; (80008d4 <main+0x454>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
			DEC_Boucing();
 8000704:	f000 fc30 	bl	8000f68 <DEC_Boucing>
			Buzzer_Teclas();
 8000708:	f000 fc04 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 800070c:	f7ff fe9a 	bl	8000444 <LCD_Clear>
			a_inc -= 05;
 8000710:	4b6f      	ldr	r3, [pc, #444]	; (80008d0 <main+0x450>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3b05      	subs	r3, #5
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <main+0x450>)
 800071a:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 800071c:	4b6c      	ldr	r3, [pc, #432]	; (80008d0 <main+0x450>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	496d      	ldr	r1, [pc, #436]	; (80008d8 <main+0x458>)
 8000724:	486d      	ldr	r0, [pc, #436]	; (80008dc <main+0x45c>)
 8000726:	f002 fb63 	bl	8002df0 <siprintf>
			menu = 3;
 800072a:	4b6d      	ldr	r3, [pc, #436]	; (80008e0 <main+0x460>)
 800072c:	2203      	movs	r2, #3
 800072e:	701a      	strb	r2, [r3, #0]
		}

		if ((aux_running == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000730:	4b6c      	ldr	r3, [pc, #432]	; (80008e4 <main+0x464>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d121      	bne.n	800077c <main+0x2fc>
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	4863      	ldr	r0, [pc, #396]	; (80008cc <main+0x44c>)
 800073e:	f001 f989 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d019      	beq.n	800077c <main+0x2fc>
		{
			a_inc = a_inc;
 8000748:	4b61      	ldr	r3, [pc, #388]	; (80008d0 <main+0x450>)
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	4b60      	ldr	r3, [pc, #384]	; (80008d0 <main+0x450>)
 800074e:	701a      	strb	r2, [r3, #0]
			aux_accel = 0;
 8000750:	4b5d      	ldr	r3, [pc, #372]	; (80008c8 <main+0x448>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
			ENTER_Boucing();
 8000756:	f000 fc19 	bl	8000f8c <ENTER_Boucing>
			Buzzer_Teclas();
 800075a:	f000 fbdb 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 800075e:	f7ff fe71 	bl	8000444 <LCD_Clear>
			menu = 4;
 8000762:	4b5f      	ldr	r3, [pc, #380]	; (80008e0 <main+0x460>)
 8000764:	2204      	movs	r2, #4
 8000766:	701a      	strb	r2, [r3, #0]
			r_inc = 05;
 8000768:	4b5f      	ldr	r3, [pc, #380]	; (80008e8 <main+0x468>)
 800076a:	2205      	movs	r2, #5
 800076c:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 800076e:	4b5e      	ldr	r3, [pc, #376]	; (80008e8 <main+0x468>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	4958      	ldr	r1, [pc, #352]	; (80008d8 <main+0x458>)
 8000776:	485d      	ldr	r0, [pc, #372]	; (80008ec <main+0x46c>)
 8000778:	f002 fb3a 	bl	8002df0 <siprintf>
		}

		if ((inc_running == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (r_inc <= 180)))
 800077c:	4b5c      	ldr	r3, [pc, #368]	; (80008f0 <main+0x470>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d125      	bne.n	80007d0 <main+0x350>
 8000784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000788:	4850      	ldr	r0, [pc, #320]	; (80008cc <main+0x44c>)
 800078a:	f001 f963 	bl	8001a54 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d01d      	beq.n	80007d0 <main+0x350>
 8000794:	4b54      	ldr	r3, [pc, #336]	; (80008e8 <main+0x468>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2bb4      	cmp	r3, #180	; 0xb4
 800079a:	d819      	bhi.n	80007d0 <main+0x350>
		{
			aux_running = 0;
 800079c:	4b51      	ldr	r3, [pc, #324]	; (80008e4 <main+0x464>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
			INC_Boucing();
 80007a2:	f000 fbcd 	bl	8000f40 <INC_Boucing>
			Buzzer_Teclas();
 80007a6:	f000 fbb5 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 80007aa:	f7ff fe4b 	bl	8000444 <LCD_Clear>
			r_inc += 05;
 80007ae:	4b4e      	ldr	r3, [pc, #312]	; (80008e8 <main+0x468>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	3305      	adds	r3, #5
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b4c      	ldr	r3, [pc, #304]	; (80008e8 <main+0x468>)
 80007b8:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 80007ba:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <main+0x468>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	4945      	ldr	r1, [pc, #276]	; (80008d8 <main+0x458>)
 80007c2:	484a      	ldr	r0, [pc, #296]	; (80008ec <main+0x46c>)
 80007c4:	f002 fb14 	bl	8002df0 <siprintf>
			menu = 5;
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <main+0x460>)
 80007ca:	2205      	movs	r2, #5
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e02b      	b.n	8000828 <main+0x3a8>
		}
		else if ((inc_running == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (r_inc <= 180) && (r_inc > 5)))
 80007d0:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <main+0x470>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d127      	bne.n	8000828 <main+0x3a8>
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	483c      	ldr	r0, [pc, #240]	; (80008cc <main+0x44c>)
 80007dc:	f001 f93a 	bl	8001a54 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d020      	beq.n	8000828 <main+0x3a8>
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <main+0x468>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2bb4      	cmp	r3, #180	; 0xb4
 80007ec:	d81c      	bhi.n	8000828 <main+0x3a8>
 80007ee:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <main+0x468>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b05      	cmp	r3, #5
 80007f4:	d918      	bls.n	8000828 <main+0x3a8>
		{
			aux_running = 0;
 80007f6:	4b3b      	ldr	r3, [pc, #236]	; (80008e4 <main+0x464>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
			DEC_Boucing();
 80007fc:	f000 fbb4 	bl	8000f68 <DEC_Boucing>
			Buzzer_Teclas();
 8000800:	f000 fb88 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 8000804:	f7ff fe1e 	bl	8000444 <LCD_Clear>
			r_inc -= 05;
 8000808:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <main+0x468>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3b05      	subs	r3, #5
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <main+0x468>)
 8000812:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 8000814:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <main+0x468>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	492f      	ldr	r1, [pc, #188]	; (80008d8 <main+0x458>)
 800081c:	4833      	ldr	r0, [pc, #204]	; (80008ec <main+0x46c>)
 800081e:	f002 fae7 	bl	8002df0 <siprintf>
			menu = 5;
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <main+0x460>)
 8000824:	2205      	movs	r2, #5
 8000826:	701a      	strb	r2, [r3, #0]
		}

		if ((aux_decel == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000828:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <main+0x474>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d121      	bne.n	8000874 <main+0x3f4>
 8000830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000834:	4825      	ldr	r0, [pc, #148]	; (80008cc <main+0x44c>)
 8000836:	f001 f90d 	bl	8001a54 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d019      	beq.n	8000874 <main+0x3f4>
		{
			r_inc = r_inc;
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <main+0x468>)
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <main+0x468>)
 8000846:	701a      	strb	r2, [r3, #0]
			inc_running = 0;
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <main+0x470>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
			ENTER_Boucing();
 800084e:	f000 fb9d 	bl	8000f8c <ENTER_Boucing>
			Buzzer_Teclas();
 8000852:	f000 fb5f 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 8000856:	f7ff fdf5 	bl	8000444 <LCD_Clear>
			menu = 6;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <main+0x460>)
 800085c:	2206      	movs	r2, #6
 800085e:	701a      	strb	r2, [r3, #0]
			d_inc = 05;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <main+0x478>)
 8000862:	2205      	movs	r2, #5
 8000864:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <main+0x478>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	491a      	ldr	r1, [pc, #104]	; (80008d8 <main+0x458>)
 800086e:	4823      	ldr	r0, [pc, #140]	; (80008fc <main+0x47c>)
 8000870:	f002 fabe 	bl	8002df0 <siprintf>
		}

		if ((inc_decel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (d_inc <= 80)))
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <main+0x480>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d143      	bne.n	8000904 <main+0x484>
 800087c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000880:	4812      	ldr	r0, [pc, #72]	; (80008cc <main+0x44c>)
 8000882:	f001 f8e7 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d03b      	beq.n	8000904 <main+0x484>
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <main+0x478>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b50      	cmp	r3, #80	; 0x50
 8000892:	d837      	bhi.n	8000904 <main+0x484>
		{
			aux_decel = 0;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <main+0x474>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
			INC_Boucing();
 800089a:	f000 fb51 	bl	8000f40 <INC_Boucing>
			Buzzer_Teclas();
 800089e:	f000 fb39 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 80008a2:	f7ff fdcf 	bl	8000444 <LCD_Clear>
			d_inc += 05;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <main+0x478>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	3305      	adds	r3, #5
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <main+0x478>)
 80008b0:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <main+0x478>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4907      	ldr	r1, [pc, #28]	; (80008d8 <main+0x458>)
 80008ba:	4810      	ldr	r0, [pc, #64]	; (80008fc <main+0x47c>)
 80008bc:	f002 fa98 	bl	8002df0 <siprintf>
			menu = 7;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <main+0x460>)
 80008c2:	2207      	movs	r2, #7
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e049      	b.n	800095c <main+0x4dc>
 80008c8:	200000c4 	.word	0x200000c4
 80008cc:	40010c00 	.word	0x40010c00
 80008d0:	200000c8 	.word	0x200000c8
 80008d4:	200000c2 	.word	0x200000c2
 80008d8:	0800378c 	.word	0x0800378c
 80008dc:	200000d0 	.word	0x200000d0
 80008e0:	200000c0 	.word	0x200000c0
 80008e4:	200000c5 	.word	0x200000c5
 80008e8:	200000c9 	.word	0x200000c9
 80008ec:	200000e0 	.word	0x200000e0
 80008f0:	200000cb 	.word	0x200000cb
 80008f4:	200000c6 	.word	0x200000c6
 80008f8:	200000ca 	.word	0x200000ca
 80008fc:	200000f0 	.word	0x200000f0
 8000900:	200000cc 	.word	0x200000cc
		}
		else if ((inc_decel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (d_inc <= 80) && (d_inc > 5)))
 8000904:	4bba      	ldr	r3, [pc, #744]	; (8000bf0 <main+0x770>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d127      	bne.n	800095c <main+0x4dc>
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	48b9      	ldr	r0, [pc, #740]	; (8000bf4 <main+0x774>)
 8000910:	f001 f8a0 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d020      	beq.n	800095c <main+0x4dc>
 800091a:	4bb7      	ldr	r3, [pc, #732]	; (8000bf8 <main+0x778>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b50      	cmp	r3, #80	; 0x50
 8000920:	d81c      	bhi.n	800095c <main+0x4dc>
 8000922:	4bb5      	ldr	r3, [pc, #724]	; (8000bf8 <main+0x778>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b05      	cmp	r3, #5
 8000928:	d918      	bls.n	800095c <main+0x4dc>
		{
			aux_decel = 0;
 800092a:	4bb4      	ldr	r3, [pc, #720]	; (8000bfc <main+0x77c>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
			DEC_Boucing();
 8000930:	f000 fb1a 	bl	8000f68 <DEC_Boucing>
			Buzzer_Teclas();
 8000934:	f000 faee 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 8000938:	f7ff fd84 	bl	8000444 <LCD_Clear>
			d_inc -= 05;
 800093c:	4bae      	ldr	r3, [pc, #696]	; (8000bf8 <main+0x778>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3b05      	subs	r3, #5
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4bac      	ldr	r3, [pc, #688]	; (8000bf8 <main+0x778>)
 8000946:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 8000948:	4bab      	ldr	r3, [pc, #684]	; (8000bf8 <main+0x778>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	49ac      	ldr	r1, [pc, #688]	; (8000c00 <main+0x780>)
 8000950:	48ac      	ldr	r0, [pc, #688]	; (8000c04 <main+0x784>)
 8000952:	f002 fa4d 	bl	8002df0 <siprintf>
			menu = 7;
 8000956:	4bac      	ldr	r3, [pc, #688]	; (8000c08 <main+0x788>)
 8000958:	2207      	movs	r2, #7
 800095a:	701a      	strb	r2, [r3, #0]
		}

		if ((config_finish == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800095c:	4bab      	ldr	r3, [pc, #684]	; (8000c0c <main+0x78c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d11a      	bne.n	800099a <main+0x51a>
 8000964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000968:	48a2      	ldr	r0, [pc, #648]	; (8000bf4 <main+0x774>)
 800096a:	f001 f873 	bl	8001a54 <HAL_GPIO_ReadPin>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d012      	beq.n	800099a <main+0x51a>
		{
			d_inc = d_inc;
 8000974:	4ba0      	ldr	r3, [pc, #640]	; (8000bf8 <main+0x778>)
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	4b9f      	ldr	r3, [pc, #636]	; (8000bf8 <main+0x778>)
 800097a:	701a      	strb	r2, [r3, #0]
			inc_decel = 0;
 800097c:	4b9c      	ldr	r3, [pc, #624]	; (8000bf0 <main+0x770>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
			ENTER_Boucing();
 8000982:	f000 fb03 	bl	8000f8c <ENTER_Boucing>
			Buzzer_Teclas();
 8000986:	f000 fac5 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 800098a:	f7ff fd5b 	bl	8000444 <LCD_Clear>
			start = 4;
 800098e:	4ba0      	ldr	r3, [pc, #640]	; (8000c10 <main+0x790>)
 8000990:	2204      	movs	r2, #4
 8000992:	701a      	strb	r2, [r3, #0]
			menu = 0;
 8000994:	4b9c      	ldr	r3, [pc, #624]	; (8000c08 <main+0x788>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
		}

		if ((HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)) && (config_init = 1))
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	4895      	ldr	r0, [pc, #596]	; (8000bf4 <main+0x774>)
 80009a0:	f001 f858 	bl	8001a54 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d02c      	beq.n	8000a04 <main+0x584>
 80009aa:	4b9a      	ldr	r3, [pc, #616]	; (8000c14 <main+0x794>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
		{
			ENTER_Boucing();
 80009b0:	f000 faec 	bl	8000f8c <ENTER_Boucing>
			Buzzer_Teclas();
 80009b4:	f000 faae 	bl	8000f14 <Buzzer_Teclas>
			LCD_Clear();
 80009b8:	f7ff fd44 	bl	8000444 <LCD_Clear>
			a_inc = a_inc;
 80009bc:	4b96      	ldr	r3, [pc, #600]	; (8000c18 <main+0x798>)
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	4b95      	ldr	r3, [pc, #596]	; (8000c18 <main+0x798>)
 80009c2:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 80009c4:	4b94      	ldr	r3, [pc, #592]	; (8000c18 <main+0x798>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	498d      	ldr	r1, [pc, #564]	; (8000c00 <main+0x780>)
 80009cc:	4893      	ldr	r0, [pc, #588]	; (8000c1c <main+0x79c>)
 80009ce:	f002 fa0f 	bl	8002df0 <siprintf>
			r_inc =r_inc;
 80009d2:	4b93      	ldr	r3, [pc, #588]	; (8000c20 <main+0x7a0>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b92      	ldr	r3, [pc, #584]	; (8000c20 <main+0x7a0>)
 80009d8:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 80009da:	4b91      	ldr	r3, [pc, #580]	; (8000c20 <main+0x7a0>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	4987      	ldr	r1, [pc, #540]	; (8000c00 <main+0x780>)
 80009e2:	4890      	ldr	r0, [pc, #576]	; (8000c24 <main+0x7a4>)
 80009e4:	f002 fa04 	bl	8002df0 <siprintf>
			d_inc = d_inc;
 80009e8:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <main+0x778>)
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	4b82      	ldr	r3, [pc, #520]	; (8000bf8 <main+0x778>)
 80009ee:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 80009f0:	4b81      	ldr	r3, [pc, #516]	; (8000bf8 <main+0x778>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4982      	ldr	r1, [pc, #520]	; (8000c00 <main+0x780>)
 80009f8:	4882      	ldr	r0, [pc, #520]	; (8000c04 <main+0x784>)
 80009fa:	f002 f9f9 	bl	8002df0 <siprintf>
			start = 5;
 80009fe:	4b84      	ldr	r3, [pc, #528]	; (8000c10 <main+0x790>)
 8000a00:	2205      	movs	r2, #5
 8000a02:	701a      	strb	r2, [r3, #0]
		}

		switch (menu)
 8000a04:	4b80      	ldr	r3, [pc, #512]	; (8000c08 <main+0x788>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	f200 80ba 	bhi.w	8000b84 <main+0x704>
 8000a10:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <main+0x598>)
 8000a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a16:	bf00      	nop
 8000a18:	08000a35 	.word	0x08000a35
 8000a1c:	08000a59 	.word	0x08000a59
 8000a20:	08000a8b 	.word	0x08000a8b
 8000a24:	08000abd 	.word	0x08000abd
 8000a28:	08000aef 	.word	0x08000aef
 8000a2c:	08000b21 	.word	0x08000b21
 8000a30:	08000b53 	.word	0x08000b53
		{
		case 1:
			LCD_Cursor(0, 2);
 8000a34:	2102      	movs	r1, #2
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fb88 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000a3c:	487a      	ldr	r0, [pc, #488]	; (8000c28 <main+0x7a8>)
 8000a3e:	f7ff fc35 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fb81 	bl	800014c <LCD_Cursor>
			LCD_String("<     MENU    ");
 8000a4a:	4878      	ldr	r0, [pc, #480]	; (8000c2c <main+0x7ac>)
 8000a4c:	f7ff fc2e 	bl	80002ac <LCD_String>
			aux_menu = 1;
 8000a50:	4b77      	ldr	r3, [pc, #476]	; (8000c30 <main+0x7b0>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
			break;
 8000a56:	e095      	b.n	8000b84 <main+0x704>

		case 2:
			LCD_Cursor(0, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fb76 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 8000a60:	4874      	ldr	r0, [pc, #464]	; (8000c34 <main+0x7b4>)
 8000a62:	f7ff fc23 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 8000a66:	2107      	movs	r1, #7
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fb6f 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 8000a6e:	486b      	ldr	r0, [pc, #428]	; (8000c1c <main+0x79c>)
 8000a70:	f7ff fc1c 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000a74:	2108      	movs	r1, #8
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff fb68 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000a7c:	486e      	ldr	r0, [pc, #440]	; (8000c38 <main+0x7b8>)
 8000a7e:	f7ff fc15 	bl	80002ac <LCD_String>
			aux_accel = 1;
 8000a82:	4b6e      	ldr	r3, [pc, #440]	; (8000c3c <main+0x7bc>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
			break;
 8000a88:	e07c      	b.n	8000b84 <main+0x704>

		case 3:
			LCD_Cursor(0, 0);
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff fb5d 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 8000a92:	4868      	ldr	r0, [pc, #416]	; (8000c34 <main+0x7b4>)
 8000a94:	f7ff fc0a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 8000a98:	2106      	movs	r1, #6
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fb56 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 8000aa0:	485e      	ldr	r0, [pc, #376]	; (8000c1c <main+0x79c>)
 8000aa2:	f7ff fc03 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fb4f 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000aae:	4862      	ldr	r0, [pc, #392]	; (8000c38 <main+0x7b8>)
 8000ab0:	f7ff fbfc 	bl	80002ac <LCD_String>
			aux_running = 1;
 8000ab4:	4b62      	ldr	r3, [pc, #392]	; (8000c40 <main+0x7c0>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
			break;
 8000aba:	e063      	b.n	8000b84 <main+0x704>

		case 4:
			LCD_Cursor(0, 0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fb44 	bl	800014c <LCD_Cursor>
			LCD_String("  RUNNING TIME  ");
 8000ac4:	485f      	ldr	r0, [pc, #380]	; (8000c44 <main+0x7c4>)
 8000ac6:	f7ff fbf1 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 8000aca:	2107      	movs	r1, #7
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fb3d 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 8000ad2:	4854      	ldr	r0, [pc, #336]	; (8000c24 <main+0x7a4>)
 8000ad4:	f7ff fbea 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000ad8:	2108      	movs	r1, #8
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fb36 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000ae0:	4855      	ldr	r0, [pc, #340]	; (8000c38 <main+0x7b8>)
 8000ae2:	f7ff fbe3 	bl	80002ac <LCD_String>
			inc_running = 1;
 8000ae6:	4b58      	ldr	r3, [pc, #352]	; (8000c48 <main+0x7c8>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
			break;
 8000aec:	e04a      	b.n	8000b84 <main+0x704>

		case 5:
			LCD_Cursor(0, 0);
 8000aee:	2100      	movs	r1, #0
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff fb2b 	bl	800014c <LCD_Cursor>
			LCD_String("  RUNNING TIME  ");
 8000af6:	4853      	ldr	r0, [pc, #332]	; (8000c44 <main+0x7c4>)
 8000af8:	f7ff fbd8 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 8000afc:	2106      	movs	r1, #6
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fb24 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 8000b04:	4847      	ldr	r0, [pc, #284]	; (8000c24 <main+0x7a4>)
 8000b06:	f7ff fbd1 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 9);
 8000b0a:	2109      	movs	r1, #9
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff fb1d 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000b12:	4849      	ldr	r0, [pc, #292]	; (8000c38 <main+0x7b8>)
 8000b14:	f7ff fbca 	bl	80002ac <LCD_String>
			aux_decel = 1;
 8000b18:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <main+0x77c>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
			break;
 8000b1e:	e031      	b.n	8000b84 <main+0x704>

		case 6:
			LCD_Cursor(0, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fb12 	bl	800014c <LCD_Cursor>
			LCD_String("   DECEL TIME   ");
 8000b28:	4848      	ldr	r0, [pc, #288]	; (8000c4c <main+0x7cc>)
 8000b2a:	f7ff fbbf 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 8000b2e:	2107      	movs	r1, #7
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff fb0b 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000b36:	4833      	ldr	r0, [pc, #204]	; (8000c04 <main+0x784>)
 8000b38:	f7ff fbb8 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fb04 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000b44:	483c      	ldr	r0, [pc, #240]	; (8000c38 <main+0x7b8>)
 8000b46:	f7ff fbb1 	bl	80002ac <LCD_String>
			inc_decel = 1;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <main+0x770>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
			break;
 8000b50:	e018      	b.n	8000b84 <main+0x704>

		case 7:
			LCD_Cursor(0, 0);
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff faf9 	bl	800014c <LCD_Cursor>
			LCD_String("   DECEL TIME   ");
 8000b5a:	483c      	ldr	r0, [pc, #240]	; (8000c4c <main+0x7cc>)
 8000b5c:	f7ff fba6 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 8000b60:	2106      	movs	r1, #6
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff faf2 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000b68:	4826      	ldr	r0, [pc, #152]	; (8000c04 <main+0x784>)
 8000b6a:	f7ff fb9f 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000b6e:	2108      	movs	r1, #8
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff faeb 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000b76:	4830      	ldr	r0, [pc, #192]	; (8000c38 <main+0x7b8>)
 8000b78:	f7ff fb98 	bl	80002ac <LCD_String>
			config_finish = 1;
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <main+0x78c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
			break;
 8000b82:	bf00      	nop
		}

		switch (start)
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <main+0x790>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	f63f aca2 	bhi.w	80004d4 <main+0x54>
 8000b90:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <main+0x718>)
 8000b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b96:	bf00      	nop
 8000b98:	08000bad 	.word	0x08000bad
 8000b9c:	08000bcb 	.word	0x08000bcb
 8000ba0:	08000c59 	.word	0x08000c59
 8000ba4:	08000d7b 	.word	0x08000d7b
 8000ba8:	08000da5 	.word	0x08000da5
		{

		case 1:
			LCD_Cursor(0, 2);
 8000bac:	2102      	movs	r1, #2
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff facc 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000bb4:	481c      	ldr	r0, [pc, #112]	; (8000c28 <main+0x7a8>)
 8000bb6:	f7ff fb79 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff fac5 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000bc2:	4823      	ldr	r0, [pc, #140]	; (8000c50 <main+0x7d0>)
 8000bc4:	f7ff fb72 	bl	80002ac <LCD_String>
			break;
 8000bc8:	e17f      	b.n	8000eca <main+0xa4a>

		case 2:
			LCD_Cursor(0, 2);
 8000bca:	2102      	movs	r1, #2
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fabd 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000bd2:	4815      	ldr	r0, [pc, #84]	; (8000c28 <main+0x7a8>)
 8000bd4:	f7ff fb6a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff fab6 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000be0:	481b      	ldr	r0, [pc, #108]	; (8000c50 <main+0x7d0>)
 8000be2:	f7ff fb63 	bl	80002ac <LCD_String>
			aux_start = 1;
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <main+0x7d4>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
			break;
 8000bec:	e16d      	b.n	8000eca <main+0xa4a>
 8000bee:	bf00      	nop
 8000bf0:	200000cc 	.word	0x200000cc
 8000bf4:	40010c00 	.word	0x40010c00
 8000bf8:	200000ca 	.word	0x200000ca
 8000bfc:	200000c6 	.word	0x200000c6
 8000c00:	0800378c 	.word	0x0800378c
 8000c04:	200000f0 	.word	0x200000f0
 8000c08:	200000c0 	.word	0x200000c0
 8000c0c:	200000c7 	.word	0x200000c7
 8000c10:	200000c1 	.word	0x200000c1
 8000c14:	200000ce 	.word	0x200000ce
 8000c18:	200000c8 	.word	0x200000c8
 8000c1c:	200000d0 	.word	0x200000d0
 8000c20:	200000c9 	.word	0x200000c9
 8000c24:	200000e0 	.word	0x200000e0
 8000c28:	0800376c 	.word	0x0800376c
 8000c2c:	08003790 	.word	0x08003790
 8000c30:	200000c2 	.word	0x200000c2
 8000c34:	080037a0 	.word	0x080037a0
 8000c38:	080037b4 	.word	0x080037b4
 8000c3c:	200000c4 	.word	0x200000c4
 8000c40:	200000c5 	.word	0x200000c5
 8000c44:	080037b8 	.word	0x080037b8
 8000c48:	200000cb 	.word	0x200000cb
 8000c4c:	080037cc 	.word	0x080037cc
 8000c50:	080037e0 	.word	0x080037e0
 8000c54:	200000c3 	.word	0x200000c3

		case 3:
			LCD_Cursor(0, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fa76 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    ACCEL");
 8000c60:	489b      	ldr	r0, [pc, #620]	; (8000ed0 <main+0xa50>)
 8000c62:	f7ff fb23 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fa6f 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000");
 8000c6e:	4899      	ldr	r0, [pc, #612]	; (8000ed4 <main+0xa54>)
 8000c70:	f7ff fb1c 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 11);
 8000c74:	210b      	movs	r1, #11
 8000c76:	2001      	movs	r0, #1
 8000c78:	f7ff fa68 	bl	800014c <LCD_Cursor>
			LCD_String("t:");
 8000c7c:	4896      	ldr	r0, [pc, #600]	; (8000ed8 <main+0xa58>)
 8000c7e:	f7ff fb15 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 13);
 8000c82:	210d      	movs	r1, #13
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fa61 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 8000c8a:	4894      	ldr	r0, [pc, #592]	; (8000edc <main+0xa5c>)
 8000c8c:	f7ff fb0e 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 15);
 8000c90:	210f      	movs	r1, #15
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff fa5a 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000c98:	4891      	ldr	r0, [pc, #580]	; (8000ee0 <main+0xa60>)
 8000c9a:	f7ff fb07 	bl	80002ac <LCD_String>
			HAL_Delay(a_inc * 1000);
 8000c9e:	4b91      	ldr	r3, [pc, #580]	; (8000ee4 <main+0xa64>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	fb02 f303 	mul.w	r3, r2, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fc4d 	bl	800154c <HAL_Delay>
			LCD_Clear();
 8000cb2:	f7ff fbc7 	bl	8000444 <LCD_Clear>

			LCD_Cursor(0, 0);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fa47 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:  RUNNING");
 8000cbe:	488a      	ldr	r0, [pc, #552]	; (8000ee8 <main+0xa68>)
 8000cc0:	f7ff faf4 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff fa40 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000");
 8000ccc:	4881      	ldr	r0, [pc, #516]	; (8000ed4 <main+0xa54>)
 8000cce:	f7ff faed 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 10);
 8000cd2:	210a      	movs	r1, #10
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fa39 	bl	800014c <LCD_Cursor>
			LCD_String("t:");
 8000cda:	487f      	ldr	r0, [pc, #508]	; (8000ed8 <main+0xa58>)
 8000cdc:	f7ff fae6 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 12);
 8000ce0:	210c      	movs	r1, #12
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fa32 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 8000ce8:	4880      	ldr	r0, [pc, #512]	; (8000eec <main+0xa6c>)
 8000cea:	f7ff fadf 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 15);
 8000cee:	210f      	movs	r1, #15
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff fa2b 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000cf6:	487a      	ldr	r0, [pc, #488]	; (8000ee0 <main+0xa60>)
 8000cf8:	f7ff fad8 	bl	80002ac <LCD_String>
			HAL_Delay(r_inc * 1000);
 8000cfc:	4b7c      	ldr	r3, [pc, #496]	; (8000ef0 <main+0xa70>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fc1e 	bl	800154c <HAL_Delay>
			LCD_Clear();
 8000d10:	f7ff fb98 	bl	8000444 <LCD_Clear>

			LCD_Cursor(0, 0);
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fa18 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    DECEL");
 8000d1c:	4875      	ldr	r0, [pc, #468]	; (8000ef4 <main+0xa74>)
 8000d1e:	f7ff fac5 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000d22:	2100      	movs	r1, #0
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fa11 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000");
 8000d2a:	486a      	ldr	r0, [pc, #424]	; (8000ed4 <main+0xa54>)
 8000d2c:	f7ff fabe 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 11);
 8000d30:	210b      	movs	r1, #11
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fa0a 	bl	800014c <LCD_Cursor>
			LCD_String("t:");
 8000d38:	4867      	ldr	r0, [pc, #412]	; (8000ed8 <main+0xa58>)
 8000d3a:	f7ff fab7 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 13);
 8000d3e:	210d      	movs	r1, #13
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fa03 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000d46:	486c      	ldr	r0, [pc, #432]	; (8000ef8 <main+0xa78>)
 8000d48:	f7ff fab0 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 15);
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff f9fc 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000d54:	4862      	ldr	r0, [pc, #392]	; (8000ee0 <main+0xa60>)
 8000d56:	f7ff faa9 	bl	80002ac <LCD_String>
			HAL_Delay(d_inc * 1000);
 8000d5a:	4b68      	ldr	r3, [pc, #416]	; (8000efc <main+0xa7c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d64:	fb02 f303 	mul.w	r3, r2, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fbef 	bl	800154c <HAL_Delay>
			LCD_Clear();
 8000d6e:	f7ff fb69 	bl	8000444 <LCD_Clear>
			start = 1;
 8000d72:	4b63      	ldr	r3, [pc, #396]	; (8000f00 <main+0xa80>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
			break;
 8000d78:	e0a7      	b.n	8000eca <main+0xa4a>

		case 4:
			LCD_Cursor(0, 2);
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff f9e5 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000d82:	4860      	ldr	r0, [pc, #384]	; (8000f04 <main+0xa84>)
 8000d84:	f7ff fa92 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff f9de 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000d90:	485d      	ldr	r0, [pc, #372]	; (8000f08 <main+0xa88>)
 8000d92:	f7ff fa8b 	bl	80002ac <LCD_String>
			config_init = 1;
 8000d96:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <main+0xa8c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
			config_finish = 0;
 8000d9c:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <main+0xa90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
			break;
 8000da2:	e092      	b.n	8000eca <main+0xa4a>

		case 5:
			LCD_Cursor(0, 0);
 8000da4:	2100      	movs	r1, #0
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff f9d0 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    ACCEL");
 8000dac:	4848      	ldr	r0, [pc, #288]	; (8000ed0 <main+0xa50>)
 8000dae:	f7ff fa7d 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000db2:	2100      	movs	r1, #0
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff f9c9 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000");
 8000dba:	4846      	ldr	r0, [pc, #280]	; (8000ed4 <main+0xa54>)
 8000dbc:	f7ff fa76 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 11);
 8000dc0:	210b      	movs	r1, #11
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff f9c2 	bl	800014c <LCD_Cursor>
			LCD_String("t:");
 8000dc8:	4843      	ldr	r0, [pc, #268]	; (8000ed8 <main+0xa58>)
 8000dca:	f7ff fa6f 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 13);
 8000dce:	210d      	movs	r1, #13
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff f9bb 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 8000dd6:	4841      	ldr	r0, [pc, #260]	; (8000edc <main+0xa5c>)
 8000dd8:	f7ff fa68 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 15);
 8000ddc:	210f      	movs	r1, #15
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff f9b4 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000de4:	483e      	ldr	r0, [pc, #248]	; (8000ee0 <main+0xa60>)
 8000de6:	f7ff fa61 	bl	80002ac <LCD_String>
			HAL_Delay(a_inc * 1000);
 8000dea:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <main+0xa64>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fba7 	bl	800154c <HAL_Delay>
			LCD_Clear();
 8000dfe:	f7ff fb21 	bl	8000444 <LCD_Clear>

			LCD_Cursor(0, 0);
 8000e02:	2100      	movs	r1, #0
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff f9a1 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:  RUNNING");
 8000e0a:	4837      	ldr	r0, [pc, #220]	; (8000ee8 <main+0xa68>)
 8000e0c:	f7ff fa4e 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff f99a 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000");
 8000e18:	482e      	ldr	r0, [pc, #184]	; (8000ed4 <main+0xa54>)
 8000e1a:	f7ff fa47 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 10);
 8000e1e:	210a      	movs	r1, #10
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff f993 	bl	800014c <LCD_Cursor>
			LCD_String("t:");
 8000e26:	482c      	ldr	r0, [pc, #176]	; (8000ed8 <main+0xa58>)
 8000e28:	f7ff fa40 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 12);
 8000e2c:	210c      	movs	r1, #12
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f7ff f98c 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 8000e34:	482d      	ldr	r0, [pc, #180]	; (8000eec <main+0xa6c>)
 8000e36:	f7ff fa39 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 15);
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff f985 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000e42:	4827      	ldr	r0, [pc, #156]	; (8000ee0 <main+0xa60>)
 8000e44:	f7ff fa32 	bl	80002ac <LCD_String>
			HAL_Delay(r_inc * 1000);
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <main+0xa70>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 fb78 	bl	800154c <HAL_Delay>
			LCD_Clear();
 8000e5c:	f7ff faf2 	bl	8000444 <LCD_Clear>

			LCD_Cursor(0, 0);
 8000e60:	2100      	movs	r1, #0
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff f972 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    DECEL");
 8000e68:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <main+0xa74>)
 8000e6a:	f7ff fa1f 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff f96b 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000");
 8000e76:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <main+0xa54>)
 8000e78:	f7ff fa18 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 11);
 8000e7c:	210b      	movs	r1, #11
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff f964 	bl	800014c <LCD_Cursor>
			LCD_String("t:");
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <main+0xa58>)
 8000e86:	f7ff fa11 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 13);
 8000e8a:	210d      	movs	r1, #13
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff f95d 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000e92:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <main+0xa78>)
 8000e94:	f7ff fa0a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 15);
 8000e98:	210f      	movs	r1, #15
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f7ff f956 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000ea0:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <main+0xa60>)
 8000ea2:	f7ff fa03 	bl	80002ac <LCD_String>
			HAL_Delay(d_inc * 1000);
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <main+0xa7c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb0:	fb02 f303 	mul.w	r3, r2, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fb49 	bl	800154c <HAL_Delay>
			LCD_Clear();
 8000eba:	f7ff fac3 	bl	8000444 <LCD_Clear>
			start = 4;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <main+0xa80>)
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	701a      	strb	r2, [r3, #0]
			break;
 8000ec4:	bf00      	nop
 8000ec6:	f7ff bb05 	b.w	80004d4 <main+0x54>
		if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000eca:	f7ff bb03 	b.w	80004d4 <main+0x54>
 8000ece:	bf00      	nop
 8000ed0:	080037f4 	.word	0x080037f4
 8000ed4:	08003808 	.word	0x08003808
 8000ed8:	08003814 	.word	0x08003814
 8000edc:	200000d0 	.word	0x200000d0
 8000ee0:	080037b4 	.word	0x080037b4
 8000ee4:	200000c8 	.word	0x200000c8
 8000ee8:	08003818 	.word	0x08003818
 8000eec:	200000e0 	.word	0x200000e0
 8000ef0:	200000c9 	.word	0x200000c9
 8000ef4:	0800382c 	.word	0x0800382c
 8000ef8:	200000f0 	.word	0x200000f0
 8000efc:	200000ca 	.word	0x200000ca
 8000f00:	200000c1 	.word	0x200000c1
 8000f04:	0800376c 	.word	0x0800376c
 8000f08:	080037e0 	.word	0x080037e0
 8000f0c:	200000ce 	.word	0x200000ce
 8000f10:	200000c7 	.word	0x200000c7

08000f14 <Buzzer_Teclas>:

    /* USER CODE BEGIN 3 */
  }
}
	void Buzzer_Teclas()
	{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <Buzzer_Teclas+0x28>)
 8000f1e:	f000 fdb0 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000f22:	2032      	movs	r0, #50	; 0x32
 8000f24:	f000 fb12 	bl	800154c <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <Buzzer_Teclas+0x28>)
 8000f2e:	f000 fda8 	bl	8001a82 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000f32:	2032      	movs	r0, #50	; 0x32
 8000f34:	f000 fb0a 	bl	800154c <HAL_Delay>
	}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40010800 	.word	0x40010800

08000f40 <INC_Boucing>:

	void INC_Boucing()
	{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000f44:	200a      	movs	r0, #10
 8000f46:	f000 fb01 	bl	800154c <HAL_Delay>
		while (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin));
 8000f4a:	bf00      	nop
 8000f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <INC_Boucing+0x24>)
 8000f52:	f000 fd7f 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f7      	bne.n	8000f4c <INC_Boucing+0xc>
	}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40010c00 	.word	0x40010c00

08000f68 <DEC_Boucing>:
	void DEC_Boucing()
	{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f000 faed 	bl	800154c <HAL_Delay>
		while (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin));
 8000f72:	bf00      	nop
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <DEC_Boucing+0x20>)
 8000f78:	f000 fd6c 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f8      	bne.n	8000f74 <DEC_Boucing+0xc>
	}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40010c00 	.word	0x40010c00

08000f8c <ENTER_Boucing>:
	void ENTER_Boucing()
	{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f000 fadb 	bl	800154c <HAL_Delay>
		while (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin));
 8000f96:	bf00      	nop
 8000f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <ENTER_Boucing+0x24>)
 8000f9e:	f000 fd59 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f7      	bne.n	8000f98 <ENTER_Boucing+0xc>
	}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40010c00 	.word	0x40010c00

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b090      	sub	sp, #64	; 0x40
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	2228      	movs	r2, #40	; 0x28
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 ff34 	bl	8002e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ff2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fd59 	bl	8001ab4 <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001008:	f000 f930 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2302      	movs	r3, #2
 8001012:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2102      	movs	r1, #2
 8001026:	4618      	mov	r0, r3
 8001028:	f000 ffc6 	bl	8001fb8 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001032:	f000 f91b 	bl	800126c <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3740      	adds	r7, #64	; 0x40
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001072:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_TIM2_Init+0xe8>)
 800107a:	2247      	movs	r2, #71	; 0x47
 800107c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001086:	f240 32e7 	movw	r2, #999	; 0x3e7
 800108a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_TIM2_Init+0xe8>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_TIM2_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001098:	4823      	ldr	r0, [pc, #140]	; (8001128 <MX_TIM2_Init+0xe8>)
 800109a:	f001 f8e9 	bl	8002270 <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010a4:	f000 f8e2 	bl	800126c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b2:	4619      	mov	r1, r3
 80010b4:	481c      	ldr	r0, [pc, #112]	; (8001128 <MX_TIM2_Init+0xe8>)
 80010b6:	f001 fae1 	bl	800267c <HAL_TIM_ConfigClockSource>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010c0:	f000 f8d4 	bl	800126c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c4:	4818      	ldr	r0, [pc, #96]	; (8001128 <MX_TIM2_Init+0xe8>)
 80010c6:	f001 f922 	bl	800230e <HAL_TIM_PWM_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010d0:	f000 f8cc 	bl	800126c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4619      	mov	r1, r3
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_TIM2_Init+0xe8>)
 80010e4:	f001 fe2c 	bl	8002d40 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010ee:	f000 f8bd 	bl	800126c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f2:	2360      	movs	r3, #96	; 0x60
 80010f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2208      	movs	r2, #8
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <MX_TIM2_Init+0xe8>)
 800110a:	f001 f9f5 	bl	80024f8 <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001114:	f000 f8aa 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_TIM2_Init+0xe8>)
 800111a:	f000 f8fb 	bl	8001314 <HAL_TIM_MspPostInit>

}
 800111e:	bf00      	nop
 8001120:	3738      	adds	r7, #56	; 0x38
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000078 	.word	0x20000078

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <MX_GPIO_Init+0x12c>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a44      	ldr	r2, [pc, #272]	; (8001258 <MX_GPIO_Init+0x12c>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b42      	ldr	r3, [pc, #264]	; (8001258 <MX_GPIO_Init+0x12c>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <MX_GPIO_Init+0x12c>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a3e      	ldr	r2, [pc, #248]	; (8001258 <MX_GPIO_Init+0x12c>)
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <MX_GPIO_Init+0x12c>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b39      	ldr	r3, [pc, #228]	; (8001258 <MX_GPIO_Init+0x12c>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a38      	ldr	r2, [pc, #224]	; (8001258 <MX_GPIO_Init+0x12c>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <MX_GPIO_Init+0x12c>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <MX_GPIO_Init+0x12c>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a32      	ldr	r2, [pc, #200]	; (8001258 <MX_GPIO_Init+0x12c>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <MX_GPIO_Init+0x12c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a6:	482d      	ldr	r0, [pc, #180]	; (800125c <MX_GPIO_Init+0x130>)
 80011a8:	f000 fc6b 	bl	8001a82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 80011ac:	2200      	movs	r2, #0
 80011ae:	213b      	movs	r1, #59	; 0x3b
 80011b0:	482b      	ldr	r0, [pc, #172]	; (8001260 <MX_GPIO_Init+0x134>)
 80011b2:	f000 fc66 	bl	8001a82 <HAL_GPIO_WritePin>
                          |D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f241 0108 	movw	r1, #4104	; 0x1008
 80011bc:	4829      	ldr	r0, [pc, #164]	; (8001264 <MX_GPIO_Init+0x138>)
 80011be:	f000 fc60 	bl	8001a82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4820      	ldr	r0, [pc, #128]	; (800125c <MX_GPIO_Init+0x130>)
 80011dc:	f000 fabe 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin BUZZER_Pin RS_Pin D4_Pin
                           D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 80011e0:	233b      	movs	r3, #59	; 0x3b
 80011e2:	613b      	str	r3, [r7, #16]
                          |D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	481a      	ldr	r0, [pc, #104]	; (8001260 <MX_GPIO_Init+0x134>)
 80011f8:	f000 fab0 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin;
 80011fc:	f241 0308 	movw	r3, #4104	; 0x1008
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4813      	ldr	r0, [pc, #76]	; (8001264 <MX_GPIO_Init+0x138>)
 8001216:	f000 faa1 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : TACHOMETER_Pin */
  GPIO_InitStruct.Pin = TACHOMETER_Pin;
 800121a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_GPIO_Init+0x13c>)
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TACHOMETER_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_GPIO_Init+0x138>)
 8001230:	f000 fa94 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : DEC_Pin ENTER_Pin INC_Pin */
  GPIO_InitStruct.Pin = DEC_Pin|ENTER_Pin|INC_Pin;
 8001234:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_GPIO_Init+0x138>)
 800124a:	f000 fa87 	bl	800175c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40011000 	.word	0x40011000
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00
 8001268:	10110000 	.word	0x10110000

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_MspInit+0x5c>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <HAL_MspInit+0x5c>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_MspInit+0x5c>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_MspInit+0x5c>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_MspInit+0x5c>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_MspInit+0x5c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_MspInit+0x60>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_MspInit+0x60>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000

080012dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ec:	d10b      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_TIM_Base_MspInit+0x34>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_TIM_Base_MspInit+0x34>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_TIM_Base_MspInit+0x34>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001332:	d117      	bne.n	8001364 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_TIM_MspPostInit+0x58>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <HAL_TIM_MspPostInit+0x58>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_TIM_MspPostInit+0x58>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_Pin;
 800134c:	2304      	movs	r3, #4
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2302      	movs	r3, #2
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4804      	ldr	r0, [pc, #16]	; (8001370 <HAL_TIM_MspPostInit+0x5c>)
 8001360:	f000 f9fc 	bl	800175c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40010800 	.word	0x40010800

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 f8ab 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f001 fd24 	bl	8002e40 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20002800 	.word	0x20002800
 8001424:	00000400 	.word	0x00000400
 8001428:	20000100 	.word	0x20000100
 800142c:	20000250 	.word	0x20000250

08001430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800143c:	f7ff fff8 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001442:	490c      	ldr	r1, [pc, #48]	; (8001474 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001458:	4c09      	ldr	r4, [pc, #36]	; (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001466:	f001 fcf1 	bl	8002e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146a:	f7ff f809 	bl	8000480 <main>
  bx lr
 800146e:	4770      	bx	lr
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001478:	080038a0 	.word	0x080038a0
  ldr r2, =_sbss
 800147c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001480:	20000250 	.word	0x20000250

08001484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_2_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_Init+0x28>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_Init+0x28>)
 8001492:	f043 0310 	orr.w	r3, r3, #16
 8001496:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f92b 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149e:	200f      	movs	r0, #15
 80014a0:	f000 f808 	bl	80014b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a4:	f7ff fee8 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40022000 	.word	0x40022000

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_InitTick+0x54>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x58>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f935 	bl	8001742 <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00e      	b.n	8001500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d80a      	bhi.n	80014fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e8:	2200      	movs	r2, #0
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f000 f90b 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_InitTick+0x5c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000000 	.word	0x20000000
 800150c:	20000008 	.word	0x20000008
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_IncTick+0x1c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_IncTick+0x20>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <HAL_IncTick+0x20>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000008 	.word	0x20000008
 8001534:	20000104 	.word	0x20000104

08001538 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <HAL_GetTick+0x10>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000104 	.word	0x20000104

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff fff0 	bl	8001538 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffe0 	bl	8001538 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff90 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff49 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff5e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff90 	bl	800164c <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5f 	bl	80015f8 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffb0 	bl	80016b0 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b08b      	sub	sp, #44	; 0x2c
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e161      	b.n	8001a34 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001770:	2201      	movs	r2, #1
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	429a      	cmp	r2, r3
 800178a:	f040 8150 	bne.w	8001a2e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a97      	ldr	r2, [pc, #604]	; (80019f0 <HAL_GPIO_Init+0x294>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d05e      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 8001798:	4a95      	ldr	r2, [pc, #596]	; (80019f0 <HAL_GPIO_Init+0x294>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d875      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 800179e:	4a95      	ldr	r2, [pc, #596]	; (80019f4 <HAL_GPIO_Init+0x298>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d058      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017a4:	4a93      	ldr	r2, [pc, #588]	; (80019f4 <HAL_GPIO_Init+0x298>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d86f      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017aa:	4a93      	ldr	r2, [pc, #588]	; (80019f8 <HAL_GPIO_Init+0x29c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d052      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017b0:	4a91      	ldr	r2, [pc, #580]	; (80019f8 <HAL_GPIO_Init+0x29c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d869      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017b6:	4a91      	ldr	r2, [pc, #580]	; (80019fc <HAL_GPIO_Init+0x2a0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04c      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017bc:	4a8f      	ldr	r2, [pc, #572]	; (80019fc <HAL_GPIO_Init+0x2a0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d863      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017c2:	4a8f      	ldr	r2, [pc, #572]	; (8001a00 <HAL_GPIO_Init+0x2a4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d046      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017c8:	4a8d      	ldr	r2, [pc, #564]	; (8001a00 <HAL_GPIO_Init+0x2a4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d85d      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017ce:	2b12      	cmp	r3, #18
 80017d0:	d82a      	bhi.n	8001828 <HAL_GPIO_Init+0xcc>
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d859      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <HAL_GPIO_Init+0x80>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	08001857 	.word	0x08001857
 80017e0:	08001831 	.word	0x08001831
 80017e4:	08001843 	.word	0x08001843
 80017e8:	08001885 	.word	0x08001885
 80017ec:	0800188b 	.word	0x0800188b
 80017f0:	0800188b 	.word	0x0800188b
 80017f4:	0800188b 	.word	0x0800188b
 80017f8:	0800188b 	.word	0x0800188b
 80017fc:	0800188b 	.word	0x0800188b
 8001800:	0800188b 	.word	0x0800188b
 8001804:	0800188b 	.word	0x0800188b
 8001808:	0800188b 	.word	0x0800188b
 800180c:	0800188b 	.word	0x0800188b
 8001810:	0800188b 	.word	0x0800188b
 8001814:	0800188b 	.word	0x0800188b
 8001818:	0800188b 	.word	0x0800188b
 800181c:	0800188b 	.word	0x0800188b
 8001820:	08001839 	.word	0x08001839
 8001824:	0800184d 	.word	0x0800184d
 8001828:	4a76      	ldr	r2, [pc, #472]	; (8001a04 <HAL_GPIO_Init+0x2a8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182e:	e02c      	b.n	800188a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e029      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	3304      	adds	r3, #4
 800183e:	623b      	str	r3, [r7, #32]
          break;
 8001840:	e024      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	3308      	adds	r3, #8
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e01f      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	330c      	adds	r3, #12
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e01a      	b.n	800188c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185e:	2304      	movs	r3, #4
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e013      	b.n	800188c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	611a      	str	r2, [r3, #16]
          break;
 8001876:	e009      	b.n	800188c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	615a      	str	r2, [r3, #20]
          break;
 8001882:	e003      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x130>
          break;
 800188a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2bff      	cmp	r3, #255	; 0xff
 8001890:	d801      	bhi.n	8001896 <HAL_GPIO_Init+0x13a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	e001      	b.n	800189a <HAL_GPIO_Init+0x13e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3304      	adds	r3, #4
 800189a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2bff      	cmp	r3, #255	; 0xff
 80018a0:	d802      	bhi.n	80018a8 <HAL_GPIO_Init+0x14c>
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x152>
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3b08      	subs	r3, #8
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	210f      	movs	r1, #15
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	6a39      	ldr	r1, [r7, #32]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	431a      	orrs	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80a9 	beq.w	8001a2e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_GPIO_Init+0x2ac>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <HAL_GPIO_Init+0x2ac>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_GPIO_Init+0x2ac>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f4:	4a45      	ldr	r2, [pc, #276]	; (8001a0c <HAL_GPIO_Init+0x2b0>)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a3d      	ldr	r2, [pc, #244]	; (8001a10 <HAL_GPIO_Init+0x2b4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00d      	beq.n	800193c <HAL_GPIO_Init+0x1e0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <HAL_GPIO_Init+0x2b8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d007      	beq.n	8001938 <HAL_GPIO_Init+0x1dc>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3b      	ldr	r2, [pc, #236]	; (8001a18 <HAL_GPIO_Init+0x2bc>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_GPIO_Init+0x1d8>
 8001930:	2302      	movs	r3, #2
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x1e2>
 8001934:	2303      	movs	r3, #3
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x1e2>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x1e2>
 800193c:	2300      	movs	r3, #0
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800194e:	492f      	ldr	r1, [pc, #188]	; (8001a0c <HAL_GPIO_Init+0x2b0>)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	492b      	ldr	r1, [pc, #172]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	4927      	ldr	r1, [pc, #156]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 8001980:	4013      	ands	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4921      	ldr	r1, [pc, #132]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	491d      	ldr	r1, [pc, #116]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4917      	ldr	r1, [pc, #92]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4913      	ldr	r1, [pc, #76]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01f      	beq.n	8001a20 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	490d      	ldr	r1, [pc, #52]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e01f      	b.n	8001a2e <HAL_GPIO_Init+0x2d2>
 80019ee:	bf00      	nop
 80019f0:	10320000 	.word	0x10320000
 80019f4:	10310000 	.word	0x10310000
 80019f8:	10220000 	.word	0x10220000
 80019fc:	10210000 	.word	0x10210000
 8001a00:	10120000 	.word	0x10120000
 8001a04:	10110000 	.word	0x10110000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40010800 	.word	0x40010800
 8001a14:	40010c00 	.word	0x40010c00
 8001a18:	40011000 	.word	0x40011000
 8001a1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_GPIO_Init+0x2f4>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	4909      	ldr	r1, [pc, #36]	; (8001a50 <HAL_GPIO_Init+0x2f4>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	3301      	adds	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f47f ae96 	bne.w	8001770 <HAL_GPIO_Init+0x14>
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	372c      	adds	r7, #44	; 0x2c
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e001      	b.n	8001a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	807b      	strh	r3, [r7, #2]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a92:	787b      	ldrb	r3, [r7, #1]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a98:	887a      	ldrh	r2, [r7, #2]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a9e:	e003      	b.n	8001aa8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	041a      	lsls	r2, r3, #16
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	611a      	str	r2, [r3, #16]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e272      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8087 	beq.w	8001be2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad4:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d00c      	beq.n	8001afa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae0:	4b8f      	ldr	r3, [pc, #572]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d112      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5e>
 8001aec:	4b8c      	ldr	r3, [pc, #560]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d10b      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afa:	4b89      	ldr	r3, [pc, #548]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06c      	beq.n	8001be0 <HAL_RCC_OscConfig+0x12c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d168      	bne.n	8001be0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e24c      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x76>
 8001b1c:	4b80      	ldr	r3, [pc, #512]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a7f      	ldr	r2, [pc, #508]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e02e      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x98>
 8001b32:	4b7b      	ldr	r3, [pc, #492]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7a      	ldr	r2, [pc, #488]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b78      	ldr	r3, [pc, #480]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a77      	ldr	r2, [pc, #476]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e01d      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0xbc>
 8001b56:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a71      	ldr	r2, [pc, #452]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b6f      	ldr	r3, [pc, #444]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6e      	ldr	r2, [pc, #440]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b70:	4b6b      	ldr	r3, [pc, #428]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6a      	ldr	r2, [pc, #424]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a67      	ldr	r2, [pc, #412]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fcd2 	bl	8001538 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fcce 	bl	8001538 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e200      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b5d      	ldr	r3, [pc, #372]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0xe4>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fcbe 	bl	8001538 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fcba 	bl	8001538 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1ec      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x10c>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bee:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bfa:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x18c>
 8001c06:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e1c0      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4939      	ldr	r1, [pc, #228]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	e03a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fc73 	bl	8001538 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c56:	f7ff fc6f 	bl	8001538 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1a1      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4927      	ldr	r1, [pc, #156]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fc52 	bl	8001538 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c98:	f7ff fc4e 	bl	8001538 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e180      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03a      	beq.n	8001d38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d019      	beq.n	8001cfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fc32 	bl	8001538 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fc2e 	bl	8001538 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e160      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f000 fa9c 	bl	8002234 <RCC_Delay>
 8001cfc:	e01c      	b.n	8001d38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7ff fc18 	bl	8001538 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0a:	e00f      	b.n	8001d2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fc14 	bl	8001538 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d908      	bls.n	8001d2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e146      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	42420000 	.word	0x42420000
 8001d28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b92      	ldr	r3, [pc, #584]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e9      	bne.n	8001d0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a6 	beq.w	8001e92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b8b      	ldr	r3, [pc, #556]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a87      	ldr	r2, [pc, #540]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b85      	ldr	r3, [pc, #532]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	4b82      	ldr	r3, [pc, #520]	; (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d118      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7e:	4b7f      	ldr	r3, [pc, #508]	; (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7e      	ldr	r2, [pc, #504]	; (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fbd5 	bl	8001538 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d92:	f7ff fbd1 	bl	8001538 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b64      	cmp	r3, #100	; 0x64
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e103      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	4b75      	ldr	r3, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x312>
 8001db8:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a6e      	ldr	r2, [pc, #440]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e02d      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x334>
 8001dce:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a69      	ldr	r2, [pc, #420]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6213      	str	r3, [r2, #32]
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a66      	ldr	r2, [pc, #408]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	e01c      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d10c      	bne.n	8001e0a <HAL_RCC_OscConfig+0x356>
 8001df0:	4b61      	ldr	r3, [pc, #388]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4a60      	ldr	r2, [pc, #384]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6213      	str	r3, [r2, #32]
 8001dfc:	4b5e      	ldr	r3, [pc, #376]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a5d      	ldr	r2, [pc, #372]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a5a      	ldr	r2, [pc, #360]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a57      	ldr	r2, [pc, #348]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d015      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fb85 	bl	8001538 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff fb81 	bl	8001538 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0b1      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ee      	beq.n	8001e32 <HAL_RCC_OscConfig+0x37e>
 8001e54:	e014      	b.n	8001e80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb6f 	bl	8001538 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fb6b 	bl	8001538 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e09b      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e74:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ee      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e86:	4b3c      	ldr	r3, [pc, #240]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a3b      	ldr	r2, [pc, #236]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8087 	beq.w	8001faa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d061      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d146      	bne.n	8001f3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fb3f 	bl	8001538 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff fb3b 	bl	8001538 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e06d      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4921      	ldr	r1, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a19      	ldr	r1, [r3, #32]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	491b      	ldr	r1, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7ff fb0f 	bl	8001538 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7ff fb0b 	bl	8001538 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e03d      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x46a>
 8001f3c:	e035      	b.n	8001faa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff faf8 	bl	8001538 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff faf4 	bl	8001538 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e026      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x498>
 8001f6a:	e01e      	b.n	8001faa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e019      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_OscConfig+0x500>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0d0      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4965      	ldr	r1, [pc, #404]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0b8      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800201e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800202c:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b50      	ldr	r3, [pc, #320]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	494d      	ldr	r1, [pc, #308]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d040      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d115      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07f      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e073      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e06b      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4936      	ldr	r1, [pc, #216]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff fa46 	bl	8001538 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7ff fa42 	bl	8001538 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e053      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 020c 	and.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1eb      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d210      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	4922      	ldr	r1, [pc, #136]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e032      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4916      	ldr	r1, [pc, #88]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	490e      	ldr	r1, [pc, #56]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002146:	f000 f821 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214a:	4602      	mov	r2, r0
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	490a      	ldr	r1, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1cc>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f9a4 	bl	80014b4 <HAL_InitTick>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	08003840 	.word	0x08003840
 8002184:	20000000 	.word	0x20000000
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x30>
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ba:	e027      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	e027      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	0c9b      	lsrs	r3, r3, #18
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d010      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_GetSysClockFreq+0x94>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0c5b      	lsrs	r3, r3, #17
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ee:	fb03 f202 	mul.w	r2, r3, r2
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e004      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002200:	fb02 f303 	mul.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	613b      	str	r3, [r7, #16]
      break;
 800220a:	e002      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 800220e:	613b      	str	r3, [r7, #16]
      break;
 8002210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002212:	693b      	ldr	r3, [r7, #16]
}
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	007a1200 	.word	0x007a1200
 8002228:	08003850 	.word	0x08003850
 800222c:	08003860 	.word	0x08003860
 8002230:	003d0900 	.word	0x003d0900

08002234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <RCC_Delay+0x34>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <RCC_Delay+0x38>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0a5b      	lsrs	r3, r3, #9
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002250:	bf00      	nop
  }
  while (Delay --);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	60fa      	str	r2, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f9      	bne.n	8002250 <RCC_Delay+0x1c>
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000000 	.word	0x20000000
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e041      	b.n	8002306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff f820 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3304      	adds	r3, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f000 faac 	bl	800280c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e041      	b.n	80023a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f839 	bl	80023ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f000 fa5d 	bl	800280c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_TIM_PWM_Start+0x24>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e022      	b.n	800242a <HAL_TIM_PWM_Start+0x6a>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d109      	bne.n	80023fe <HAL_TIM_PWM_Start+0x3e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	bf14      	ite	ne
 80023f6:	2301      	movne	r3, #1
 80023f8:	2300      	moveq	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e015      	b.n	800242a <HAL_TIM_PWM_Start+0x6a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d109      	bne.n	8002418 <HAL_TIM_PWM_Start+0x58>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	bf14      	ite	ne
 8002410:	2301      	movne	r3, #1
 8002412:	2300      	moveq	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e008      	b.n	800242a <HAL_TIM_PWM_Start+0x6a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e059      	b.n	80024e6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d104      	bne.n	8002442 <HAL_TIM_PWM_Start+0x82>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002440:	e013      	b.n	800246a <HAL_TIM_PWM_Start+0xaa>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d104      	bne.n	8002452 <HAL_TIM_PWM_Start+0x92>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002450:	e00b      	b.n	800246a <HAL_TIM_PWM_Start+0xaa>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d104      	bne.n	8002462 <HAL_TIM_PWM_Start+0xa2>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002460:	e003      	b.n	800246a <HAL_TIM_PWM_Start+0xaa>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fc40 	bl	8002cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <HAL_TIM_PWM_Start+0x130>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d107      	bne.n	8002492 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_TIM_PWM_Start+0x130>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d009      	beq.n	80024b0 <HAL_TIM_PWM_Start+0xf0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d004      	beq.n	80024b0 <HAL_TIM_PWM_Start+0xf0>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_TIM_PWM_Start+0x134>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d111      	bne.n	80024d4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d010      	beq.n	80024e4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d2:	e007      	b.n	80024e4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40000400 	.word	0x40000400

080024f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002512:	2302      	movs	r3, #2
 8002514:	e0ae      	b.n	8002674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b0c      	cmp	r3, #12
 8002522:	f200 809f 	bhi.w	8002664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	08002561 	.word	0x08002561
 8002530:	08002665 	.word	0x08002665
 8002534:	08002665 	.word	0x08002665
 8002538:	08002665 	.word	0x08002665
 800253c:	080025a1 	.word	0x080025a1
 8002540:	08002665 	.word	0x08002665
 8002544:	08002665 	.word	0x08002665
 8002548:	08002665 	.word	0x08002665
 800254c:	080025e3 	.word	0x080025e3
 8002550:	08002665 	.word	0x08002665
 8002554:	08002665 	.word	0x08002665
 8002558:	08002665 	.word	0x08002665
 800255c:	08002623 	.word	0x08002623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f9a8 	bl	80028bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0208 	orr.w	r2, r2, #8
 800257a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6999      	ldr	r1, [r3, #24]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	619a      	str	r2, [r3, #24]
      break;
 800259e:	e064      	b.n	800266a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f9ee 	bl	8002988 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6999      	ldr	r1, [r3, #24]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	021a      	lsls	r2, r3, #8
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	619a      	str	r2, [r3, #24]
      break;
 80025e0:	e043      	b.n	800266a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fa37 	bl	8002a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69da      	ldr	r2, [r3, #28]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0208 	orr.w	r2, r2, #8
 80025fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0204 	bic.w	r2, r2, #4
 800260c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69d9      	ldr	r1, [r3, #28]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	61da      	str	r2, [r3, #28]
      break;
 8002620:	e023      	b.n	800266a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fa81 	bl	8002b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800263c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69d9      	ldr	r1, [r3, #28]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	021a      	lsls	r2, r3, #8
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	61da      	str	r2, [r3, #28]
      break;
 8002662:	e002      	b.n	800266a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
      break;
 8002668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002672:	7dfb      	ldrb	r3, [r7, #23]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_TIM_ConfigClockSource+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e0b4      	b.n	8002802 <HAL_TIM_ConfigClockSource+0x186>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d0:	d03e      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0xd4>
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d6:	f200 8087 	bhi.w	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	f000 8086 	beq.w	80027ee <HAL_TIM_ConfigClockSource+0x172>
 80026e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e6:	d87f      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d01a      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0xa6>
 80026ec:	2b70      	cmp	r3, #112	; 0x70
 80026ee:	d87b      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b60      	cmp	r3, #96	; 0x60
 80026f2:	d050      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x11a>
 80026f4:	2b60      	cmp	r3, #96	; 0x60
 80026f6:	d877      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f8:	2b50      	cmp	r3, #80	; 0x50
 80026fa:	d03c      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0xfa>
 80026fc:	2b50      	cmp	r3, #80	; 0x50
 80026fe:	d873      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002700:	2b40      	cmp	r3, #64	; 0x40
 8002702:	d058      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d86f      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	2b30      	cmp	r3, #48	; 0x30
 800270a:	d064      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 800270c:	2b30      	cmp	r3, #48	; 0x30
 800270e:	d86b      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b20      	cmp	r3, #32
 8002712:	d060      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002714:	2b20      	cmp	r3, #32
 8002716:	d867      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 800271c:	2b10      	cmp	r3, #16
 800271e:	d05a      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002720:	e062      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002732:	f000 fac2 	bl	8002cba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	609a      	str	r2, [r3, #8]
      break;
 800274e:	e04f      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002760:	f000 faab 	bl	8002cba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002772:	609a      	str	r2, [r3, #8]
      break;
 8002774:	e03c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002782:	461a      	mov	r2, r3
 8002784:	f000 fa22 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2150      	movs	r1, #80	; 0x50
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fa79 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 8002794:	e02c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027a2:	461a      	mov	r2, r3
 80027a4:	f000 fa40 	bl	8002c28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2160      	movs	r1, #96	; 0x60
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fa69 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 80027b4:	e01c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	461a      	mov	r2, r3
 80027c4:	f000 fa02 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fa59 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 80027d4:	e00c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f000 fa50 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 80027e6:	e003      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e000      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <TIM_Base_SetConfig+0xa8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d007      	beq.n	8002834 <TIM_Base_SetConfig+0x28>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282a:	d003      	beq.n	8002834 <TIM_Base_SetConfig+0x28>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <TIM_Base_SetConfig+0xac>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d108      	bne.n	8002846 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <TIM_Base_SetConfig+0xa8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <TIM_Base_SetConfig+0x52>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d003      	beq.n	800285e <TIM_Base_SetConfig+0x52>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <TIM_Base_SetConfig+0xac>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d108      	bne.n	8002870 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <TIM_Base_SetConfig+0xa8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d103      	bne.n	80028a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	615a      	str	r2, [r3, #20]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400

080028bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0201 	bic.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f023 0302 	bic.w	r3, r3, #2
 8002904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <TIM_OC1_SetConfig+0xc8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d10c      	bne.n	8002932 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f023 0308 	bic.w	r3, r3, #8
 800291e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f023 0304 	bic.w	r3, r3, #4
 8002930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <TIM_OC1_SetConfig+0xc8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d111      	bne.n	800295e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	621a      	str	r2, [r3, #32]
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40012c00 	.word	0x40012c00

08002988 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f023 0210 	bic.w	r2, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f023 0320 	bic.w	r3, r3, #32
 80029d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <TIM_OC2_SetConfig+0xd0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10d      	bne.n	8002a04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <TIM_OC2_SetConfig+0xd0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d113      	bne.n	8002a34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	40012c00 	.word	0x40012c00

08002a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <TIM_OC3_SetConfig+0xd0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10d      	bne.n	8002ad6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <TIM_OC3_SetConfig+0xd0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d113      	bne.n	8002b06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	621a      	str	r2, [r3, #32]
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40012c00 	.word	0x40012c00

08002b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	031b      	lsls	r3, r3, #12
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <TIM_OC4_SetConfig+0x98>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d109      	bne.n	8002ba4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	019b      	lsls	r3, r3, #6
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	40012c00 	.word	0x40012c00

08002bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0201 	bic.w	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 030a 	bic.w	r3, r3, #10
 8002c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f023 0210 	bic.w	r2, r3, #16
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	031b      	lsls	r3, r3, #12
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	621a      	str	r2, [r3, #32]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f043 0307 	orr.w	r3, r3, #7
 8002ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	021a      	lsls	r2, r3, #8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	609a      	str	r2, [r3, #8]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a1a      	ldr	r2, [r3, #32]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	431a      	orrs	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e041      	b.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d009      	beq.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d004      	beq.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10c      	bne.n	8002dca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40000400 	.word	0x40000400

08002df0 <siprintf>:
 8002df0:	b40e      	push	{r1, r2, r3}
 8002df2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002df6:	b500      	push	{lr}
 8002df8:	b09c      	sub	sp, #112	; 0x70
 8002dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8002dfc:	9002      	str	r0, [sp, #8]
 8002dfe:	9006      	str	r0, [sp, #24]
 8002e00:	9107      	str	r1, [sp, #28]
 8002e02:	9104      	str	r1, [sp, #16]
 8002e04:	4808      	ldr	r0, [pc, #32]	; (8002e28 <siprintf+0x38>)
 8002e06:	4909      	ldr	r1, [pc, #36]	; (8002e2c <siprintf+0x3c>)
 8002e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e0c:	9105      	str	r1, [sp, #20]
 8002e0e:	6800      	ldr	r0, [r0, #0]
 8002e10:	a902      	add	r1, sp, #8
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	f000 f98e 	bl	8003134 <_svfiprintf_r>
 8002e18:	2200      	movs	r2, #0
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	b01c      	add	sp, #112	; 0x70
 8002e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e24:	b003      	add	sp, #12
 8002e26:	4770      	bx	lr
 8002e28:	20000058 	.word	0x20000058
 8002e2c:	ffff0208 	.word	0xffff0208

08002e30 <memset>:
 8002e30:	4603      	mov	r3, r0
 8002e32:	4402      	add	r2, r0
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d100      	bne.n	8002e3a <memset+0xa>
 8002e38:	4770      	bx	lr
 8002e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e3e:	e7f9      	b.n	8002e34 <memset+0x4>

08002e40 <__errno>:
 8002e40:	4b01      	ldr	r3, [pc, #4]	; (8002e48 <__errno+0x8>)
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000058 	.word	0x20000058

08002e4c <__libc_init_array>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	2600      	movs	r6, #0
 8002e50:	4d0c      	ldr	r5, [pc, #48]	; (8002e84 <__libc_init_array+0x38>)
 8002e52:	4c0d      	ldr	r4, [pc, #52]	; (8002e88 <__libc_init_array+0x3c>)
 8002e54:	1b64      	subs	r4, r4, r5
 8002e56:	10a4      	asrs	r4, r4, #2
 8002e58:	42a6      	cmp	r6, r4
 8002e5a:	d109      	bne.n	8002e70 <__libc_init_array+0x24>
 8002e5c:	f000 fc7a 	bl	8003754 <_init>
 8002e60:	2600      	movs	r6, #0
 8002e62:	4d0a      	ldr	r5, [pc, #40]	; (8002e8c <__libc_init_array+0x40>)
 8002e64:	4c0a      	ldr	r4, [pc, #40]	; (8002e90 <__libc_init_array+0x44>)
 8002e66:	1b64      	subs	r4, r4, r5
 8002e68:	10a4      	asrs	r4, r4, #2
 8002e6a:	42a6      	cmp	r6, r4
 8002e6c:	d105      	bne.n	8002e7a <__libc_init_array+0x2e>
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e74:	4798      	blx	r3
 8002e76:	3601      	adds	r6, #1
 8002e78:	e7ee      	b.n	8002e58 <__libc_init_array+0xc>
 8002e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7e:	4798      	blx	r3
 8002e80:	3601      	adds	r6, #1
 8002e82:	e7f2      	b.n	8002e6a <__libc_init_array+0x1e>
 8002e84:	08003898 	.word	0x08003898
 8002e88:	08003898 	.word	0x08003898
 8002e8c:	08003898 	.word	0x08003898
 8002e90:	0800389c 	.word	0x0800389c

08002e94 <__retarget_lock_acquire_recursive>:
 8002e94:	4770      	bx	lr

08002e96 <__retarget_lock_release_recursive>:
 8002e96:	4770      	bx	lr

08002e98 <_free_r>:
 8002e98:	b538      	push	{r3, r4, r5, lr}
 8002e9a:	4605      	mov	r5, r0
 8002e9c:	2900      	cmp	r1, #0
 8002e9e:	d040      	beq.n	8002f22 <_free_r+0x8a>
 8002ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ea4:	1f0c      	subs	r4, r1, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bfb8      	it	lt
 8002eaa:	18e4      	addlt	r4, r4, r3
 8002eac:	f000 f8dc 	bl	8003068 <__malloc_lock>
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <_free_r+0x8c>)
 8002eb2:	6813      	ldr	r3, [r2, #0]
 8002eb4:	b933      	cbnz	r3, 8002ec4 <_free_r+0x2c>
 8002eb6:	6063      	str	r3, [r4, #4]
 8002eb8:	6014      	str	r4, [r2, #0]
 8002eba:	4628      	mov	r0, r5
 8002ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ec0:	f000 b8d8 	b.w	8003074 <__malloc_unlock>
 8002ec4:	42a3      	cmp	r3, r4
 8002ec6:	d908      	bls.n	8002eda <_free_r+0x42>
 8002ec8:	6820      	ldr	r0, [r4, #0]
 8002eca:	1821      	adds	r1, r4, r0
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	bf01      	itttt	eq
 8002ed0:	6819      	ldreq	r1, [r3, #0]
 8002ed2:	685b      	ldreq	r3, [r3, #4]
 8002ed4:	1809      	addeq	r1, r1, r0
 8002ed6:	6021      	streq	r1, [r4, #0]
 8002ed8:	e7ed      	b.n	8002eb6 <_free_r+0x1e>
 8002eda:	461a      	mov	r2, r3
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	b10b      	cbz	r3, 8002ee4 <_free_r+0x4c>
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	d9fa      	bls.n	8002eda <_free_r+0x42>
 8002ee4:	6811      	ldr	r1, [r2, #0]
 8002ee6:	1850      	adds	r0, r2, r1
 8002ee8:	42a0      	cmp	r0, r4
 8002eea:	d10b      	bne.n	8002f04 <_free_r+0x6c>
 8002eec:	6820      	ldr	r0, [r4, #0]
 8002eee:	4401      	add	r1, r0
 8002ef0:	1850      	adds	r0, r2, r1
 8002ef2:	4283      	cmp	r3, r0
 8002ef4:	6011      	str	r1, [r2, #0]
 8002ef6:	d1e0      	bne.n	8002eba <_free_r+0x22>
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4408      	add	r0, r1
 8002efe:	6010      	str	r0, [r2, #0]
 8002f00:	6053      	str	r3, [r2, #4]
 8002f02:	e7da      	b.n	8002eba <_free_r+0x22>
 8002f04:	d902      	bls.n	8002f0c <_free_r+0x74>
 8002f06:	230c      	movs	r3, #12
 8002f08:	602b      	str	r3, [r5, #0]
 8002f0a:	e7d6      	b.n	8002eba <_free_r+0x22>
 8002f0c:	6820      	ldr	r0, [r4, #0]
 8002f0e:	1821      	adds	r1, r4, r0
 8002f10:	428b      	cmp	r3, r1
 8002f12:	bf01      	itttt	eq
 8002f14:	6819      	ldreq	r1, [r3, #0]
 8002f16:	685b      	ldreq	r3, [r3, #4]
 8002f18:	1809      	addeq	r1, r1, r0
 8002f1a:	6021      	streq	r1, [r4, #0]
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6054      	str	r4, [r2, #4]
 8002f20:	e7cb      	b.n	8002eba <_free_r+0x22>
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	20000248 	.word	0x20000248

08002f28 <sbrk_aligned>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4e0e      	ldr	r6, [pc, #56]	; (8002f64 <sbrk_aligned+0x3c>)
 8002f2c:	460c      	mov	r4, r1
 8002f2e:	6831      	ldr	r1, [r6, #0]
 8002f30:	4605      	mov	r5, r0
 8002f32:	b911      	cbnz	r1, 8002f3a <sbrk_aligned+0x12>
 8002f34:	f000 fbaa 	bl	800368c <_sbrk_r>
 8002f38:	6030      	str	r0, [r6, #0]
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f000 fba5 	bl	800368c <_sbrk_r>
 8002f42:	1c43      	adds	r3, r0, #1
 8002f44:	d00a      	beq.n	8002f5c <sbrk_aligned+0x34>
 8002f46:	1cc4      	adds	r4, r0, #3
 8002f48:	f024 0403 	bic.w	r4, r4, #3
 8002f4c:	42a0      	cmp	r0, r4
 8002f4e:	d007      	beq.n	8002f60 <sbrk_aligned+0x38>
 8002f50:	1a21      	subs	r1, r4, r0
 8002f52:	4628      	mov	r0, r5
 8002f54:	f000 fb9a 	bl	800368c <_sbrk_r>
 8002f58:	3001      	adds	r0, #1
 8002f5a:	d101      	bne.n	8002f60 <sbrk_aligned+0x38>
 8002f5c:	f04f 34ff 	mov.w	r4, #4294967295
 8002f60:	4620      	mov	r0, r4
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	2000024c 	.word	0x2000024c

08002f68 <_malloc_r>:
 8002f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f6c:	1ccd      	adds	r5, r1, #3
 8002f6e:	f025 0503 	bic.w	r5, r5, #3
 8002f72:	3508      	adds	r5, #8
 8002f74:	2d0c      	cmp	r5, #12
 8002f76:	bf38      	it	cc
 8002f78:	250c      	movcc	r5, #12
 8002f7a:	2d00      	cmp	r5, #0
 8002f7c:	4607      	mov	r7, r0
 8002f7e:	db01      	blt.n	8002f84 <_malloc_r+0x1c>
 8002f80:	42a9      	cmp	r1, r5
 8002f82:	d905      	bls.n	8002f90 <_malloc_r+0x28>
 8002f84:	230c      	movs	r3, #12
 8002f86:	2600      	movs	r6, #0
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003064 <_malloc_r+0xfc>
 8002f94:	f000 f868 	bl	8003068 <__malloc_lock>
 8002f98:	f8d8 3000 	ldr.w	r3, [r8]
 8002f9c:	461c      	mov	r4, r3
 8002f9e:	bb5c      	cbnz	r4, 8002ff8 <_malloc_r+0x90>
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	f7ff ffc0 	bl	8002f28 <sbrk_aligned>
 8002fa8:	1c43      	adds	r3, r0, #1
 8002faa:	4604      	mov	r4, r0
 8002fac:	d155      	bne.n	800305a <_malloc_r+0xf2>
 8002fae:	f8d8 4000 	ldr.w	r4, [r8]
 8002fb2:	4626      	mov	r6, r4
 8002fb4:	2e00      	cmp	r6, #0
 8002fb6:	d145      	bne.n	8003044 <_malloc_r+0xdc>
 8002fb8:	2c00      	cmp	r4, #0
 8002fba:	d048      	beq.n	800304e <_malloc_r+0xe6>
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4638      	mov	r0, r7
 8002fc2:	eb04 0903 	add.w	r9, r4, r3
 8002fc6:	f000 fb61 	bl	800368c <_sbrk_r>
 8002fca:	4581      	cmp	r9, r0
 8002fcc:	d13f      	bne.n	800304e <_malloc_r+0xe6>
 8002fce:	6821      	ldr	r1, [r4, #0]
 8002fd0:	4638      	mov	r0, r7
 8002fd2:	1a6d      	subs	r5, r5, r1
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	f7ff ffa7 	bl	8002f28 <sbrk_aligned>
 8002fda:	3001      	adds	r0, #1
 8002fdc:	d037      	beq.n	800304e <_malloc_r+0xe6>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	442b      	add	r3, r5
 8002fe2:	6023      	str	r3, [r4, #0]
 8002fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d038      	beq.n	800305e <_malloc_r+0xf6>
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	42a2      	cmp	r2, r4
 8002ff0:	d12b      	bne.n	800304a <_malloc_r+0xe2>
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	e00f      	b.n	8003018 <_malloc_r+0xb0>
 8002ff8:	6822      	ldr	r2, [r4, #0]
 8002ffa:	1b52      	subs	r2, r2, r5
 8002ffc:	d41f      	bmi.n	800303e <_malloc_r+0xd6>
 8002ffe:	2a0b      	cmp	r2, #11
 8003000:	d917      	bls.n	8003032 <_malloc_r+0xca>
 8003002:	1961      	adds	r1, r4, r5
 8003004:	42a3      	cmp	r3, r4
 8003006:	6025      	str	r5, [r4, #0]
 8003008:	bf18      	it	ne
 800300a:	6059      	strne	r1, [r3, #4]
 800300c:	6863      	ldr	r3, [r4, #4]
 800300e:	bf08      	it	eq
 8003010:	f8c8 1000 	streq.w	r1, [r8]
 8003014:	5162      	str	r2, [r4, r5]
 8003016:	604b      	str	r3, [r1, #4]
 8003018:	4638      	mov	r0, r7
 800301a:	f104 060b 	add.w	r6, r4, #11
 800301e:	f000 f829 	bl	8003074 <__malloc_unlock>
 8003022:	f026 0607 	bic.w	r6, r6, #7
 8003026:	1d23      	adds	r3, r4, #4
 8003028:	1af2      	subs	r2, r6, r3
 800302a:	d0ae      	beq.n	8002f8a <_malloc_r+0x22>
 800302c:	1b9b      	subs	r3, r3, r6
 800302e:	50a3      	str	r3, [r4, r2]
 8003030:	e7ab      	b.n	8002f8a <_malloc_r+0x22>
 8003032:	42a3      	cmp	r3, r4
 8003034:	6862      	ldr	r2, [r4, #4]
 8003036:	d1dd      	bne.n	8002ff4 <_malloc_r+0x8c>
 8003038:	f8c8 2000 	str.w	r2, [r8]
 800303c:	e7ec      	b.n	8003018 <_malloc_r+0xb0>
 800303e:	4623      	mov	r3, r4
 8003040:	6864      	ldr	r4, [r4, #4]
 8003042:	e7ac      	b.n	8002f9e <_malloc_r+0x36>
 8003044:	4634      	mov	r4, r6
 8003046:	6876      	ldr	r6, [r6, #4]
 8003048:	e7b4      	b.n	8002fb4 <_malloc_r+0x4c>
 800304a:	4613      	mov	r3, r2
 800304c:	e7cc      	b.n	8002fe8 <_malloc_r+0x80>
 800304e:	230c      	movs	r3, #12
 8003050:	4638      	mov	r0, r7
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	f000 f80e 	bl	8003074 <__malloc_unlock>
 8003058:	e797      	b.n	8002f8a <_malloc_r+0x22>
 800305a:	6025      	str	r5, [r4, #0]
 800305c:	e7dc      	b.n	8003018 <_malloc_r+0xb0>
 800305e:	605b      	str	r3, [r3, #4]
 8003060:	deff      	udf	#255	; 0xff
 8003062:	bf00      	nop
 8003064:	20000248 	.word	0x20000248

08003068 <__malloc_lock>:
 8003068:	4801      	ldr	r0, [pc, #4]	; (8003070 <__malloc_lock+0x8>)
 800306a:	f7ff bf13 	b.w	8002e94 <__retarget_lock_acquire_recursive>
 800306e:	bf00      	nop
 8003070:	20000244 	.word	0x20000244

08003074 <__malloc_unlock>:
 8003074:	4801      	ldr	r0, [pc, #4]	; (800307c <__malloc_unlock+0x8>)
 8003076:	f7ff bf0e 	b.w	8002e96 <__retarget_lock_release_recursive>
 800307a:	bf00      	nop
 800307c:	20000244 	.word	0x20000244

08003080 <__ssputs_r>:
 8003080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003084:	461f      	mov	r7, r3
 8003086:	688e      	ldr	r6, [r1, #8]
 8003088:	4682      	mov	sl, r0
 800308a:	42be      	cmp	r6, r7
 800308c:	460c      	mov	r4, r1
 800308e:	4690      	mov	r8, r2
 8003090:	680b      	ldr	r3, [r1, #0]
 8003092:	d82c      	bhi.n	80030ee <__ssputs_r+0x6e>
 8003094:	898a      	ldrh	r2, [r1, #12]
 8003096:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800309a:	d026      	beq.n	80030ea <__ssputs_r+0x6a>
 800309c:	6965      	ldr	r5, [r4, #20]
 800309e:	6909      	ldr	r1, [r1, #16]
 80030a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030a4:	eba3 0901 	sub.w	r9, r3, r1
 80030a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030ac:	1c7b      	adds	r3, r7, #1
 80030ae:	444b      	add	r3, r9
 80030b0:	106d      	asrs	r5, r5, #1
 80030b2:	429d      	cmp	r5, r3
 80030b4:	bf38      	it	cc
 80030b6:	461d      	movcc	r5, r3
 80030b8:	0553      	lsls	r3, r2, #21
 80030ba:	d527      	bpl.n	800310c <__ssputs_r+0x8c>
 80030bc:	4629      	mov	r1, r5
 80030be:	f7ff ff53 	bl	8002f68 <_malloc_r>
 80030c2:	4606      	mov	r6, r0
 80030c4:	b360      	cbz	r0, 8003120 <__ssputs_r+0xa0>
 80030c6:	464a      	mov	r2, r9
 80030c8:	6921      	ldr	r1, [r4, #16]
 80030ca:	f000 fafd 	bl	80036c8 <memcpy>
 80030ce:	89a3      	ldrh	r3, [r4, #12]
 80030d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d8:	81a3      	strh	r3, [r4, #12]
 80030da:	6126      	str	r6, [r4, #16]
 80030dc:	444e      	add	r6, r9
 80030de:	6026      	str	r6, [r4, #0]
 80030e0:	463e      	mov	r6, r7
 80030e2:	6165      	str	r5, [r4, #20]
 80030e4:	eba5 0509 	sub.w	r5, r5, r9
 80030e8:	60a5      	str	r5, [r4, #8]
 80030ea:	42be      	cmp	r6, r7
 80030ec:	d900      	bls.n	80030f0 <__ssputs_r+0x70>
 80030ee:	463e      	mov	r6, r7
 80030f0:	4632      	mov	r2, r6
 80030f2:	4641      	mov	r1, r8
 80030f4:	6820      	ldr	r0, [r4, #0]
 80030f6:	f000 faaf 	bl	8003658 <memmove>
 80030fa:	2000      	movs	r0, #0
 80030fc:	68a3      	ldr	r3, [r4, #8]
 80030fe:	1b9b      	subs	r3, r3, r6
 8003100:	60a3      	str	r3, [r4, #8]
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	4433      	add	r3, r6
 8003106:	6023      	str	r3, [r4, #0]
 8003108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800310c:	462a      	mov	r2, r5
 800310e:	f000 fae9 	bl	80036e4 <_realloc_r>
 8003112:	4606      	mov	r6, r0
 8003114:	2800      	cmp	r0, #0
 8003116:	d1e0      	bne.n	80030da <__ssputs_r+0x5a>
 8003118:	4650      	mov	r0, sl
 800311a:	6921      	ldr	r1, [r4, #16]
 800311c:	f7ff febc 	bl	8002e98 <_free_r>
 8003120:	230c      	movs	r3, #12
 8003122:	f8ca 3000 	str.w	r3, [sl]
 8003126:	89a3      	ldrh	r3, [r4, #12]
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003130:	81a3      	strh	r3, [r4, #12]
 8003132:	e7e9      	b.n	8003108 <__ssputs_r+0x88>

08003134 <_svfiprintf_r>:
 8003134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003138:	4698      	mov	r8, r3
 800313a:	898b      	ldrh	r3, [r1, #12]
 800313c:	4607      	mov	r7, r0
 800313e:	061b      	lsls	r3, r3, #24
 8003140:	460d      	mov	r5, r1
 8003142:	4614      	mov	r4, r2
 8003144:	b09d      	sub	sp, #116	; 0x74
 8003146:	d50e      	bpl.n	8003166 <_svfiprintf_r+0x32>
 8003148:	690b      	ldr	r3, [r1, #16]
 800314a:	b963      	cbnz	r3, 8003166 <_svfiprintf_r+0x32>
 800314c:	2140      	movs	r1, #64	; 0x40
 800314e:	f7ff ff0b 	bl	8002f68 <_malloc_r>
 8003152:	6028      	str	r0, [r5, #0]
 8003154:	6128      	str	r0, [r5, #16]
 8003156:	b920      	cbnz	r0, 8003162 <_svfiprintf_r+0x2e>
 8003158:	230c      	movs	r3, #12
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	e0d0      	b.n	8003304 <_svfiprintf_r+0x1d0>
 8003162:	2340      	movs	r3, #64	; 0x40
 8003164:	616b      	str	r3, [r5, #20]
 8003166:	2300      	movs	r3, #0
 8003168:	9309      	str	r3, [sp, #36]	; 0x24
 800316a:	2320      	movs	r3, #32
 800316c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003170:	2330      	movs	r3, #48	; 0x30
 8003172:	f04f 0901 	mov.w	r9, #1
 8003176:	f8cd 800c 	str.w	r8, [sp, #12]
 800317a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800331c <_svfiprintf_r+0x1e8>
 800317e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003182:	4623      	mov	r3, r4
 8003184:	469a      	mov	sl, r3
 8003186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800318a:	b10a      	cbz	r2, 8003190 <_svfiprintf_r+0x5c>
 800318c:	2a25      	cmp	r2, #37	; 0x25
 800318e:	d1f9      	bne.n	8003184 <_svfiprintf_r+0x50>
 8003190:	ebba 0b04 	subs.w	fp, sl, r4
 8003194:	d00b      	beq.n	80031ae <_svfiprintf_r+0x7a>
 8003196:	465b      	mov	r3, fp
 8003198:	4622      	mov	r2, r4
 800319a:	4629      	mov	r1, r5
 800319c:	4638      	mov	r0, r7
 800319e:	f7ff ff6f 	bl	8003080 <__ssputs_r>
 80031a2:	3001      	adds	r0, #1
 80031a4:	f000 80a9 	beq.w	80032fa <_svfiprintf_r+0x1c6>
 80031a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031aa:	445a      	add	r2, fp
 80031ac:	9209      	str	r2, [sp, #36]	; 0x24
 80031ae:	f89a 3000 	ldrb.w	r3, [sl]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80a1 	beq.w	80032fa <_svfiprintf_r+0x1c6>
 80031b8:	2300      	movs	r3, #0
 80031ba:	f04f 32ff 	mov.w	r2, #4294967295
 80031be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031c2:	f10a 0a01 	add.w	sl, sl, #1
 80031c6:	9304      	str	r3, [sp, #16]
 80031c8:	9307      	str	r3, [sp, #28]
 80031ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031ce:	931a      	str	r3, [sp, #104]	; 0x68
 80031d0:	4654      	mov	r4, sl
 80031d2:	2205      	movs	r2, #5
 80031d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d8:	4850      	ldr	r0, [pc, #320]	; (800331c <_svfiprintf_r+0x1e8>)
 80031da:	f000 fa67 	bl	80036ac <memchr>
 80031de:	9a04      	ldr	r2, [sp, #16]
 80031e0:	b9d8      	cbnz	r0, 800321a <_svfiprintf_r+0xe6>
 80031e2:	06d0      	lsls	r0, r2, #27
 80031e4:	bf44      	itt	mi
 80031e6:	2320      	movmi	r3, #32
 80031e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031ec:	0711      	lsls	r1, r2, #28
 80031ee:	bf44      	itt	mi
 80031f0:	232b      	movmi	r3, #43	; 0x2b
 80031f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031f6:	f89a 3000 	ldrb.w	r3, [sl]
 80031fa:	2b2a      	cmp	r3, #42	; 0x2a
 80031fc:	d015      	beq.n	800322a <_svfiprintf_r+0xf6>
 80031fe:	4654      	mov	r4, sl
 8003200:	2000      	movs	r0, #0
 8003202:	f04f 0c0a 	mov.w	ip, #10
 8003206:	9a07      	ldr	r2, [sp, #28]
 8003208:	4621      	mov	r1, r4
 800320a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800320e:	3b30      	subs	r3, #48	; 0x30
 8003210:	2b09      	cmp	r3, #9
 8003212:	d94d      	bls.n	80032b0 <_svfiprintf_r+0x17c>
 8003214:	b1b0      	cbz	r0, 8003244 <_svfiprintf_r+0x110>
 8003216:	9207      	str	r2, [sp, #28]
 8003218:	e014      	b.n	8003244 <_svfiprintf_r+0x110>
 800321a:	eba0 0308 	sub.w	r3, r0, r8
 800321e:	fa09 f303 	lsl.w	r3, r9, r3
 8003222:	4313      	orrs	r3, r2
 8003224:	46a2      	mov	sl, r4
 8003226:	9304      	str	r3, [sp, #16]
 8003228:	e7d2      	b.n	80031d0 <_svfiprintf_r+0x9c>
 800322a:	9b03      	ldr	r3, [sp, #12]
 800322c:	1d19      	adds	r1, r3, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	9103      	str	r1, [sp, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	bfbb      	ittet	lt
 8003236:	425b      	neglt	r3, r3
 8003238:	f042 0202 	orrlt.w	r2, r2, #2
 800323c:	9307      	strge	r3, [sp, #28]
 800323e:	9307      	strlt	r3, [sp, #28]
 8003240:	bfb8      	it	lt
 8003242:	9204      	strlt	r2, [sp, #16]
 8003244:	7823      	ldrb	r3, [r4, #0]
 8003246:	2b2e      	cmp	r3, #46	; 0x2e
 8003248:	d10c      	bne.n	8003264 <_svfiprintf_r+0x130>
 800324a:	7863      	ldrb	r3, [r4, #1]
 800324c:	2b2a      	cmp	r3, #42	; 0x2a
 800324e:	d134      	bne.n	80032ba <_svfiprintf_r+0x186>
 8003250:	9b03      	ldr	r3, [sp, #12]
 8003252:	3402      	adds	r4, #2
 8003254:	1d1a      	adds	r2, r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	9203      	str	r2, [sp, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	bfb8      	it	lt
 800325e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003262:	9305      	str	r3, [sp, #20]
 8003264:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003320 <_svfiprintf_r+0x1ec>
 8003268:	2203      	movs	r2, #3
 800326a:	4650      	mov	r0, sl
 800326c:	7821      	ldrb	r1, [r4, #0]
 800326e:	f000 fa1d 	bl	80036ac <memchr>
 8003272:	b138      	cbz	r0, 8003284 <_svfiprintf_r+0x150>
 8003274:	2240      	movs	r2, #64	; 0x40
 8003276:	9b04      	ldr	r3, [sp, #16]
 8003278:	eba0 000a 	sub.w	r0, r0, sl
 800327c:	4082      	lsls	r2, r0
 800327e:	4313      	orrs	r3, r2
 8003280:	3401      	adds	r4, #1
 8003282:	9304      	str	r3, [sp, #16]
 8003284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003288:	2206      	movs	r2, #6
 800328a:	4826      	ldr	r0, [pc, #152]	; (8003324 <_svfiprintf_r+0x1f0>)
 800328c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003290:	f000 fa0c 	bl	80036ac <memchr>
 8003294:	2800      	cmp	r0, #0
 8003296:	d038      	beq.n	800330a <_svfiprintf_r+0x1d6>
 8003298:	4b23      	ldr	r3, [pc, #140]	; (8003328 <_svfiprintf_r+0x1f4>)
 800329a:	bb1b      	cbnz	r3, 80032e4 <_svfiprintf_r+0x1b0>
 800329c:	9b03      	ldr	r3, [sp, #12]
 800329e:	3307      	adds	r3, #7
 80032a0:	f023 0307 	bic.w	r3, r3, #7
 80032a4:	3308      	adds	r3, #8
 80032a6:	9303      	str	r3, [sp, #12]
 80032a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032aa:	4433      	add	r3, r6
 80032ac:	9309      	str	r3, [sp, #36]	; 0x24
 80032ae:	e768      	b.n	8003182 <_svfiprintf_r+0x4e>
 80032b0:	460c      	mov	r4, r1
 80032b2:	2001      	movs	r0, #1
 80032b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80032b8:	e7a6      	b.n	8003208 <_svfiprintf_r+0xd4>
 80032ba:	2300      	movs	r3, #0
 80032bc:	f04f 0c0a 	mov.w	ip, #10
 80032c0:	4619      	mov	r1, r3
 80032c2:	3401      	adds	r4, #1
 80032c4:	9305      	str	r3, [sp, #20]
 80032c6:	4620      	mov	r0, r4
 80032c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032cc:	3a30      	subs	r2, #48	; 0x30
 80032ce:	2a09      	cmp	r2, #9
 80032d0:	d903      	bls.n	80032da <_svfiprintf_r+0x1a6>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0c6      	beq.n	8003264 <_svfiprintf_r+0x130>
 80032d6:	9105      	str	r1, [sp, #20]
 80032d8:	e7c4      	b.n	8003264 <_svfiprintf_r+0x130>
 80032da:	4604      	mov	r4, r0
 80032dc:	2301      	movs	r3, #1
 80032de:	fb0c 2101 	mla	r1, ip, r1, r2
 80032e2:	e7f0      	b.n	80032c6 <_svfiprintf_r+0x192>
 80032e4:	ab03      	add	r3, sp, #12
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	462a      	mov	r2, r5
 80032ea:	4638      	mov	r0, r7
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <_svfiprintf_r+0x1f8>)
 80032ee:	a904      	add	r1, sp, #16
 80032f0:	f3af 8000 	nop.w
 80032f4:	1c42      	adds	r2, r0, #1
 80032f6:	4606      	mov	r6, r0
 80032f8:	d1d6      	bne.n	80032a8 <_svfiprintf_r+0x174>
 80032fa:	89ab      	ldrh	r3, [r5, #12]
 80032fc:	065b      	lsls	r3, r3, #25
 80032fe:	f53f af2d 	bmi.w	800315c <_svfiprintf_r+0x28>
 8003302:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003304:	b01d      	add	sp, #116	; 0x74
 8003306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800330a:	ab03      	add	r3, sp, #12
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	462a      	mov	r2, r5
 8003310:	4638      	mov	r0, r7
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <_svfiprintf_r+0x1f8>)
 8003314:	a904      	add	r1, sp, #16
 8003316:	f000 f87d 	bl	8003414 <_printf_i>
 800331a:	e7eb      	b.n	80032f4 <_svfiprintf_r+0x1c0>
 800331c:	08003862 	.word	0x08003862
 8003320:	08003868 	.word	0x08003868
 8003324:	0800386c 	.word	0x0800386c
 8003328:	00000000 	.word	0x00000000
 800332c:	08003081 	.word	0x08003081

08003330 <_printf_common>:
 8003330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003334:	4616      	mov	r6, r2
 8003336:	4699      	mov	r9, r3
 8003338:	688a      	ldr	r2, [r1, #8]
 800333a:	690b      	ldr	r3, [r1, #16]
 800333c:	4607      	mov	r7, r0
 800333e:	4293      	cmp	r3, r2
 8003340:	bfb8      	it	lt
 8003342:	4613      	movlt	r3, r2
 8003344:	6033      	str	r3, [r6, #0]
 8003346:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800334a:	460c      	mov	r4, r1
 800334c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003350:	b10a      	cbz	r2, 8003356 <_printf_common+0x26>
 8003352:	3301      	adds	r3, #1
 8003354:	6033      	str	r3, [r6, #0]
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	0699      	lsls	r1, r3, #26
 800335a:	bf42      	ittt	mi
 800335c:	6833      	ldrmi	r3, [r6, #0]
 800335e:	3302      	addmi	r3, #2
 8003360:	6033      	strmi	r3, [r6, #0]
 8003362:	6825      	ldr	r5, [r4, #0]
 8003364:	f015 0506 	ands.w	r5, r5, #6
 8003368:	d106      	bne.n	8003378 <_printf_common+0x48>
 800336a:	f104 0a19 	add.w	sl, r4, #25
 800336e:	68e3      	ldr	r3, [r4, #12]
 8003370:	6832      	ldr	r2, [r6, #0]
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	42ab      	cmp	r3, r5
 8003376:	dc2b      	bgt.n	80033d0 <_printf_common+0xa0>
 8003378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800337c:	1e13      	subs	r3, r2, #0
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	bf18      	it	ne
 8003382:	2301      	movne	r3, #1
 8003384:	0692      	lsls	r2, r2, #26
 8003386:	d430      	bmi.n	80033ea <_printf_common+0xba>
 8003388:	4649      	mov	r1, r9
 800338a:	4638      	mov	r0, r7
 800338c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003390:	47c0      	blx	r8
 8003392:	3001      	adds	r0, #1
 8003394:	d023      	beq.n	80033de <_printf_common+0xae>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	6922      	ldr	r2, [r4, #16]
 800339a:	f003 0306 	and.w	r3, r3, #6
 800339e:	2b04      	cmp	r3, #4
 80033a0:	bf14      	ite	ne
 80033a2:	2500      	movne	r5, #0
 80033a4:	6833      	ldreq	r3, [r6, #0]
 80033a6:	f04f 0600 	mov.w	r6, #0
 80033aa:	bf08      	it	eq
 80033ac:	68e5      	ldreq	r5, [r4, #12]
 80033ae:	f104 041a 	add.w	r4, r4, #26
 80033b2:	bf08      	it	eq
 80033b4:	1aed      	subeq	r5, r5, r3
 80033b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033ba:	bf08      	it	eq
 80033bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033c0:	4293      	cmp	r3, r2
 80033c2:	bfc4      	itt	gt
 80033c4:	1a9b      	subgt	r3, r3, r2
 80033c6:	18ed      	addgt	r5, r5, r3
 80033c8:	42b5      	cmp	r5, r6
 80033ca:	d11a      	bne.n	8003402 <_printf_common+0xd2>
 80033cc:	2000      	movs	r0, #0
 80033ce:	e008      	b.n	80033e2 <_printf_common+0xb2>
 80033d0:	2301      	movs	r3, #1
 80033d2:	4652      	mov	r2, sl
 80033d4:	4649      	mov	r1, r9
 80033d6:	4638      	mov	r0, r7
 80033d8:	47c0      	blx	r8
 80033da:	3001      	adds	r0, #1
 80033dc:	d103      	bne.n	80033e6 <_printf_common+0xb6>
 80033de:	f04f 30ff 	mov.w	r0, #4294967295
 80033e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e6:	3501      	adds	r5, #1
 80033e8:	e7c1      	b.n	800336e <_printf_common+0x3e>
 80033ea:	2030      	movs	r0, #48	; 0x30
 80033ec:	18e1      	adds	r1, r4, r3
 80033ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033f8:	4422      	add	r2, r4
 80033fa:	3302      	adds	r3, #2
 80033fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003400:	e7c2      	b.n	8003388 <_printf_common+0x58>
 8003402:	2301      	movs	r3, #1
 8003404:	4622      	mov	r2, r4
 8003406:	4649      	mov	r1, r9
 8003408:	4638      	mov	r0, r7
 800340a:	47c0      	blx	r8
 800340c:	3001      	adds	r0, #1
 800340e:	d0e6      	beq.n	80033de <_printf_common+0xae>
 8003410:	3601      	adds	r6, #1
 8003412:	e7d9      	b.n	80033c8 <_printf_common+0x98>

08003414 <_printf_i>:
 8003414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003418:	7e0f      	ldrb	r7, [r1, #24]
 800341a:	4691      	mov	r9, r2
 800341c:	2f78      	cmp	r7, #120	; 0x78
 800341e:	4680      	mov	r8, r0
 8003420:	460c      	mov	r4, r1
 8003422:	469a      	mov	sl, r3
 8003424:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800342a:	d807      	bhi.n	800343c <_printf_i+0x28>
 800342c:	2f62      	cmp	r7, #98	; 0x62
 800342e:	d80a      	bhi.n	8003446 <_printf_i+0x32>
 8003430:	2f00      	cmp	r7, #0
 8003432:	f000 80d5 	beq.w	80035e0 <_printf_i+0x1cc>
 8003436:	2f58      	cmp	r7, #88	; 0x58
 8003438:	f000 80c1 	beq.w	80035be <_printf_i+0x1aa>
 800343c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003444:	e03a      	b.n	80034bc <_printf_i+0xa8>
 8003446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800344a:	2b15      	cmp	r3, #21
 800344c:	d8f6      	bhi.n	800343c <_printf_i+0x28>
 800344e:	a101      	add	r1, pc, #4	; (adr r1, 8003454 <_printf_i+0x40>)
 8003450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003454:	080034ad 	.word	0x080034ad
 8003458:	080034c1 	.word	0x080034c1
 800345c:	0800343d 	.word	0x0800343d
 8003460:	0800343d 	.word	0x0800343d
 8003464:	0800343d 	.word	0x0800343d
 8003468:	0800343d 	.word	0x0800343d
 800346c:	080034c1 	.word	0x080034c1
 8003470:	0800343d 	.word	0x0800343d
 8003474:	0800343d 	.word	0x0800343d
 8003478:	0800343d 	.word	0x0800343d
 800347c:	0800343d 	.word	0x0800343d
 8003480:	080035c7 	.word	0x080035c7
 8003484:	080034ed 	.word	0x080034ed
 8003488:	08003581 	.word	0x08003581
 800348c:	0800343d 	.word	0x0800343d
 8003490:	0800343d 	.word	0x0800343d
 8003494:	080035e9 	.word	0x080035e9
 8003498:	0800343d 	.word	0x0800343d
 800349c:	080034ed 	.word	0x080034ed
 80034a0:	0800343d 	.word	0x0800343d
 80034a4:	0800343d 	.word	0x0800343d
 80034a8:	08003589 	.word	0x08003589
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	1d1a      	adds	r2, r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	602a      	str	r2, [r5, #0]
 80034b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034bc:	2301      	movs	r3, #1
 80034be:	e0a0      	b.n	8003602 <_printf_i+0x1ee>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	682b      	ldr	r3, [r5, #0]
 80034c4:	0607      	lsls	r7, r0, #24
 80034c6:	f103 0104 	add.w	r1, r3, #4
 80034ca:	6029      	str	r1, [r5, #0]
 80034cc:	d501      	bpl.n	80034d2 <_printf_i+0xbe>
 80034ce:	681e      	ldr	r6, [r3, #0]
 80034d0:	e003      	b.n	80034da <_printf_i+0xc6>
 80034d2:	0646      	lsls	r6, r0, #25
 80034d4:	d5fb      	bpl.n	80034ce <_printf_i+0xba>
 80034d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80034da:	2e00      	cmp	r6, #0
 80034dc:	da03      	bge.n	80034e6 <_printf_i+0xd2>
 80034de:	232d      	movs	r3, #45	; 0x2d
 80034e0:	4276      	negs	r6, r6
 80034e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034e6:	230a      	movs	r3, #10
 80034e8:	4859      	ldr	r0, [pc, #356]	; (8003650 <_printf_i+0x23c>)
 80034ea:	e012      	b.n	8003512 <_printf_i+0xfe>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	1d19      	adds	r1, r3, #4
 80034f2:	6029      	str	r1, [r5, #0]
 80034f4:	0605      	lsls	r5, r0, #24
 80034f6:	d501      	bpl.n	80034fc <_printf_i+0xe8>
 80034f8:	681e      	ldr	r6, [r3, #0]
 80034fa:	e002      	b.n	8003502 <_printf_i+0xee>
 80034fc:	0641      	lsls	r1, r0, #25
 80034fe:	d5fb      	bpl.n	80034f8 <_printf_i+0xe4>
 8003500:	881e      	ldrh	r6, [r3, #0]
 8003502:	2f6f      	cmp	r7, #111	; 0x6f
 8003504:	bf0c      	ite	eq
 8003506:	2308      	moveq	r3, #8
 8003508:	230a      	movne	r3, #10
 800350a:	4851      	ldr	r0, [pc, #324]	; (8003650 <_printf_i+0x23c>)
 800350c:	2100      	movs	r1, #0
 800350e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003512:	6865      	ldr	r5, [r4, #4]
 8003514:	2d00      	cmp	r5, #0
 8003516:	bfa8      	it	ge
 8003518:	6821      	ldrge	r1, [r4, #0]
 800351a:	60a5      	str	r5, [r4, #8]
 800351c:	bfa4      	itt	ge
 800351e:	f021 0104 	bicge.w	r1, r1, #4
 8003522:	6021      	strge	r1, [r4, #0]
 8003524:	b90e      	cbnz	r6, 800352a <_printf_i+0x116>
 8003526:	2d00      	cmp	r5, #0
 8003528:	d04b      	beq.n	80035c2 <_printf_i+0x1ae>
 800352a:	4615      	mov	r5, r2
 800352c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003530:	fb03 6711 	mls	r7, r3, r1, r6
 8003534:	5dc7      	ldrb	r7, [r0, r7]
 8003536:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800353a:	4637      	mov	r7, r6
 800353c:	42bb      	cmp	r3, r7
 800353e:	460e      	mov	r6, r1
 8003540:	d9f4      	bls.n	800352c <_printf_i+0x118>
 8003542:	2b08      	cmp	r3, #8
 8003544:	d10b      	bne.n	800355e <_printf_i+0x14a>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	07de      	lsls	r6, r3, #31
 800354a:	d508      	bpl.n	800355e <_printf_i+0x14a>
 800354c:	6923      	ldr	r3, [r4, #16]
 800354e:	6861      	ldr	r1, [r4, #4]
 8003550:	4299      	cmp	r1, r3
 8003552:	bfde      	ittt	le
 8003554:	2330      	movle	r3, #48	; 0x30
 8003556:	f805 3c01 	strble.w	r3, [r5, #-1]
 800355a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800355e:	1b52      	subs	r2, r2, r5
 8003560:	6122      	str	r2, [r4, #16]
 8003562:	464b      	mov	r3, r9
 8003564:	4621      	mov	r1, r4
 8003566:	4640      	mov	r0, r8
 8003568:	f8cd a000 	str.w	sl, [sp]
 800356c:	aa03      	add	r2, sp, #12
 800356e:	f7ff fedf 	bl	8003330 <_printf_common>
 8003572:	3001      	adds	r0, #1
 8003574:	d14a      	bne.n	800360c <_printf_i+0x1f8>
 8003576:	f04f 30ff 	mov.w	r0, #4294967295
 800357a:	b004      	add	sp, #16
 800357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	f043 0320 	orr.w	r3, r3, #32
 8003586:	6023      	str	r3, [r4, #0]
 8003588:	2778      	movs	r7, #120	; 0x78
 800358a:	4832      	ldr	r0, [pc, #200]	; (8003654 <_printf_i+0x240>)
 800358c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	6829      	ldr	r1, [r5, #0]
 8003594:	061f      	lsls	r7, r3, #24
 8003596:	f851 6b04 	ldr.w	r6, [r1], #4
 800359a:	d402      	bmi.n	80035a2 <_printf_i+0x18e>
 800359c:	065f      	lsls	r7, r3, #25
 800359e:	bf48      	it	mi
 80035a0:	b2b6      	uxthmi	r6, r6
 80035a2:	07df      	lsls	r7, r3, #31
 80035a4:	bf48      	it	mi
 80035a6:	f043 0320 	orrmi.w	r3, r3, #32
 80035aa:	6029      	str	r1, [r5, #0]
 80035ac:	bf48      	it	mi
 80035ae:	6023      	strmi	r3, [r4, #0]
 80035b0:	b91e      	cbnz	r6, 80035ba <_printf_i+0x1a6>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	f023 0320 	bic.w	r3, r3, #32
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	2310      	movs	r3, #16
 80035bc:	e7a6      	b.n	800350c <_printf_i+0xf8>
 80035be:	4824      	ldr	r0, [pc, #144]	; (8003650 <_printf_i+0x23c>)
 80035c0:	e7e4      	b.n	800358c <_printf_i+0x178>
 80035c2:	4615      	mov	r5, r2
 80035c4:	e7bd      	b.n	8003542 <_printf_i+0x12e>
 80035c6:	682b      	ldr	r3, [r5, #0]
 80035c8:	6826      	ldr	r6, [r4, #0]
 80035ca:	1d18      	adds	r0, r3, #4
 80035cc:	6961      	ldr	r1, [r4, #20]
 80035ce:	6028      	str	r0, [r5, #0]
 80035d0:	0635      	lsls	r5, r6, #24
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	d501      	bpl.n	80035da <_printf_i+0x1c6>
 80035d6:	6019      	str	r1, [r3, #0]
 80035d8:	e002      	b.n	80035e0 <_printf_i+0x1cc>
 80035da:	0670      	lsls	r0, r6, #25
 80035dc:	d5fb      	bpl.n	80035d6 <_printf_i+0x1c2>
 80035de:	8019      	strh	r1, [r3, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	4615      	mov	r5, r2
 80035e4:	6123      	str	r3, [r4, #16]
 80035e6:	e7bc      	b.n	8003562 <_printf_i+0x14e>
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	2100      	movs	r1, #0
 80035ec:	1d1a      	adds	r2, r3, #4
 80035ee:	602a      	str	r2, [r5, #0]
 80035f0:	681d      	ldr	r5, [r3, #0]
 80035f2:	6862      	ldr	r2, [r4, #4]
 80035f4:	4628      	mov	r0, r5
 80035f6:	f000 f859 	bl	80036ac <memchr>
 80035fa:	b108      	cbz	r0, 8003600 <_printf_i+0x1ec>
 80035fc:	1b40      	subs	r0, r0, r5
 80035fe:	6060      	str	r0, [r4, #4]
 8003600:	6863      	ldr	r3, [r4, #4]
 8003602:	6123      	str	r3, [r4, #16]
 8003604:	2300      	movs	r3, #0
 8003606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360a:	e7aa      	b.n	8003562 <_printf_i+0x14e>
 800360c:	462a      	mov	r2, r5
 800360e:	4649      	mov	r1, r9
 8003610:	4640      	mov	r0, r8
 8003612:	6923      	ldr	r3, [r4, #16]
 8003614:	47d0      	blx	sl
 8003616:	3001      	adds	r0, #1
 8003618:	d0ad      	beq.n	8003576 <_printf_i+0x162>
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	079b      	lsls	r3, r3, #30
 800361e:	d413      	bmi.n	8003648 <_printf_i+0x234>
 8003620:	68e0      	ldr	r0, [r4, #12]
 8003622:	9b03      	ldr	r3, [sp, #12]
 8003624:	4298      	cmp	r0, r3
 8003626:	bfb8      	it	lt
 8003628:	4618      	movlt	r0, r3
 800362a:	e7a6      	b.n	800357a <_printf_i+0x166>
 800362c:	2301      	movs	r3, #1
 800362e:	4632      	mov	r2, r6
 8003630:	4649      	mov	r1, r9
 8003632:	4640      	mov	r0, r8
 8003634:	47d0      	blx	sl
 8003636:	3001      	adds	r0, #1
 8003638:	d09d      	beq.n	8003576 <_printf_i+0x162>
 800363a:	3501      	adds	r5, #1
 800363c:	68e3      	ldr	r3, [r4, #12]
 800363e:	9903      	ldr	r1, [sp, #12]
 8003640:	1a5b      	subs	r3, r3, r1
 8003642:	42ab      	cmp	r3, r5
 8003644:	dcf2      	bgt.n	800362c <_printf_i+0x218>
 8003646:	e7eb      	b.n	8003620 <_printf_i+0x20c>
 8003648:	2500      	movs	r5, #0
 800364a:	f104 0619 	add.w	r6, r4, #25
 800364e:	e7f5      	b.n	800363c <_printf_i+0x228>
 8003650:	08003873 	.word	0x08003873
 8003654:	08003884 	.word	0x08003884

08003658 <memmove>:
 8003658:	4288      	cmp	r0, r1
 800365a:	b510      	push	{r4, lr}
 800365c:	eb01 0402 	add.w	r4, r1, r2
 8003660:	d902      	bls.n	8003668 <memmove+0x10>
 8003662:	4284      	cmp	r4, r0
 8003664:	4623      	mov	r3, r4
 8003666:	d807      	bhi.n	8003678 <memmove+0x20>
 8003668:	1e43      	subs	r3, r0, #1
 800366a:	42a1      	cmp	r1, r4
 800366c:	d008      	beq.n	8003680 <memmove+0x28>
 800366e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003676:	e7f8      	b.n	800366a <memmove+0x12>
 8003678:	4601      	mov	r1, r0
 800367a:	4402      	add	r2, r0
 800367c:	428a      	cmp	r2, r1
 800367e:	d100      	bne.n	8003682 <memmove+0x2a>
 8003680:	bd10      	pop	{r4, pc}
 8003682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800368a:	e7f7      	b.n	800367c <memmove+0x24>

0800368c <_sbrk_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	2300      	movs	r3, #0
 8003690:	4d05      	ldr	r5, [pc, #20]	; (80036a8 <_sbrk_r+0x1c>)
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	602b      	str	r3, [r5, #0]
 8003698:	f7fd fe94 	bl	80013c4 <_sbrk>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_sbrk_r+0x1a>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_sbrk_r+0x1a>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	20000240 	.word	0x20000240

080036ac <memchr>:
 80036ac:	4603      	mov	r3, r0
 80036ae:	b510      	push	{r4, lr}
 80036b0:	b2c9      	uxtb	r1, r1
 80036b2:	4402      	add	r2, r0
 80036b4:	4293      	cmp	r3, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	d101      	bne.n	80036be <memchr+0x12>
 80036ba:	2000      	movs	r0, #0
 80036bc:	e003      	b.n	80036c6 <memchr+0x1a>
 80036be:	7804      	ldrb	r4, [r0, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	428c      	cmp	r4, r1
 80036c4:	d1f6      	bne.n	80036b4 <memchr+0x8>
 80036c6:	bd10      	pop	{r4, pc}

080036c8 <memcpy>:
 80036c8:	440a      	add	r2, r1
 80036ca:	4291      	cmp	r1, r2
 80036cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80036d0:	d100      	bne.n	80036d4 <memcpy+0xc>
 80036d2:	4770      	bx	lr
 80036d4:	b510      	push	{r4, lr}
 80036d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036da:	4291      	cmp	r1, r2
 80036dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036e0:	d1f9      	bne.n	80036d6 <memcpy+0xe>
 80036e2:	bd10      	pop	{r4, pc}

080036e4 <_realloc_r>:
 80036e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e8:	4680      	mov	r8, r0
 80036ea:	4614      	mov	r4, r2
 80036ec:	460e      	mov	r6, r1
 80036ee:	b921      	cbnz	r1, 80036fa <_realloc_r+0x16>
 80036f0:	4611      	mov	r1, r2
 80036f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036f6:	f7ff bc37 	b.w	8002f68 <_malloc_r>
 80036fa:	b92a      	cbnz	r2, 8003708 <_realloc_r+0x24>
 80036fc:	f7ff fbcc 	bl	8002e98 <_free_r>
 8003700:	4625      	mov	r5, r4
 8003702:	4628      	mov	r0, r5
 8003704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003708:	f000 f81b 	bl	8003742 <_malloc_usable_size_r>
 800370c:	4284      	cmp	r4, r0
 800370e:	4607      	mov	r7, r0
 8003710:	d802      	bhi.n	8003718 <_realloc_r+0x34>
 8003712:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003716:	d812      	bhi.n	800373e <_realloc_r+0x5a>
 8003718:	4621      	mov	r1, r4
 800371a:	4640      	mov	r0, r8
 800371c:	f7ff fc24 	bl	8002f68 <_malloc_r>
 8003720:	4605      	mov	r5, r0
 8003722:	2800      	cmp	r0, #0
 8003724:	d0ed      	beq.n	8003702 <_realloc_r+0x1e>
 8003726:	42bc      	cmp	r4, r7
 8003728:	4622      	mov	r2, r4
 800372a:	4631      	mov	r1, r6
 800372c:	bf28      	it	cs
 800372e:	463a      	movcs	r2, r7
 8003730:	f7ff ffca 	bl	80036c8 <memcpy>
 8003734:	4631      	mov	r1, r6
 8003736:	4640      	mov	r0, r8
 8003738:	f7ff fbae 	bl	8002e98 <_free_r>
 800373c:	e7e1      	b.n	8003702 <_realloc_r+0x1e>
 800373e:	4635      	mov	r5, r6
 8003740:	e7df      	b.n	8003702 <_realloc_r+0x1e>

08003742 <_malloc_usable_size_r>:
 8003742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003746:	1f18      	subs	r0, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	bfbc      	itt	lt
 800374c:	580b      	ldrlt	r3, [r1, r0]
 800374e:	18c0      	addlt	r0, r0, r3
 8003750:	4770      	bx	lr
	...

08003754 <_init>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr

08003760 <_fini>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr
