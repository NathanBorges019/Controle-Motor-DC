
CONTROLE MOTOR DC_IHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a8  080031a8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080031a8  080031a8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031a8  080031a8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080031b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000005c  0800320c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  0800320c  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b99  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001701  00000000  00000000  00027c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00029368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000776  00000000  00000000  00029d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171a1  00000000  00000000  0002a496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa44  00000000  00000000  00041637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085bdc  00000000  00000000  0004c07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cb4  00000000  00000000  000d1c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000d490c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003074 	.word	0x08003074

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003074 	.word	0x08003074

0800014c <LCD_Cursor>:
 *  @return None
 *
 ******************************************************************************/

void LCD_Cursor(uint8_t x, uint8_t y)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if (x == 0)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d102      	bne.n	8000168 <LCD_Cursor+0x1c>
		temp = 0x80;
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e001      	b.n	800016c <LCD_Cursor+0x20>
	else
		temp = 0xC0;
 8000168:	23c0      	movs	r3, #192	; 0xc0
 800016a:	73fb      	strb	r3, [r7, #15]

	temp = temp + y;
 800016c:	7bfa      	ldrb	r2, [r7, #15]
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	4413      	add	r3, r2
 8000172:	73fb      	strb	r3, [r7, #15]

	LCD_Cmd(temp);
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	4618      	mov	r0, r3
 8000178:	f000 f8ae 	bl	80002d8 <LCD_Cmd>


}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <LCD_Data>:
*
*  @return  None
*
******************************************************************************/
void LCD_Data(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	RS_GPIO_Port->BSRR = RS_Pin;
 800018e:	4b45      	ldr	r3, [pc, #276]	; (80002a4 <LCD_Data+0x120>)
 8000190:	2208      	movs	r2, #8
 8000192:	611a      	str	r2, [r3, #16]
	if (data & 0x80)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	da04      	bge.n	80001a6 <LCD_Data+0x22>
		D7_GPIO_Port->BSRR = D7_Pin;
 800019c:	4b42      	ldr	r3, [pc, #264]	; (80002a8 <LCD_Data+0x124>)
 800019e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001a2:	611a      	str	r2, [r3, #16]
 80001a4:	e003      	b.n	80001ae <LCD_Data+0x2a>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 80001a6:	4b40      	ldr	r3, [pc, #256]	; (80002a8 <LCD_Data+0x124>)
 80001a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001ac:	611a      	str	r2, [r3, #16]
	if (data & 0x40)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <LCD_Data+0x3c>
		D6_GPIO_Port->BSRR = D6_Pin;
 80001b8:	4b3b      	ldr	r3, [pc, #236]	; (80002a8 <LCD_Data+0x124>)
 80001ba:	2208      	movs	r2, #8
 80001bc:	611a      	str	r2, [r3, #16]
 80001be:	e003      	b.n	80001c8 <LCD_Data+0x44>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 80001c0:	4b39      	ldr	r3, [pc, #228]	; (80002a8 <LCD_Data+0x124>)
 80001c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80001c6:	611a      	str	r2, [r3, #16]
	if (data & 0x20)
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	f003 0320 	and.w	r3, r3, #32
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d003      	beq.n	80001da <LCD_Data+0x56>
		D5_GPIO_Port->BSRR = D5_Pin;
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <LCD_Data+0x120>)
 80001d4:	2220      	movs	r2, #32
 80001d6:	611a      	str	r2, [r3, #16]
 80001d8:	e003      	b.n	80001e2 <LCD_Data+0x5e>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 80001da:	4b32      	ldr	r3, [pc, #200]	; (80002a4 <LCD_Data+0x120>)
 80001dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80001e0:	611a      	str	r2, [r3, #16]
	if (data & 0x10)
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f003 0310 	and.w	r3, r3, #16
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d003      	beq.n	80001f4 <LCD_Data+0x70>
		D4_GPIO_Port->BSRR = D4_Pin;
 80001ec:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <LCD_Data+0x120>)
 80001ee:	2210      	movs	r2, #16
 80001f0:	611a      	str	r2, [r3, #16]
 80001f2:	e003      	b.n	80001fc <LCD_Data+0x78>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 80001f4:	4b2b      	ldr	r3, [pc, #172]	; (80002a4 <LCD_Data+0x120>)
 80001f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001fa:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <LCD_Data+0x120>)
 80001fe:	2201      	movs	r2, #1
 8000200:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f000 fe32 	bl	8000e6c <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 8000208:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <LCD_Data+0x120>)
 800020a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800020e:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 fe2b 	bl	8000e6c <HAL_Delay>

	if (data & 0x08)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 0308 	and.w	r3, r3, #8
 800021c:	2b00      	cmp	r3, #0
 800021e:	d004      	beq.n	800022a <LCD_Data+0xa6>
		D7_GPIO_Port->BSRR = D7_Pin;
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <LCD_Data+0x124>)
 8000222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	e003      	b.n	8000232 <LCD_Data+0xae>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <LCD_Data+0x124>)
 800022c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000230:	611a      	str	r2, [r3, #16]
	if (data & 0x04)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	2b00      	cmp	r3, #0
 800023a:	d003      	beq.n	8000244 <LCD_Data+0xc0>
		D6_GPIO_Port->BSRR = D6_Pin;
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <LCD_Data+0x124>)
 800023e:	2208      	movs	r2, #8
 8000240:	611a      	str	r2, [r3, #16]
 8000242:	e003      	b.n	800024c <LCD_Data+0xc8>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <LCD_Data+0x124>)
 8000246:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800024a:	611a      	str	r2, [r3, #16]
	if (data & 0x02)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <LCD_Data+0xda>
		D5_GPIO_Port->BSRR = D5_Pin;
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <LCD_Data+0x120>)
 8000258:	2220      	movs	r2, #32
 800025a:	611a      	str	r2, [r3, #16]
 800025c:	e003      	b.n	8000266 <LCD_Data+0xe2>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <LCD_Data+0x120>)
 8000260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000264:	611a      	str	r2, [r3, #16]
	if (data & 0x01)
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d003      	beq.n	8000278 <LCD_Data+0xf4>
		D4_GPIO_Port->BSRR = D4_Pin;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <LCD_Data+0x120>)
 8000272:	2210      	movs	r2, #16
 8000274:	611a      	str	r2, [r3, #16]
 8000276:	e003      	b.n	8000280 <LCD_Data+0xfc>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <LCD_Data+0x120>)
 800027a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800027e:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <LCD_Data+0x120>)
 8000282:	2201      	movs	r2, #1
 8000284:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f000 fdf0 	bl	8000e6c <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <LCD_Data+0x120>)
 800028e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000292:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fde9 	bl	8000e6c <HAL_Delay>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40010c00 	.word	0x40010c00

080002ac <LCD_String>:
*
*  @param1 String to be sended.
*
******************************************************************************/
void LCD_String(char *string)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	while (*string)
 80002b4:	e007      	b.n	80002c6 <LCD_String+0x1a>
	{
		LCD_Data(*string);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff62 	bl	8000184 <LCD_Data>
		string++;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	while (*string)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1f3      	bne.n	80002b6 <LCD_String+0xa>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <LCD_Cmd>:
*
*  @return None.
*
******************************************************************************/
void LCD_Cmd(uint8_t cmd)  // Fun��o para enviar um comando para o Display
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2108      	movs	r1, #8
 80002e6:	4855      	ldr	r0, [pc, #340]	; (800043c <LCD_Cmd+0x164>)
 80002e8:	f001 f85b 	bl	80013a2 <HAL_GPIO_WritePin>

	if (cmd & 0x80)
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da06      	bge.n	8000302 <LCD_Cmd+0x2a>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fa:	4851      	ldr	r0, [pc, #324]	; (8000440 <LCD_Cmd+0x168>)
 80002fc:	f001 f851 	bl	80013a2 <HAL_GPIO_WritePin>
 8000300:	e005      	b.n	800030e <LCD_Cmd+0x36>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000308:	484d      	ldr	r0, [pc, #308]	; (8000440 <LCD_Cmd+0x168>)
 800030a:	f001 f84a 	bl	80013a2 <HAL_GPIO_WritePin>
	if (cmd & 0x40)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000314:	2b00      	cmp	r3, #0
 8000316:	d005      	beq.n	8000324 <LCD_Cmd+0x4c>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2108      	movs	r1, #8
 800031c:	4848      	ldr	r0, [pc, #288]	; (8000440 <LCD_Cmd+0x168>)
 800031e:	f001 f840 	bl	80013a2 <HAL_GPIO_WritePin>
 8000322:	e004      	b.n	800032e <LCD_Cmd+0x56>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2108      	movs	r1, #8
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <LCD_Cmd+0x168>)
 800032a:	f001 f83a 	bl	80013a2 <HAL_GPIO_WritePin>
	if (cmd & 0x20)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d005      	beq.n	8000344 <LCD_Cmd+0x6c>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	483f      	ldr	r0, [pc, #252]	; (800043c <LCD_Cmd+0x164>)
 800033e:	f001 f830 	bl	80013a2 <HAL_GPIO_WritePin>
 8000342:	e004      	b.n	800034e <LCD_Cmd+0x76>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2120      	movs	r1, #32
 8000348:	483c      	ldr	r0, [pc, #240]	; (800043c <LCD_Cmd+0x164>)
 800034a:	f001 f82a 	bl	80013a2 <HAL_GPIO_WritePin>
	if (cmd & 0x10)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	2b00      	cmp	r3, #0
 8000356:	d005      	beq.n	8000364 <LCD_Cmd+0x8c>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2110      	movs	r1, #16
 800035c:	4837      	ldr	r0, [pc, #220]	; (800043c <LCD_Cmd+0x164>)
 800035e:	f001 f820 	bl	80013a2 <HAL_GPIO_WritePin>
 8000362:	e004      	b.n	800036e <LCD_Cmd+0x96>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4834      	ldr	r0, [pc, #208]	; (800043c <LCD_Cmd+0x164>)
 800036a:	f001 f81a 	bl	80013a2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2101      	movs	r1, #1
 8000372:	4832      	ldr	r0, [pc, #200]	; (800043c <LCD_Cmd+0x164>)
 8000374:	f001 f815 	bl	80013a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000378:	2001      	movs	r0, #1
 800037a:	f000 fd77 	bl	8000e6c <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2101      	movs	r1, #1
 8000382:	482e      	ldr	r0, [pc, #184]	; (800043c <LCD_Cmd+0x164>)
 8000384:	f001 f80d 	bl	80013a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f000 fd6f 	bl	8000e6c <HAL_Delay>

	if (cmd & 0x08)
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	2b00      	cmp	r3, #0
 8000396:	d006      	beq.n	80003a6 <LCD_Cmd+0xce>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039e:	4828      	ldr	r0, [pc, #160]	; (8000440 <LCD_Cmd+0x168>)
 80003a0:	f000 ffff 	bl	80013a2 <HAL_GPIO_WritePin>
 80003a4:	e005      	b.n	80003b2 <LCD_Cmd+0xda>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4824      	ldr	r0, [pc, #144]	; (8000440 <LCD_Cmd+0x168>)
 80003ae:	f000 fff8 	bl	80013a2 <HAL_GPIO_WritePin>
	if (cmd & 0x04)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d005      	beq.n	80003c8 <LCD_Cmd+0xf0>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	481f      	ldr	r0, [pc, #124]	; (8000440 <LCD_Cmd+0x168>)
 80003c2:	f000 ffee 	bl	80013a2 <HAL_GPIO_WritePin>
 80003c6:	e004      	b.n	80003d2 <LCD_Cmd+0xfa>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2108      	movs	r1, #8
 80003cc:	481c      	ldr	r0, [pc, #112]	; (8000440 <LCD_Cmd+0x168>)
 80003ce:	f000 ffe8 	bl	80013a2 <HAL_GPIO_WritePin>
	if (cmd & 0x02)
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 0302 	and.w	r3, r3, #2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d005      	beq.n	80003e8 <LCD_Cmd+0x110>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	4816      	ldr	r0, [pc, #88]	; (800043c <LCD_Cmd+0x164>)
 80003e2:	f000 ffde 	bl	80013a2 <HAL_GPIO_WritePin>
 80003e6:	e004      	b.n	80003f2 <LCD_Cmd+0x11a>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2120      	movs	r1, #32
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <LCD_Cmd+0x164>)
 80003ee:	f000 ffd8 	bl	80013a2 <HAL_GPIO_WritePin>
	if (cmd & 0x01)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d005      	beq.n	8000408 <LCD_Cmd+0x130>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2110      	movs	r1, #16
 8000400:	480e      	ldr	r0, [pc, #56]	; (800043c <LCD_Cmd+0x164>)
 8000402:	f000 ffce 	bl	80013a2 <HAL_GPIO_WritePin>
 8000406:	e004      	b.n	8000412 <LCD_Cmd+0x13a>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2110      	movs	r1, #16
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LCD_Cmd+0x164>)
 800040e:	f000 ffc8 	bl	80013a2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2101      	movs	r1, #1
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <LCD_Cmd+0x164>)
 8000418:	f000 ffc3 	bl	80013a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f000 fd25 	bl	8000e6c <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2101      	movs	r1, #1
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <LCD_Cmd+0x164>)
 8000428:	f000 ffbb 	bl	80013a2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 fd1d 	bl	8000e6c <HAL_Delay>

}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010800 	.word	0x40010800
 8000440:	40010c00 	.word	0x40010c00

08000444 <LCD_Clear>:
*
*  @return None.
*
******************************************************************************/
void LCD_Clear(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	LCD_Cmd(0x01);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff ff45 	bl	80002d8 <LCD_Cmd>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}

08000452 <LCD_Init>:
*
*  @return None.
*
******************************************************************************/
void LCD_Init(void)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0
	LCD_Cmd(0x33);
 8000456:	2033      	movs	r0, #51	; 0x33
 8000458:	f7ff ff3e 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x32);
 800045c:	2032      	movs	r0, #50	; 0x32
 800045e:	f7ff ff3b 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x28);
 8000462:	2028      	movs	r0, #40	; 0x28
 8000464:	f7ff ff38 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x06);
 8000468:	2006      	movs	r0, #6
 800046a:	f7ff ff35 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x0C);
 800046e:	200c      	movs	r0, #12
 8000470:	f7ff ff32 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x01);
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff2f 	bl	80002d8 <LCD_Cmd>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fc90 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 fa24 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 fade 	bl	8000a4c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000490:	f000 fa66 	bl	8000960 <MX_TIM2_Init>
  void Buzzer_Teclas();
  void ENTER_Boucing();
  void DEC_Boucing();
  void INC_Boucing();

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000494:	2108      	movs	r1, #8
 8000496:	48b2      	ldr	r0, [pc, #712]	; (8000760 <main+0x2e0>)
 8000498:	f001 fc22 	bl	8001ce0 <HAL_TIM_PWM_Start>
  TIM2->CCR3 = 0;
 800049c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a0:	2200      	movs	r2, #0
 80004a2:	63da      	str	r2, [r3, #60]	; 0x3c

  LCD_Init();
 80004a4:	f7ff ffd5 	bl	8000452 <LCD_Init>
  LCD_Cursor(0,2);
 80004a8:	2102      	movs	r1, #2
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff fe4e 	bl	800014c <LCD_Cursor>
  LCD_String("DC MOTOR SYS" );
 80004b0:	48ac      	ldr	r0, [pc, #688]	; (8000764 <main+0x2e4>)
 80004b2:	f7ff fefb 	bl	80002ac <LCD_String>
  LCD_Cursor(1,2);
 80004b6:	2102      	movs	r1, #2
 80004b8:	2001      	movs	r0, #1
 80004ba:	f7ff fe47 	bl	800014c <LCD_Cursor>
  LCD_String("VERSION: 1.0" );
 80004be:	48aa      	ldr	r0, [pc, #680]	; (8000768 <main+0x2e8>)
 80004c0:	f7ff fef4 	bl	80002ac <LCD_String>
  HAL_Delay(3000);
 80004c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004c8:	f000 fcd0 	bl	8000e6c <HAL_Delay>

  LCD_Cursor(0,2);
 80004cc:	2102      	movs	r1, #2
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fe3c 	bl	800014c <LCD_Cursor>
  LCD_String("DC MOTOR SYS");
 80004d4:	48a3      	ldr	r0, [pc, #652]	; (8000764 <main+0x2e4>)
 80004d6:	f7ff fee9 	bl	80002ac <LCD_String>
  LCD_Cursor(1,0);
 80004da:	2100      	movs	r1, #0
 80004dc:	2001      	movs	r0, #1
 80004de:	f7ff fe35 	bl	800014c <LCD_Cursor>
  LCD_String("     START     >");
 80004e2:	48a2      	ldr	r0, [pc, #648]	; (800076c <main+0x2ec>)
 80004e4:	f7ff fee2 	bl	80002ac <LCD_String>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
		if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin))
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	48a1      	ldr	r0, [pc, #644]	; (8000770 <main+0x2f0>)
 80004ec:	f000 ff42 	bl	8001374 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d00f      	beq.n	8000516 <main+0x96>
		{
			DEC_Boucing();
 80004f6:	f000 f9c7 	bl	8000888 <DEC_Boucing>
			Buzzer_Teclas();
 80004fa:	f000 f99b 	bl	8000834 <Buzzer_Teclas>
			LCD_Clear();
 80004fe:	f7ff ffa1 	bl	8000444 <LCD_Clear>
			aux_menu = 0;
 8000502:	4b9c      	ldr	r3, [pc, #624]	; (8000774 <main+0x2f4>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
			start = 1;
 8000508:	4b9b      	ldr	r3, [pc, #620]	; (8000778 <main+0x2f8>)
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]
			menu = 0;
 800050e:	4b9b      	ldr	r3, [pc, #620]	; (800077c <main+0x2fc>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	e013      	b.n	800053e <main+0xbe>
		}
		else if (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin) && start == 1)
 8000516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051a:	4895      	ldr	r0, [pc, #596]	; (8000770 <main+0x2f0>)
 800051c:	f000 ff2a 	bl	8001374 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00b      	beq.n	800053e <main+0xbe>
 8000526:	4b94      	ldr	r3, [pc, #592]	; (8000778 <main+0x2f8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d107      	bne.n	800053e <main+0xbe>
		{
			ENTER_Boucing();
 800052e:	f000 f9bd 	bl	80008ac <ENTER_Boucing>
			aux_menu = 0;
 8000532:	4b90      	ldr	r3, [pc, #576]	; (8000774 <main+0x2f4>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
			aux_start = 1;
 8000538:	4b91      	ldr	r3, [pc, #580]	; (8000780 <main+0x300>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
		}

		if ((aux_start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800053e:	4b90      	ldr	r3, [pc, #576]	; (8000780 <main+0x300>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d113      	bne.n	800056e <main+0xee>
 8000546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054a:	4889      	ldr	r0, [pc, #548]	; (8000770 <main+0x2f0>)
 800054c:	f000 ff12 	bl	8001374 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d00b      	beq.n	800056e <main+0xee>
		{
			ENTER_Boucing();
 8000556:	f000 f9a9 	bl	80008ac <ENTER_Boucing>
			Buzzer_Teclas();
 800055a:	f000 f96b 	bl	8000834 <Buzzer_Teclas>
			LCD_Clear();
 800055e:	f7ff ff71 	bl	8000444 <LCD_Clear>
			start = 2;
 8000562:	4b85      	ldr	r3, [pc, #532]	; (8000778 <main+0x2f8>)
 8000564:	2202      	movs	r2, #2
 8000566:	601a      	str	r2, [r3, #0]
			menu = 0;
 8000568:	4b84      	ldr	r3, [pc, #528]	; (800077c <main+0x2fc>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
		}

		switch (start)
 800056e:	4b82      	ldr	r3, [pc, #520]	; (8000778 <main+0x2f8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d002      	beq.n	800057c <main+0xfc>
 8000576:	2b02      	cmp	r3, #2
 8000578:	d012      	beq.n	80005a0 <main+0x120>
 800057a:	e05f      	b.n	800063c <main+0x1bc>
		{
		case 1:
			LCD_Cursor(0, 2);
 800057c:	2102      	movs	r1, #2
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff fde4 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000584:	4877      	ldr	r0, [pc, #476]	; (8000764 <main+0x2e4>)
 8000586:	f7ff fe91 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 800058a:	2100      	movs	r1, #0
 800058c:	2001      	movs	r0, #1
 800058e:	f7ff fddd 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000592:	4876      	ldr	r0, [pc, #472]	; (800076c <main+0x2ec>)
 8000594:	f7ff fe8a 	bl	80002ac <LCD_String>
			aux_start = 1;
 8000598:	4b79      	ldr	r3, [pc, #484]	; (8000780 <main+0x300>)
 800059a:	2201      	movs	r2, #1
 800059c:	601a      	str	r2, [r3, #0]
			break;
 800059e:	e04d      	b.n	800063c <main+0x1bc>

		case 2:

			aux_menu = 0;
 80005a0:	4b74      	ldr	r3, [pc, #464]	; (8000774 <main+0x2f4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
			accel_set = 1;
 80005a6:	4b77      	ldr	r3, [pc, #476]	; (8000784 <main+0x304>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
			LCD_Cursor(0, 0);
 80005ac:	2100      	movs	r1, #0
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff fdcc 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    ACCEL");
 80005b4:	4874      	ldr	r0, [pc, #464]	; (8000788 <main+0x308>)
 80005b6:	f7ff fe79 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2001      	movs	r0, #1
 80005be:	f7ff fdc5 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000  t:10s");
 80005c2:	4872      	ldr	r0, [pc, #456]	; (800078c <main+0x30c>)
 80005c4:	f7ff fe72 	bl	80002ac <LCD_String>
			HAL_Delay(10000);
 80005c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80005cc:	f000 fc4e 	bl	8000e6c <HAL_Delay>
			LCD_Clear();
 80005d0:	f7ff ff38 	bl	8000444 <LCD_Clear>

			accel_set = 0;
 80005d4:	4b6b      	ldr	r3, [pc, #428]	; (8000784 <main+0x304>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
			running_set = 1;
 80005da:	4b6d      	ldr	r3, [pc, #436]	; (8000790 <main+0x310>)
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
			LCD_Cursor(0, 0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff fdb2 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:  RUNNING");
 80005e8:	486a      	ldr	r0, [pc, #424]	; (8000794 <main+0x314>)
 80005ea:	f7ff fe5f 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 80005ee:	2100      	movs	r1, #0
 80005f0:	2001      	movs	r0, #1
 80005f2:	f7ff fdab 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000 t:120s");
 80005f6:	4868      	ldr	r0, [pc, #416]	; (8000798 <main+0x318>)
 80005f8:	f7ff fe58 	bl	80002ac <LCD_String>
			HAL_Delay(120000);
 80005fc:	4867      	ldr	r0, [pc, #412]	; (800079c <main+0x31c>)
 80005fe:	f000 fc35 	bl	8000e6c <HAL_Delay>
			LCD_Clear();
 8000602:	f7ff ff1f 	bl	8000444 <LCD_Clear>

			LCD_Cursor(0, 0);
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff fd9f 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    DECEL");
 800060e:	4864      	ldr	r0, [pc, #400]	; (80007a0 <main+0x320>)
 8000610:	f7ff fe4c 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f7ff fd98 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000  t:10s");
 800061c:	485b      	ldr	r0, [pc, #364]	; (800078c <main+0x30c>)
 800061e:	f7ff fe45 	bl	80002ac <LCD_String>
			HAL_Delay(10000);
 8000622:	f242 7010 	movw	r0, #10000	; 0x2710
 8000626:	f000 fc21 	bl	8000e6c <HAL_Delay>
			LCD_Clear();
 800062a:	f7ff ff0b 	bl	8000444 <LCD_Clear>
			start = 1;
 800062e:	4b52      	ldr	r3, [pc, #328]	; (8000778 <main+0x2f8>)
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
			menu = 0;
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <main+0x2fc>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
			break;
 800063a:	bf00      	nop
		}

		if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (accel_time == 0))
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	484b      	ldr	r0, [pc, #300]	; (8000770 <main+0x2f0>)
 8000642:	f000 fe97 	bl	8001374 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00f      	beq.n	800066c <main+0x1ec>
 800064c:	4b55      	ldr	r3, [pc, #340]	; (80007a4 <main+0x324>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d10b      	bne.n	800066c <main+0x1ec>
		{
			INC_Boucing();
 8000654:	f000 f904 	bl	8000860 <INC_Boucing>
			Buzzer_Teclas();
 8000658:	f000 f8ec 	bl	8000834 <Buzzer_Teclas>
			LCD_Clear();
 800065c:	f7ff fef2 	bl	8000444 <LCD_Clear>
			menu = 1;
 8000660:	4b46      	ldr	r3, [pc, #280]	; (800077c <main+0x2fc>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
			start = 0;
 8000666:	4b44      	ldr	r3, [pc, #272]	; (8000778 <main+0x2f8>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
		}

		if ((aux_menu == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800066c:	4b41      	ldr	r3, [pc, #260]	; (8000774 <main+0x2f4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d11d      	bne.n	80006b0 <main+0x230>
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	483d      	ldr	r0, [pc, #244]	; (8000770 <main+0x2f0>)
 800067a:	f000 fe7b 	bl	8001374 <HAL_GPIO_ReadPin>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d015      	beq.n	80006b0 <main+0x230>
		{
			aux_start = 0;
 8000684:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <main+0x300>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
			ENTER_Boucing();
 800068a:	f000 f90f 	bl	80008ac <ENTER_Boucing>
			Buzzer_Teclas();
 800068e:	f000 f8d1 	bl	8000834 <Buzzer_Teclas>
			LCD_Clear();
 8000692:	f7ff fed7 	bl	8000444 <LCD_Clear>
			menu = 2;
 8000696:	4b39      	ldr	r3, [pc, #228]	; (800077c <main+0x2fc>)
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
			a_inc = 5;
 800069c:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <main+0x328>)
 800069e:	2205      	movs	r2, #5
 80006a0:	601a      	str	r2, [r3, #0]

			sprintf(buffer_accel, "%d", a_inc);
 80006a2:	4b41      	ldr	r3, [pc, #260]	; (80007a8 <main+0x328>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	4940      	ldr	r1, [pc, #256]	; (80007ac <main+0x32c>)
 80006aa:	4841      	ldr	r0, [pc, #260]	; (80007b0 <main+0x330>)
 80006ac:	f002 f830 	bl	8002710 <siprintf>
		}
		if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (a_inc <= 80) && (accel_time == 1))
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	482e      	ldr	r0, [pc, #184]	; (8000770 <main+0x2f0>)
 80006b6:	f000 fe5d 	bl	8001374 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d02a      	beq.n	8000716 <main+0x296>
 80006c0:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <main+0x328>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b50      	cmp	r3, #80	; 0x50
 80006c6:	dc26      	bgt.n	8000716 <main+0x296>
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <main+0x324>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d122      	bne.n	8000716 <main+0x296>
		{
			menu = 3;
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <main+0x2fc>)
 80006d2:	2203      	movs	r2, #3
 80006d4:	601a      	str	r2, [r3, #0]
			INC_Boucing();
 80006d6:	f000 f8c3 	bl	8000860 <INC_Boucing>
			Buzzer_Teclas();
 80006da:	f000 f8ab 	bl	8000834 <Buzzer_Teclas>
			a_inc += 5;
 80006de:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <main+0x328>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3305      	adds	r3, #5
 80006e4:	4a30      	ldr	r2, [pc, #192]	; (80007a8 <main+0x328>)
 80006e6:	6013      	str	r3, [r2, #0]
			sprintf(buffer_accel, "%d", a_inc);
 80006e8:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <main+0x328>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	492f      	ldr	r1, [pc, #188]	; (80007ac <main+0x32c>)
 80006f0:	482f      	ldr	r0, [pc, #188]	; (80007b0 <main+0x330>)
 80006f2:	f002 f80d 	bl	8002710 <siprintf>

			if (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin))
 80006f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fa:	481d      	ldr	r0, [pc, #116]	; (8000770 <main+0x2f0>)
 80006fc:	f000 fe3a 	bl	8001374 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d007      	beq.n	8000716 <main+0x296>
			{
				ENTER_Boucing();
 8000706:	f000 f8d1 	bl	80008ac <ENTER_Boucing>
				Buzzer_Teclas();
 800070a:	f000 f893 	bl	8000834 <Buzzer_Teclas>
				a_inc = a_inc;
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <main+0x328>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <main+0x328>)
 8000714:	6013      	str	r3, [r2, #0]
			}
		}

		switch(menu)
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <main+0x2fc>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d065      	beq.n	80007ea <main+0x36a>
 800071e:	2b03      	cmp	r3, #3
 8000720:	f73f aee2 	bgt.w	80004e8 <main+0x68>
 8000724:	2b01      	cmp	r3, #1
 8000726:	d002      	beq.n	800072e <main+0x2ae>
 8000728:	2b02      	cmp	r3, #2
 800072a:	d045      	beq.n	80007b8 <main+0x338>
 800072c:	e076      	b.n	800081c <main+0x39c>
		{
		case 1:
			LCD_Cursor(0, 2);
 800072e:	2102      	movs	r1, #2
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fd0b 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000736:	480b      	ldr	r0, [pc, #44]	; (8000764 <main+0x2e4>)
 8000738:	f7ff fdb8 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 800073c:	2100      	movs	r1, #0
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fd04 	bl	800014c <LCD_Cursor>
			LCD_String("<     MENU     ");
 8000744:	481b      	ldr	r0, [pc, #108]	; (80007b4 <main+0x334>)
 8000746:	f7ff fdb1 	bl	80002ac <LCD_String>
			aux_menu = 1;
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <main+0x2f4>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
			aux_start = 0;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <main+0x300>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
			start = 0;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <main+0x2f8>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
			break;
 800075c:	e05e      	b.n	800081c <main+0x39c>
 800075e:	bf00      	nop
 8000760:	20000078 	.word	0x20000078
 8000764:	0800308c 	.word	0x0800308c
 8000768:	0800309c 	.word	0x0800309c
 800076c:	080030ac 	.word	0x080030ac
 8000770:	40010c00 	.word	0x40010c00
 8000774:	200000c8 	.word	0x200000c8
 8000778:	200000c4 	.word	0x200000c4
 800077c:	200000c0 	.word	0x200000c0
 8000780:	200000cc 	.word	0x200000cc
 8000784:	200000d8 	.word	0x200000d8
 8000788:	080030c0 	.word	0x080030c0
 800078c:	080030d4 	.word	0x080030d4
 8000790:	200000dc 	.word	0x200000dc
 8000794:	080030e8 	.word	0x080030e8
 8000798:	080030fc 	.word	0x080030fc
 800079c:	0001d4c0 	.word	0x0001d4c0
 80007a0:	08003110 	.word	0x08003110
 80007a4:	200000d0 	.word	0x200000d0
 80007a8:	200000d4 	.word	0x200000d4
 80007ac:	08003124 	.word	0x08003124
 80007b0:	200000e0 	.word	0x200000e0
 80007b4:	08003128 	.word	0x08003128

		case 2:
			LCD_Cursor(0, 0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff fcc6 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 80007c0:	4817      	ldr	r0, [pc, #92]	; (8000820 <main+0x3a0>)
 80007c2:	f7ff fd73 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 80007c6:	2107      	movs	r1, #7
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fcbf 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 80007ce:	4815      	ldr	r0, [pc, #84]	; (8000824 <main+0x3a4>)
 80007d0:	f7ff fd6c 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 80007d4:	2108      	movs	r1, #8
 80007d6:	2001      	movs	r0, #1
 80007d8:	f7ff fcb8 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 80007dc:	4812      	ldr	r0, [pc, #72]	; (8000828 <main+0x3a8>)
 80007de:	f7ff fd65 	bl	80002ac <LCD_String>
			accel_time = 1;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <main+0x3ac>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
			break;
 80007e8:	e018      	b.n	800081c <main+0x39c>

		case 3:
			LCD_Cursor(0, 0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff fcad 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <main+0x3a0>)
 80007f4:	f7ff fd5a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 80007f8:	2106      	movs	r1, #6
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff fca6 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <main+0x3a4>)
 8000802:	f7ff fd53 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000806:	2108      	movs	r1, #8
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff fc9f 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <main+0x3a8>)
 8000810:	f7ff fd4c 	bl	80002ac <LCD_String>
			start = 0;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <main+0x3b0>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
			break;
 800081a:	bf00      	nop
		if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin))
 800081c:	e664      	b.n	80004e8 <main+0x68>
 800081e:	bf00      	nop
 8000820:	08003138 	.word	0x08003138
 8000824:	200000e0 	.word	0x200000e0
 8000828:	0800314c 	.word	0x0800314c
 800082c:	200000d0 	.word	0x200000d0
 8000830:	200000c4 	.word	0x200000c4

08000834 <Buzzer_Teclas>:
	}

    /* USER CODE BEGIN 3 */
  }
	void Buzzer_Teclas()
		{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2102      	movs	r1, #2
 800083c:	4807      	ldr	r0, [pc, #28]	; (800085c <Buzzer_Teclas+0x28>)
 800083e:	f000 fdb0 	bl	80013a2 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000842:	2032      	movs	r0, #50	; 0x32
 8000844:	f000 fb12 	bl	8000e6c <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2102      	movs	r1, #2
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <Buzzer_Teclas+0x28>)
 800084e:	f000 fda8 	bl	80013a2 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000852:	2032      	movs	r0, #50	; 0x32
 8000854:	f000 fb0a 	bl	8000e6c <HAL_Delay>
		}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40010800 	.word	0x40010800

08000860 <INC_Boucing>:

	void INC_Boucing()
	{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000864:	200a      	movs	r0, #10
 8000866:	f000 fb01 	bl	8000e6c <HAL_Delay>
		while (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin));
 800086a:	bf00      	nop
 800086c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <INC_Boucing+0x24>)
 8000872:	f000 fd7f 	bl	8001374 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1f7      	bne.n	800086c <INC_Boucing+0xc>
	}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40010c00 	.word	0x40010c00

08000888 <DEC_Boucing>:
	void DEC_Boucing()
	{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 800088c:	200a      	movs	r0, #10
 800088e:	f000 faed 	bl	8000e6c <HAL_Delay>
		while (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin));
 8000892:	bf00      	nop
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <DEC_Boucing+0x20>)
 8000898:	f000 fd6c 	bl	8001374 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f8      	bne.n	8000894 <DEC_Boucing+0xc>
	}
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40010c00 	.word	0x40010c00

080008ac <ENTER_Boucing>:
	void ENTER_Boucing()
	{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fadb 	bl	8000e6c <HAL_Delay>
		while (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin));
 80008b6:	bf00      	nop
 80008b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <ENTER_Boucing+0x24>)
 80008be:	f000 fd59 	bl	8001374 <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1f7      	bne.n	80008b8 <ENTER_Boucing+0xc>
	}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010c00 	.word	0x40010c00

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b090      	sub	sp, #64	; 0x40
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	2228      	movs	r2, #40	; 0x28
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 ff34 	bl	8002750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000908:	2302      	movs	r3, #2
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000912:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fd59 	bl	80013d4 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000928:	f000 f930 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092c:	230f      	movs	r3, #15
 800092e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2102      	movs	r1, #2
 8000946:	4618      	mov	r0, r3
 8000948:	f000 ffc6 	bl	80018d8 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000952:	f000 f91b 	bl	8000b8c <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3740      	adds	r7, #64	; 0x40
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_TIM2_Init+0xe8>)
 8000992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <MX_TIM2_Init+0xe8>)
 800099a:	2247      	movs	r2, #71	; 0x47
 800099c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_TIM2_Init+0xe8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <MX_TIM2_Init+0xe8>)
 80009a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_TIM2_Init+0xe8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_TIM2_Init+0xe8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b8:	4823      	ldr	r0, [pc, #140]	; (8000a48 <MX_TIM2_Init+0xe8>)
 80009ba:	f001 f8e9 	bl	8001b90 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009c4:	f000 f8e2 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d2:	4619      	mov	r1, r3
 80009d4:	481c      	ldr	r0, [pc, #112]	; (8000a48 <MX_TIM2_Init+0xe8>)
 80009d6:	f001 fae1 	bl	8001f9c <HAL_TIM_ConfigClockSource>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009e0:	f000 f8d4 	bl	8000b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e4:	4818      	ldr	r0, [pc, #96]	; (8000a48 <MX_TIM2_Init+0xe8>)
 80009e6:	f001 f922 	bl	8001c2e <HAL_TIM_PWM_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009f0:	f000 f8cc 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	4619      	mov	r1, r3
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_TIM2_Init+0xe8>)
 8000a04:	f001 fe2c 	bl	8002660 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a0e:	f000 f8bd 	bl	8000b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a12:	2360      	movs	r3, #96	; 0x60
 8000a14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2208      	movs	r2, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM2_Init+0xe8>)
 8000a2a:	f001 f9f5 	bl	8001e18 <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a34:	f000 f8aa 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM2_Init+0xe8>)
 8000a3a:	f000 f8fb 	bl	8000c34 <HAL_TIM_MspPostInit>

}
 8000a3e:	bf00      	nop
 8000a40:	3738      	adds	r7, #56	; 0x38
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000078 	.word	0x20000078

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a44      	ldr	r2, [pc, #272]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a78:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a3e      	ldr	r2, [pc, #248]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000a7e:	f043 0320 	orr.w	r3, r3, #32
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0320 	and.w	r3, r3, #32
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a32      	ldr	r2, [pc, #200]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	482d      	ldr	r0, [pc, #180]	; (8000b7c <MX_GPIO_Init+0x130>)
 8000ac8:	f000 fc6b 	bl	80013a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 8000acc:	2200      	movs	r2, #0
 8000ace:	213b      	movs	r1, #59	; 0x3b
 8000ad0:	482b      	ldr	r0, [pc, #172]	; (8000b80 <MX_GPIO_Init+0x134>)
 8000ad2:	f000 fc66 	bl	80013a2 <HAL_GPIO_WritePin>
                          |D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f241 0108 	movw	r1, #4104	; 0x1008
 8000adc:	4829      	ldr	r0, [pc, #164]	; (8000b84 <MX_GPIO_Init+0x138>)
 8000ade:	f000 fc60 	bl	80013a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	4820      	ldr	r0, [pc, #128]	; (8000b7c <MX_GPIO_Init+0x130>)
 8000afc:	f000 fabe 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin BUZZER_Pin RS_Pin D4_Pin
                           D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 8000b00:	233b      	movs	r3, #59	; 0x3b
 8000b02:	613b      	str	r3, [r7, #16]
                          |D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <MX_GPIO_Init+0x134>)
 8000b18:	f000 fab0 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin;
 8000b1c:	f241 0308 	movw	r3, #4104	; 0x1008
 8000b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4619      	mov	r1, r3
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MX_GPIO_Init+0x138>)
 8000b36:	f000 faa1 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : TACHOMETER_Pin */
  GPIO_InitStruct.Pin = TACHOMETER_Pin;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_GPIO_Init+0x13c>)
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TACHOMETER_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_GPIO_Init+0x138>)
 8000b50:	f000 fa94 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : DEC_Pin ENTER_Pin INC_Pin */
  GPIO_InitStruct.Pin = DEC_Pin|ENTER_Pin|INC_Pin;
 8000b54:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <MX_GPIO_Init+0x138>)
 8000b6a:	f000 fa87 	bl	800107c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	40010800 	.word	0x40010800
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	10110000 	.word	0x10110000

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	61d3      	str	r3, [r2, #28]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_MspInit+0x60>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_MspInit+0x60>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000

08000bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0c:	d10b      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_TIM_Base_MspInit+0x34>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_TIM_Base_MspInit+0x34>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_TIM_Base_MspInit+0x34>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c52:	d117      	bne.n	8000c84 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_TIM_MspPostInit+0x58>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <HAL_TIM_MspPostInit+0x58>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_TIM_MspPostInit+0x58>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_Pin;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <HAL_TIM_MspPostInit+0x5c>)
 8000c80:	f000 f9fc 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010800 	.word	0x40010800

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cda:	f000 f8ab 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f001 fd24 	bl	8002760 <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20002800 	.word	0x20002800
 8000d44:	00000400 	.word	0x00000400
 8000d48:	200000f0 	.word	0x200000f0
 8000d4c:	20000240 	.word	0x20000240

08000d50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d5c:	f7ff fff8 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d62:	490c      	ldr	r1, [pc, #48]	; (8000d94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d64:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d78:	4c09      	ldr	r4, [pc, #36]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d86:	f001 fcf1 	bl	800276c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fb79 	bl	8000480 <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d98:	080031b0 	.word	0x080031b0
  ldr r2, =_sbss
 8000d9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000da0:	20000240 	.word	0x20000240

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f92b 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fee8 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f935 	bl	8001062 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f90b 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200000f4 	.word	0x200000f4

08000e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	200000f4 	.word	0x200000f4

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fff0 	bl	8000e58 <HAL_GetTick>
 8000e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e92:	bf00      	nop
 8000e94:	f7ff ffe0 	bl	8000e58 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff90 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff49 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff5e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff90 	bl	8000f6c <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5f 	bl	8000f18 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb0 	bl	8000fd0 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b08b      	sub	sp, #44	; 0x2c
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	e161      	b.n	8001354 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001090:	2201      	movs	r2, #1
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8150 	bne.w	800134e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4a97      	ldr	r2, [pc, #604]	; (8001310 <HAL_GPIO_Init+0x294>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d05e      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010b8:	4a95      	ldr	r2, [pc, #596]	; (8001310 <HAL_GPIO_Init+0x294>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d875      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010be:	4a95      	ldr	r2, [pc, #596]	; (8001314 <HAL_GPIO_Init+0x298>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d058      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010c4:	4a93      	ldr	r2, [pc, #588]	; (8001314 <HAL_GPIO_Init+0x298>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d86f      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ca:	4a93      	ldr	r2, [pc, #588]	; (8001318 <HAL_GPIO_Init+0x29c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d052      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010d0:	4a91      	ldr	r2, [pc, #580]	; (8001318 <HAL_GPIO_Init+0x29c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d869      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010d6:	4a91      	ldr	r2, [pc, #580]	; (800131c <HAL_GPIO_Init+0x2a0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d04c      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010dc:	4a8f      	ldr	r2, [pc, #572]	; (800131c <HAL_GPIO_Init+0x2a0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d863      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010e2:	4a8f      	ldr	r2, [pc, #572]	; (8001320 <HAL_GPIO_Init+0x2a4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d046      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
 80010e8:	4a8d      	ldr	r2, [pc, #564]	; (8001320 <HAL_GPIO_Init+0x2a4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d85d      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010ee:	2b12      	cmp	r3, #18
 80010f0:	d82a      	bhi.n	8001148 <HAL_GPIO_Init+0xcc>
 80010f2:	2b12      	cmp	r3, #18
 80010f4:	d859      	bhi.n	80011aa <HAL_GPIO_Init+0x12e>
 80010f6:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <HAL_GPIO_Init+0x80>)
 80010f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fc:	08001177 	.word	0x08001177
 8001100:	08001151 	.word	0x08001151
 8001104:	08001163 	.word	0x08001163
 8001108:	080011a5 	.word	0x080011a5
 800110c:	080011ab 	.word	0x080011ab
 8001110:	080011ab 	.word	0x080011ab
 8001114:	080011ab 	.word	0x080011ab
 8001118:	080011ab 	.word	0x080011ab
 800111c:	080011ab 	.word	0x080011ab
 8001120:	080011ab 	.word	0x080011ab
 8001124:	080011ab 	.word	0x080011ab
 8001128:	080011ab 	.word	0x080011ab
 800112c:	080011ab 	.word	0x080011ab
 8001130:	080011ab 	.word	0x080011ab
 8001134:	080011ab 	.word	0x080011ab
 8001138:	080011ab 	.word	0x080011ab
 800113c:	080011ab 	.word	0x080011ab
 8001140:	08001159 	.word	0x08001159
 8001144:	0800116d 	.word	0x0800116d
 8001148:	4a76      	ldr	r2, [pc, #472]	; (8001324 <HAL_GPIO_Init+0x2a8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114e:	e02c      	b.n	80011aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e029      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	3304      	adds	r3, #4
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e024      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	3308      	adds	r3, #8
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e01f      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	330c      	adds	r3, #12
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e01a      	b.n	80011ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800117e:	2304      	movs	r3, #4
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e013      	b.n	80011ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d105      	bne.n	8001198 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	611a      	str	r2, [r3, #16]
          break;
 8001196:	e009      	b.n	80011ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001198:	2308      	movs	r3, #8
 800119a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	615a      	str	r2, [r3, #20]
          break;
 80011a2:	e003      	b.n	80011ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
          break;
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x130>
          break;
 80011aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2bff      	cmp	r3, #255	; 0xff
 80011b0:	d801      	bhi.n	80011b6 <HAL_GPIO_Init+0x13a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	e001      	b.n	80011ba <HAL_GPIO_Init+0x13e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3304      	adds	r3, #4
 80011ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2bff      	cmp	r3, #255	; 0xff
 80011c0:	d802      	bhi.n	80011c8 <HAL_GPIO_Init+0x14c>
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	e002      	b.n	80011ce <HAL_GPIO_Init+0x152>
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	3b08      	subs	r3, #8
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	210f      	movs	r1, #15
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	6a39      	ldr	r1, [r7, #32]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	431a      	orrs	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80a9 	beq.w	800134e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011fc:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <HAL_GPIO_Init+0x2ac>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a49      	ldr	r2, [pc, #292]	; (8001328 <HAL_GPIO_Init+0x2ac>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b47      	ldr	r3, [pc, #284]	; (8001328 <HAL_GPIO_Init+0x2ac>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001214:	4a45      	ldr	r2, [pc, #276]	; (800132c <HAL_GPIO_Init+0x2b0>)
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <HAL_GPIO_Init+0x2b4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00d      	beq.n	800125c <HAL_GPIO_Init+0x1e0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3c      	ldr	r2, [pc, #240]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_Init+0x1dc>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3b      	ldr	r2, [pc, #236]	; (8001338 <HAL_GPIO_Init+0x2bc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d101      	bne.n	8001254 <HAL_GPIO_Init+0x1d8>
 8001250:	2302      	movs	r3, #2
 8001252:	e004      	b.n	800125e <HAL_GPIO_Init+0x1e2>
 8001254:	2303      	movs	r3, #3
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x1e2>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_GPIO_Init+0x1e2>
 800125c:	2300      	movs	r3, #0
 800125e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001260:	f002 0203 	and.w	r2, r2, #3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4093      	lsls	r3, r2
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800126e:	492f      	ldr	r1, [pc, #188]	; (800132c <HAL_GPIO_Init+0x2b0>)
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <HAL_GPIO_Init+0x2c0>)
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	492b      	ldr	r1, [pc, #172]	; (800133c <HAL_GPIO_Init+0x2c0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	608b      	str	r3, [r1, #8]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_GPIO_Init+0x2c0>)
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	4927      	ldr	r1, [pc, #156]	; (800133c <HAL_GPIO_Init+0x2c0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_GPIO_Init+0x2c0>)
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	4921      	ldr	r1, [pc, #132]	; (800133c <HAL_GPIO_Init+0x2c0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	60cb      	str	r3, [r1, #12]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_GPIO_Init+0x2c0>)
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	491d      	ldr	r1, [pc, #116]	; (800133c <HAL_GPIO_Init+0x2c0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_GPIO_Init+0x2c0>)
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4917      	ldr	r1, [pc, #92]	; (800133c <HAL_GPIO_Init+0x2c0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_GPIO_Init+0x2c0>)
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4913      	ldr	r1, [pc, #76]	; (800133c <HAL_GPIO_Init+0x2c0>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01f      	beq.n	8001340 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_GPIO_Init+0x2c0>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	490d      	ldr	r1, [pc, #52]	; (800133c <HAL_GPIO_Init+0x2c0>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
 800130c:	e01f      	b.n	800134e <HAL_GPIO_Init+0x2d2>
 800130e:	bf00      	nop
 8001310:	10320000 	.word	0x10320000
 8001314:	10310000 	.word	0x10310000
 8001318:	10220000 	.word	0x10220000
 800131c:	10210000 	.word	0x10210000
 8001320:	10120000 	.word	0x10120000
 8001324:	10110000 	.word	0x10110000
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	40010800 	.word	0x40010800
 8001334:	40010c00 	.word	0x40010c00
 8001338:	40011000 	.word	0x40011000
 800133c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_GPIO_Init+0x2f4>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	43db      	mvns	r3, r3
 8001348:	4909      	ldr	r1, [pc, #36]	; (8001370 <HAL_GPIO_Init+0x2f4>)
 800134a:	4013      	ands	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	3301      	adds	r3, #1
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	f47f ae96 	bne.w	8001090 <HAL_GPIO_Init+0x14>
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	372c      	adds	r7, #44	; 0x2c
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	807b      	strh	r3, [r7, #2]
 80013ae:	4613      	mov	r3, r2
 80013b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b2:	787b      	ldrb	r3, [r7, #1]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013be:	e003      	b.n	80013c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	041a      	lsls	r2, r3, #16
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	611a      	str	r2, [r3, #16]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e272      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8087 	beq.w	8001502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f4:	4b92      	ldr	r3, [pc, #584]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d00c      	beq.n	800141a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001400:	4b8f      	ldr	r3, [pc, #572]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d112      	bne.n	8001432 <HAL_RCC_OscConfig+0x5e>
 800140c:	4b8c      	ldr	r3, [pc, #560]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d10b      	bne.n	8001432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141a:	4b89      	ldr	r3, [pc, #548]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d06c      	beq.n	8001500 <HAL_RCC_OscConfig+0x12c>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d168      	bne.n	8001500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e24c      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x76>
 800143c:	4b80      	ldr	r3, [pc, #512]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a7f      	ldr	r2, [pc, #508]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e02e      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x98>
 8001452:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a7a      	ldr	r2, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b78      	ldr	r3, [pc, #480]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a77      	ldr	r2, [pc, #476]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0xbc>
 8001476:	4b72      	ldr	r3, [pc, #456]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a71      	ldr	r2, [pc, #452]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b6f      	ldr	r3, [pc, #444]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6e      	ldr	r2, [pc, #440]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 8001490:	4b6b      	ldr	r3, [pc, #428]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a6a      	ldr	r2, [pc, #424]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b68      	ldr	r3, [pc, #416]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a67      	ldr	r2, [pc, #412]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fcd2 	bl	8000e58 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcce 	bl	8000e58 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e200      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xe4>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcbe 	bl	8000e58 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fcba 	bl	8000e58 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1ec      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x10c>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d063      	beq.n	80015d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800150e:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b08      	cmp	r3, #8
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_OscConfig+0x18c>
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x176>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e1c0      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4939      	ldr	r1, [pc, #228]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	e03a      	b.n	80015d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_RCC_OscConfig+0x270>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fc73 	bl	8000e58 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fc6f 	bl	8000e58 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1a1      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4927      	ldr	r1, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_RCC_OscConfig+0x270>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc52 	bl	8000e58 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc4e 	bl	8000e58 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e180      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d03a      	beq.n	8001658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d019      	beq.n	800161e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_RCC_OscConfig+0x274>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fc32 	bl	8000e58 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc2e 	bl	8000e58 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e160      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_RCC_OscConfig+0x26c>)
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f000 fa9c 	bl	8001b54 <RCC_Delay>
 800161c:	e01c      	b.n	8001658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_RCC_OscConfig+0x274>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff fc18 	bl	8000e58 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162a:	e00f      	b.n	800164c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fc14 	bl	8000e58 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d908      	bls.n	800164c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e146      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	42420000 	.word	0x42420000
 8001648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	4b92      	ldr	r3, [pc, #584]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e9      	bne.n	800162c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a6 	beq.w	80017b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166a:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10d      	bne.n	8001692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	4b88      	ldr	r3, [pc, #544]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a87      	ldr	r2, [pc, #540]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b85      	ldr	r3, [pc, #532]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b82      	ldr	r3, [pc, #520]	; (800189c <HAL_RCC_OscConfig+0x4c8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d118      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169e:	4b7f      	ldr	r3, [pc, #508]	; (800189c <HAL_RCC_OscConfig+0x4c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a7e      	ldr	r2, [pc, #504]	; (800189c <HAL_RCC_OscConfig+0x4c8>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fbd5 	bl	8000e58 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fbd1 	bl	8000e58 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b64      	cmp	r3, #100	; 0x64
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e103      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	4b75      	ldr	r3, [pc, #468]	; (800189c <HAL_RCC_OscConfig+0x4c8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x312>
 80016d8:	4b6f      	ldr	r3, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a6e      	ldr	r2, [pc, #440]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	e02d      	b.n	8001742 <HAL_RCC_OscConfig+0x36e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x334>
 80016ee:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a69      	ldr	r2, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a66      	ldr	r2, [pc, #408]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	6213      	str	r3, [r2, #32]
 8001706:	e01c      	b.n	8001742 <HAL_RCC_OscConfig+0x36e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d10c      	bne.n	800172a <HAL_RCC_OscConfig+0x356>
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a60      	ldr	r2, [pc, #384]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a5d      	ldr	r2, [pc, #372]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	e00b      	b.n	8001742 <HAL_RCC_OscConfig+0x36e>
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a5a      	ldr	r2, [pc, #360]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a57      	ldr	r2, [pc, #348]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d015      	beq.n	8001776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fb85 	bl	8000e58 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff fb81 	bl	8000e58 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e0b1      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ee      	beq.n	8001752 <HAL_RCC_OscConfig+0x37e>
 8001774:	e014      	b.n	80017a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff fb6f 	bl	8000e58 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7ff fb6b 	bl	8000e58 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	; 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e09b      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001794:	4b40      	ldr	r3, [pc, #256]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d105      	bne.n	80017b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a6:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a3b      	ldr	r2, [pc, #236]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8087 	beq.w	80018ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017bc:	4b36      	ldr	r3, [pc, #216]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d061      	beq.n	800188c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d146      	bne.n	800185e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d0:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <HAL_RCC_OscConfig+0x4cc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff fb3f 	bl	8000e58 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff fb3b 	bl	8000e58 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e06d      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d108      	bne.n	8001818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	4921      	ldr	r1, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a19      	ldr	r1, [r3, #32]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	430b      	orrs	r3, r1
 800182a:	491b      	ldr	r1, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x4cc>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb0f 	bl	8000e58 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb0b 	bl	8000e58 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e03d      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x46a>
 800185c:	e035      	b.n	80018ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_RCC_OscConfig+0x4cc>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff faf8 	bl	8000e58 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff faf4 	bl	8000e58 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e026      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x498>
 800188a:	e01e      	b.n	80018ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e019      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
 8001898:	40021000 	.word	0x40021000
 800189c:	40007000 	.word	0x40007000
 80018a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_OscConfig+0x500>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0d0      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d910      	bls.n	800191c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	4965      	ldr	r1, [pc, #404]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b63      	ldr	r3, [pc, #396]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0b8      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001934:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a58      	ldr	r2, [pc, #352]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800193e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	494d      	ldr	r1, [pc, #308]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d040      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d115      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e07f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e073      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06b      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b6:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f023 0203 	bic.w	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4936      	ldr	r1, [pc, #216]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c8:	f7ff fa46 	bl	8000e58 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d0:	f7ff fa42 	bl	8000e58 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e053      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 020c 	and.w	r2, r3, #12
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d1eb      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d210      	bcs.n	8001a28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 0207 	bic.w	r2, r3, #7
 8001a0e:	4922      	ldr	r1, [pc, #136]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e032      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4916      	ldr	r1, [pc, #88]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	490e      	ldr	r1, [pc, #56]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a66:	f000 f821 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	490a      	ldr	r1, [pc, #40]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8001a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f9a4 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	08003150 	.word	0x08003150
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x30>
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x36>
 8001ada:	e027      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ade:	613b      	str	r3, [r7, #16]
      break;
 8001ae0:	e027      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	0c9b      	lsrs	r3, r3, #18
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d010      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0c5b      	lsrs	r3, r3, #17
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
 8001b08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b0e:	fb03 f202 	mul.w	r2, r3, r2
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e004      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	613b      	str	r3, [r7, #16]
      break;
 8001b2a:	e002      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b2e:	613b      	str	r3, [r7, #16]
      break;
 8001b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b32:	693b      	ldr	r3, [r7, #16]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	007a1200 	.word	0x007a1200
 8001b48:	08003160 	.word	0x08003160
 8001b4c:	08003170 	.word	0x08003170
 8001b50:	003d0900 	.word	0x003d0900

08001b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <RCC_Delay+0x34>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <RCC_Delay+0x38>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0a5b      	lsrs	r3, r3, #9
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b70:	bf00      	nop
  }
  while (Delay --);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	60fa      	str	r2, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f9      	bne.n	8001b70 <RCC_Delay+0x1c>
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	10624dd3 	.word	0x10624dd3

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e041      	b.n	8001c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff f820 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 faac 	bl	800212c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e041      	b.n	8001cc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d106      	bne.n	8001c5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f839 	bl	8001ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	f000 fa5d 	bl	800212c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <HAL_TIM_PWM_Start+0x24>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e022      	b.n	8001d4a <HAL_TIM_PWM_Start+0x6a>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d109      	bne.n	8001d1e <HAL_TIM_PWM_Start+0x3e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e015      	b.n	8001d4a <HAL_TIM_PWM_Start+0x6a>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d109      	bne.n	8001d38 <HAL_TIM_PWM_Start+0x58>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e008      	b.n	8001d4a <HAL_TIM_PWM_Start+0x6a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e059      	b.n	8001e06 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_PWM_Start+0x82>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d60:	e013      	b.n	8001d8a <HAL_TIM_PWM_Start+0xaa>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_PWM_Start+0x92>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	e00b      	b.n	8001d8a <HAL_TIM_PWM_Start+0xaa>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d104      	bne.n	8001d82 <HAL_TIM_PWM_Start+0xa2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d80:	e003      	b.n	8001d8a <HAL_TIM_PWM_Start+0xaa>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fc40 	bl	8002618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <HAL_TIM_PWM_Start+0x130>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d107      	bne.n	8001db2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_TIM_PWM_Start+0x130>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_TIM_PWM_Start+0xf0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc4:	d004      	beq.n	8001dd0 <HAL_TIM_PWM_Start+0xf0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <HAL_TIM_PWM_Start+0x134>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d111      	bne.n	8001df4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d010      	beq.n	8001e04 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df2:	e007      	b.n	8001e04 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	40000400 	.word	0x40000400

08001e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e0ae      	b.n	8001f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	f200 809f 	bhi.w	8001f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e81 	.word	0x08001e81
 8001e50:	08001f85 	.word	0x08001f85
 8001e54:	08001f85 	.word	0x08001f85
 8001e58:	08001f85 	.word	0x08001f85
 8001e5c:	08001ec1 	.word	0x08001ec1
 8001e60:	08001f85 	.word	0x08001f85
 8001e64:	08001f85 	.word	0x08001f85
 8001e68:	08001f85 	.word	0x08001f85
 8001e6c:	08001f03 	.word	0x08001f03
 8001e70:	08001f85 	.word	0x08001f85
 8001e74:	08001f85 	.word	0x08001f85
 8001e78:	08001f85 	.word	0x08001f85
 8001e7c:	08001f43 	.word	0x08001f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f9a8 	bl	80021dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0208 	orr.w	r2, r2, #8
 8001e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6999      	ldr	r1, [r3, #24]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	619a      	str	r2, [r3, #24]
      break;
 8001ebe:	e064      	b.n	8001f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f9ee 	bl	80022a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6999      	ldr	r1, [r3, #24]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	021a      	lsls	r2, r3, #8
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	619a      	str	r2, [r3, #24]
      break;
 8001f00:	e043      	b.n	8001f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fa37 	bl	800237c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0208 	orr.w	r2, r2, #8
 8001f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0204 	bic.w	r2, r2, #4
 8001f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69d9      	ldr	r1, [r3, #28]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	61da      	str	r2, [r3, #28]
      break;
 8001f40:	e023      	b.n	8001f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 fa81 	bl	8002450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69d9      	ldr	r1, [r3, #28]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	021a      	lsls	r2, r3, #8
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	61da      	str	r2, [r3, #28]
      break;
 8001f82:	e002      	b.n	8001f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
      break;
 8001f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e0b4      	b.n	8002122 <HAL_TIM_ConfigClockSource+0x186>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ff0:	d03e      	beq.n	8002070 <HAL_TIM_ConfigClockSource+0xd4>
 8001ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ff6:	f200 8087 	bhi.w	8002108 <HAL_TIM_ConfigClockSource+0x16c>
 8001ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ffe:	f000 8086 	beq.w	800210e <HAL_TIM_ConfigClockSource+0x172>
 8002002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002006:	d87f      	bhi.n	8002108 <HAL_TIM_ConfigClockSource+0x16c>
 8002008:	2b70      	cmp	r3, #112	; 0x70
 800200a:	d01a      	beq.n	8002042 <HAL_TIM_ConfigClockSource+0xa6>
 800200c:	2b70      	cmp	r3, #112	; 0x70
 800200e:	d87b      	bhi.n	8002108 <HAL_TIM_ConfigClockSource+0x16c>
 8002010:	2b60      	cmp	r3, #96	; 0x60
 8002012:	d050      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002014:	2b60      	cmp	r3, #96	; 0x60
 8002016:	d877      	bhi.n	8002108 <HAL_TIM_ConfigClockSource+0x16c>
 8002018:	2b50      	cmp	r3, #80	; 0x50
 800201a:	d03c      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0xfa>
 800201c:	2b50      	cmp	r3, #80	; 0x50
 800201e:	d873      	bhi.n	8002108 <HAL_TIM_ConfigClockSource+0x16c>
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d058      	beq.n	80020d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d86f      	bhi.n	8002108 <HAL_TIM_ConfigClockSource+0x16c>
 8002028:	2b30      	cmp	r3, #48	; 0x30
 800202a:	d064      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x15a>
 800202c:	2b30      	cmp	r3, #48	; 0x30
 800202e:	d86b      	bhi.n	8002108 <HAL_TIM_ConfigClockSource+0x16c>
 8002030:	2b20      	cmp	r3, #32
 8002032:	d060      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002034:	2b20      	cmp	r3, #32
 8002036:	d867      	bhi.n	8002108 <HAL_TIM_ConfigClockSource+0x16c>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d05c      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x15a>
 800203c:	2b10      	cmp	r3, #16
 800203e:	d05a      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002040:	e062      	b.n	8002108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002052:	f000 fac2 	bl	80025da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	609a      	str	r2, [r3, #8]
      break;
 800206e:	e04f      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002080:	f000 faab 	bl	80025da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002092:	609a      	str	r2, [r3, #8]
      break;
 8002094:	e03c      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a2:	461a      	mov	r2, r3
 80020a4:	f000 fa22 	bl	80024ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2150      	movs	r1, #80	; 0x50
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fa79 	bl	80025a6 <TIM_ITRx_SetConfig>
      break;
 80020b4:	e02c      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020c2:	461a      	mov	r2, r3
 80020c4:	f000 fa40 	bl	8002548 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2160      	movs	r1, #96	; 0x60
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fa69 	bl	80025a6 <TIM_ITRx_SetConfig>
      break;
 80020d4:	e01c      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e2:	461a      	mov	r2, r3
 80020e4:	f000 fa02 	bl	80024ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2140      	movs	r1, #64	; 0x40
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fa59 	bl	80025a6 <TIM_ITRx_SetConfig>
      break;
 80020f4:	e00c      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4619      	mov	r1, r3
 8002100:	4610      	mov	r0, r2
 8002102:	f000 fa50 	bl	80025a6 <TIM_ITRx_SetConfig>
      break;
 8002106:	e003      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      break;
 800210c:	e000      	b.n	8002110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800210e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <TIM_Base_SetConfig+0xa8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <TIM_Base_SetConfig+0x28>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214a:	d003      	beq.n	8002154 <TIM_Base_SetConfig+0x28>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <TIM_Base_SetConfig+0xac>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d108      	bne.n	8002166 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <TIM_Base_SetConfig+0xa8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <TIM_Base_SetConfig+0x52>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d003      	beq.n	800217e <TIM_Base_SetConfig+0x52>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <TIM_Base_SetConfig+0xac>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d108      	bne.n	8002190 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <TIM_Base_SetConfig+0xa8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d103      	bne.n	80021c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	615a      	str	r2, [r3, #20]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	40000400 	.word	0x40000400

080021dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f023 0201 	bic.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f023 0302 	bic.w	r3, r3, #2
 8002224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <TIM_OC1_SetConfig+0xc8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d10c      	bne.n	8002252 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f023 0308 	bic.w	r3, r3, #8
 800223e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <TIM_OC1_SetConfig+0xc8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d111      	bne.n	800227e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	621a      	str	r2, [r3, #32]
}
 8002298:	bf00      	nop
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40012c00 	.word	0x40012c00

080022a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f023 0210 	bic.w	r2, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f023 0320 	bic.w	r3, r3, #32
 80022f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <TIM_OC2_SetConfig+0xd0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d10d      	bne.n	8002324 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800230e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <TIM_OC2_SetConfig+0xd0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d113      	bne.n	8002354 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800233a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	621a      	str	r2, [r3, #32]
}
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40012c00 	.word	0x40012c00

0800237c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <TIM_OC3_SetConfig+0xd0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d10d      	bne.n	80023f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <TIM_OC3_SetConfig+0xd0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d113      	bne.n	8002426 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800240c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	621a      	str	r2, [r3, #32]
}
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40012c00 	.word	0x40012c00

08002450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800247e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800249a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	031b      	lsls	r3, r3, #12
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <TIM_OC4_SetConfig+0x98>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d109      	bne.n	80024c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	019b      	lsls	r3, r3, #6
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	621a      	str	r2, [r3, #32]
}
 80024de:	bf00      	nop
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	40012c00 	.word	0x40012c00

080024ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f023 0201 	bic.w	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f023 030a 	bic.w	r3, r3, #10
 8002528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	621a      	str	r2, [r3, #32]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f023 0210 	bic.w	r2, r3, #16
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	031b      	lsls	r3, r3, #12
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002584:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	621a      	str	r2, [r3, #32]
}
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f043 0307 	orr.w	r3, r3, #7
 80025c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	609a      	str	r2, [r3, #8]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025da:	b480      	push	{r7}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4313      	orrs	r3, r2
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	609a      	str	r2, [r3, #8]
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	2201      	movs	r2, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002674:	2302      	movs	r3, #2
 8002676:	e041      	b.n	80026fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d009      	beq.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c4:	d004      	beq.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d10c      	bne.n	80026ea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400

08002710 <siprintf>:
 8002710:	b40e      	push	{r1, r2, r3}
 8002712:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002716:	b500      	push	{lr}
 8002718:	b09c      	sub	sp, #112	; 0x70
 800271a:	ab1d      	add	r3, sp, #116	; 0x74
 800271c:	9002      	str	r0, [sp, #8]
 800271e:	9006      	str	r0, [sp, #24]
 8002720:	9107      	str	r1, [sp, #28]
 8002722:	9104      	str	r1, [sp, #16]
 8002724:	4808      	ldr	r0, [pc, #32]	; (8002748 <siprintf+0x38>)
 8002726:	4909      	ldr	r1, [pc, #36]	; (800274c <siprintf+0x3c>)
 8002728:	f853 2b04 	ldr.w	r2, [r3], #4
 800272c:	9105      	str	r1, [sp, #20]
 800272e:	6800      	ldr	r0, [r0, #0]
 8002730:	a902      	add	r1, sp, #8
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	f000 f98e 	bl	8002a54 <_svfiprintf_r>
 8002738:	2200      	movs	r2, #0
 800273a:	9b02      	ldr	r3, [sp, #8]
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	b01c      	add	sp, #112	; 0x70
 8002740:	f85d eb04 	ldr.w	lr, [sp], #4
 8002744:	b003      	add	sp, #12
 8002746:	4770      	bx	lr
 8002748:	20000058 	.word	0x20000058
 800274c:	ffff0208 	.word	0xffff0208

08002750 <memset>:
 8002750:	4603      	mov	r3, r0
 8002752:	4402      	add	r2, r0
 8002754:	4293      	cmp	r3, r2
 8002756:	d100      	bne.n	800275a <memset+0xa>
 8002758:	4770      	bx	lr
 800275a:	f803 1b01 	strb.w	r1, [r3], #1
 800275e:	e7f9      	b.n	8002754 <memset+0x4>

08002760 <__errno>:
 8002760:	4b01      	ldr	r3, [pc, #4]	; (8002768 <__errno+0x8>)
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000058 	.word	0x20000058

0800276c <__libc_init_array>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	2600      	movs	r6, #0
 8002770:	4d0c      	ldr	r5, [pc, #48]	; (80027a4 <__libc_init_array+0x38>)
 8002772:	4c0d      	ldr	r4, [pc, #52]	; (80027a8 <__libc_init_array+0x3c>)
 8002774:	1b64      	subs	r4, r4, r5
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	42a6      	cmp	r6, r4
 800277a:	d109      	bne.n	8002790 <__libc_init_array+0x24>
 800277c:	f000 fc7a 	bl	8003074 <_init>
 8002780:	2600      	movs	r6, #0
 8002782:	4d0a      	ldr	r5, [pc, #40]	; (80027ac <__libc_init_array+0x40>)
 8002784:	4c0a      	ldr	r4, [pc, #40]	; (80027b0 <__libc_init_array+0x44>)
 8002786:	1b64      	subs	r4, r4, r5
 8002788:	10a4      	asrs	r4, r4, #2
 800278a:	42a6      	cmp	r6, r4
 800278c:	d105      	bne.n	800279a <__libc_init_array+0x2e>
 800278e:	bd70      	pop	{r4, r5, r6, pc}
 8002790:	f855 3b04 	ldr.w	r3, [r5], #4
 8002794:	4798      	blx	r3
 8002796:	3601      	adds	r6, #1
 8002798:	e7ee      	b.n	8002778 <__libc_init_array+0xc>
 800279a:	f855 3b04 	ldr.w	r3, [r5], #4
 800279e:	4798      	blx	r3
 80027a0:	3601      	adds	r6, #1
 80027a2:	e7f2      	b.n	800278a <__libc_init_array+0x1e>
 80027a4:	080031a8 	.word	0x080031a8
 80027a8:	080031a8 	.word	0x080031a8
 80027ac:	080031a8 	.word	0x080031a8
 80027b0:	080031ac 	.word	0x080031ac

080027b4 <__retarget_lock_acquire_recursive>:
 80027b4:	4770      	bx	lr

080027b6 <__retarget_lock_release_recursive>:
 80027b6:	4770      	bx	lr

080027b8 <_free_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4605      	mov	r5, r0
 80027bc:	2900      	cmp	r1, #0
 80027be:	d040      	beq.n	8002842 <_free_r+0x8a>
 80027c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027c4:	1f0c      	subs	r4, r1, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bfb8      	it	lt
 80027ca:	18e4      	addlt	r4, r4, r3
 80027cc:	f000 f8dc 	bl	8002988 <__malloc_lock>
 80027d0:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <_free_r+0x8c>)
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	b933      	cbnz	r3, 80027e4 <_free_r+0x2c>
 80027d6:	6063      	str	r3, [r4, #4]
 80027d8:	6014      	str	r4, [r2, #0]
 80027da:	4628      	mov	r0, r5
 80027dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027e0:	f000 b8d8 	b.w	8002994 <__malloc_unlock>
 80027e4:	42a3      	cmp	r3, r4
 80027e6:	d908      	bls.n	80027fa <_free_r+0x42>
 80027e8:	6820      	ldr	r0, [r4, #0]
 80027ea:	1821      	adds	r1, r4, r0
 80027ec:	428b      	cmp	r3, r1
 80027ee:	bf01      	itttt	eq
 80027f0:	6819      	ldreq	r1, [r3, #0]
 80027f2:	685b      	ldreq	r3, [r3, #4]
 80027f4:	1809      	addeq	r1, r1, r0
 80027f6:	6021      	streq	r1, [r4, #0]
 80027f8:	e7ed      	b.n	80027d6 <_free_r+0x1e>
 80027fa:	461a      	mov	r2, r3
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b10b      	cbz	r3, 8002804 <_free_r+0x4c>
 8002800:	42a3      	cmp	r3, r4
 8002802:	d9fa      	bls.n	80027fa <_free_r+0x42>
 8002804:	6811      	ldr	r1, [r2, #0]
 8002806:	1850      	adds	r0, r2, r1
 8002808:	42a0      	cmp	r0, r4
 800280a:	d10b      	bne.n	8002824 <_free_r+0x6c>
 800280c:	6820      	ldr	r0, [r4, #0]
 800280e:	4401      	add	r1, r0
 8002810:	1850      	adds	r0, r2, r1
 8002812:	4283      	cmp	r3, r0
 8002814:	6011      	str	r1, [r2, #0]
 8002816:	d1e0      	bne.n	80027da <_free_r+0x22>
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4408      	add	r0, r1
 800281e:	6010      	str	r0, [r2, #0]
 8002820:	6053      	str	r3, [r2, #4]
 8002822:	e7da      	b.n	80027da <_free_r+0x22>
 8002824:	d902      	bls.n	800282c <_free_r+0x74>
 8002826:	230c      	movs	r3, #12
 8002828:	602b      	str	r3, [r5, #0]
 800282a:	e7d6      	b.n	80027da <_free_r+0x22>
 800282c:	6820      	ldr	r0, [r4, #0]
 800282e:	1821      	adds	r1, r4, r0
 8002830:	428b      	cmp	r3, r1
 8002832:	bf01      	itttt	eq
 8002834:	6819      	ldreq	r1, [r3, #0]
 8002836:	685b      	ldreq	r3, [r3, #4]
 8002838:	1809      	addeq	r1, r1, r0
 800283a:	6021      	streq	r1, [r4, #0]
 800283c:	6063      	str	r3, [r4, #4]
 800283e:	6054      	str	r4, [r2, #4]
 8002840:	e7cb      	b.n	80027da <_free_r+0x22>
 8002842:	bd38      	pop	{r3, r4, r5, pc}
 8002844:	20000238 	.word	0x20000238

08002848 <sbrk_aligned>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	4e0e      	ldr	r6, [pc, #56]	; (8002884 <sbrk_aligned+0x3c>)
 800284c:	460c      	mov	r4, r1
 800284e:	6831      	ldr	r1, [r6, #0]
 8002850:	4605      	mov	r5, r0
 8002852:	b911      	cbnz	r1, 800285a <sbrk_aligned+0x12>
 8002854:	f000 fbaa 	bl	8002fac <_sbrk_r>
 8002858:	6030      	str	r0, [r6, #0]
 800285a:	4621      	mov	r1, r4
 800285c:	4628      	mov	r0, r5
 800285e:	f000 fba5 	bl	8002fac <_sbrk_r>
 8002862:	1c43      	adds	r3, r0, #1
 8002864:	d00a      	beq.n	800287c <sbrk_aligned+0x34>
 8002866:	1cc4      	adds	r4, r0, #3
 8002868:	f024 0403 	bic.w	r4, r4, #3
 800286c:	42a0      	cmp	r0, r4
 800286e:	d007      	beq.n	8002880 <sbrk_aligned+0x38>
 8002870:	1a21      	subs	r1, r4, r0
 8002872:	4628      	mov	r0, r5
 8002874:	f000 fb9a 	bl	8002fac <_sbrk_r>
 8002878:	3001      	adds	r0, #1
 800287a:	d101      	bne.n	8002880 <sbrk_aligned+0x38>
 800287c:	f04f 34ff 	mov.w	r4, #4294967295
 8002880:	4620      	mov	r0, r4
 8002882:	bd70      	pop	{r4, r5, r6, pc}
 8002884:	2000023c 	.word	0x2000023c

08002888 <_malloc_r>:
 8002888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800288c:	1ccd      	adds	r5, r1, #3
 800288e:	f025 0503 	bic.w	r5, r5, #3
 8002892:	3508      	adds	r5, #8
 8002894:	2d0c      	cmp	r5, #12
 8002896:	bf38      	it	cc
 8002898:	250c      	movcc	r5, #12
 800289a:	2d00      	cmp	r5, #0
 800289c:	4607      	mov	r7, r0
 800289e:	db01      	blt.n	80028a4 <_malloc_r+0x1c>
 80028a0:	42a9      	cmp	r1, r5
 80028a2:	d905      	bls.n	80028b0 <_malloc_r+0x28>
 80028a4:	230c      	movs	r3, #12
 80028a6:	2600      	movs	r6, #0
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4630      	mov	r0, r6
 80028ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002984 <_malloc_r+0xfc>
 80028b4:	f000 f868 	bl	8002988 <__malloc_lock>
 80028b8:	f8d8 3000 	ldr.w	r3, [r8]
 80028bc:	461c      	mov	r4, r3
 80028be:	bb5c      	cbnz	r4, 8002918 <_malloc_r+0x90>
 80028c0:	4629      	mov	r1, r5
 80028c2:	4638      	mov	r0, r7
 80028c4:	f7ff ffc0 	bl	8002848 <sbrk_aligned>
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	4604      	mov	r4, r0
 80028cc:	d155      	bne.n	800297a <_malloc_r+0xf2>
 80028ce:	f8d8 4000 	ldr.w	r4, [r8]
 80028d2:	4626      	mov	r6, r4
 80028d4:	2e00      	cmp	r6, #0
 80028d6:	d145      	bne.n	8002964 <_malloc_r+0xdc>
 80028d8:	2c00      	cmp	r4, #0
 80028da:	d048      	beq.n	800296e <_malloc_r+0xe6>
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	4631      	mov	r1, r6
 80028e0:	4638      	mov	r0, r7
 80028e2:	eb04 0903 	add.w	r9, r4, r3
 80028e6:	f000 fb61 	bl	8002fac <_sbrk_r>
 80028ea:	4581      	cmp	r9, r0
 80028ec:	d13f      	bne.n	800296e <_malloc_r+0xe6>
 80028ee:	6821      	ldr	r1, [r4, #0]
 80028f0:	4638      	mov	r0, r7
 80028f2:	1a6d      	subs	r5, r5, r1
 80028f4:	4629      	mov	r1, r5
 80028f6:	f7ff ffa7 	bl	8002848 <sbrk_aligned>
 80028fa:	3001      	adds	r0, #1
 80028fc:	d037      	beq.n	800296e <_malloc_r+0xe6>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	442b      	add	r3, r5
 8002902:	6023      	str	r3, [r4, #0]
 8002904:	f8d8 3000 	ldr.w	r3, [r8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d038      	beq.n	800297e <_malloc_r+0xf6>
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	42a2      	cmp	r2, r4
 8002910:	d12b      	bne.n	800296a <_malloc_r+0xe2>
 8002912:	2200      	movs	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	e00f      	b.n	8002938 <_malloc_r+0xb0>
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	1b52      	subs	r2, r2, r5
 800291c:	d41f      	bmi.n	800295e <_malloc_r+0xd6>
 800291e:	2a0b      	cmp	r2, #11
 8002920:	d917      	bls.n	8002952 <_malloc_r+0xca>
 8002922:	1961      	adds	r1, r4, r5
 8002924:	42a3      	cmp	r3, r4
 8002926:	6025      	str	r5, [r4, #0]
 8002928:	bf18      	it	ne
 800292a:	6059      	strne	r1, [r3, #4]
 800292c:	6863      	ldr	r3, [r4, #4]
 800292e:	bf08      	it	eq
 8002930:	f8c8 1000 	streq.w	r1, [r8]
 8002934:	5162      	str	r2, [r4, r5]
 8002936:	604b      	str	r3, [r1, #4]
 8002938:	4638      	mov	r0, r7
 800293a:	f104 060b 	add.w	r6, r4, #11
 800293e:	f000 f829 	bl	8002994 <__malloc_unlock>
 8002942:	f026 0607 	bic.w	r6, r6, #7
 8002946:	1d23      	adds	r3, r4, #4
 8002948:	1af2      	subs	r2, r6, r3
 800294a:	d0ae      	beq.n	80028aa <_malloc_r+0x22>
 800294c:	1b9b      	subs	r3, r3, r6
 800294e:	50a3      	str	r3, [r4, r2]
 8002950:	e7ab      	b.n	80028aa <_malloc_r+0x22>
 8002952:	42a3      	cmp	r3, r4
 8002954:	6862      	ldr	r2, [r4, #4]
 8002956:	d1dd      	bne.n	8002914 <_malloc_r+0x8c>
 8002958:	f8c8 2000 	str.w	r2, [r8]
 800295c:	e7ec      	b.n	8002938 <_malloc_r+0xb0>
 800295e:	4623      	mov	r3, r4
 8002960:	6864      	ldr	r4, [r4, #4]
 8002962:	e7ac      	b.n	80028be <_malloc_r+0x36>
 8002964:	4634      	mov	r4, r6
 8002966:	6876      	ldr	r6, [r6, #4]
 8002968:	e7b4      	b.n	80028d4 <_malloc_r+0x4c>
 800296a:	4613      	mov	r3, r2
 800296c:	e7cc      	b.n	8002908 <_malloc_r+0x80>
 800296e:	230c      	movs	r3, #12
 8002970:	4638      	mov	r0, r7
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	f000 f80e 	bl	8002994 <__malloc_unlock>
 8002978:	e797      	b.n	80028aa <_malloc_r+0x22>
 800297a:	6025      	str	r5, [r4, #0]
 800297c:	e7dc      	b.n	8002938 <_malloc_r+0xb0>
 800297e:	605b      	str	r3, [r3, #4]
 8002980:	deff      	udf	#255	; 0xff
 8002982:	bf00      	nop
 8002984:	20000238 	.word	0x20000238

08002988 <__malloc_lock>:
 8002988:	4801      	ldr	r0, [pc, #4]	; (8002990 <__malloc_lock+0x8>)
 800298a:	f7ff bf13 	b.w	80027b4 <__retarget_lock_acquire_recursive>
 800298e:	bf00      	nop
 8002990:	20000234 	.word	0x20000234

08002994 <__malloc_unlock>:
 8002994:	4801      	ldr	r0, [pc, #4]	; (800299c <__malloc_unlock+0x8>)
 8002996:	f7ff bf0e 	b.w	80027b6 <__retarget_lock_release_recursive>
 800299a:	bf00      	nop
 800299c:	20000234 	.word	0x20000234

080029a0 <__ssputs_r>:
 80029a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a4:	461f      	mov	r7, r3
 80029a6:	688e      	ldr	r6, [r1, #8]
 80029a8:	4682      	mov	sl, r0
 80029aa:	42be      	cmp	r6, r7
 80029ac:	460c      	mov	r4, r1
 80029ae:	4690      	mov	r8, r2
 80029b0:	680b      	ldr	r3, [r1, #0]
 80029b2:	d82c      	bhi.n	8002a0e <__ssputs_r+0x6e>
 80029b4:	898a      	ldrh	r2, [r1, #12]
 80029b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029ba:	d026      	beq.n	8002a0a <__ssputs_r+0x6a>
 80029bc:	6965      	ldr	r5, [r4, #20]
 80029be:	6909      	ldr	r1, [r1, #16]
 80029c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029c4:	eba3 0901 	sub.w	r9, r3, r1
 80029c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029cc:	1c7b      	adds	r3, r7, #1
 80029ce:	444b      	add	r3, r9
 80029d0:	106d      	asrs	r5, r5, #1
 80029d2:	429d      	cmp	r5, r3
 80029d4:	bf38      	it	cc
 80029d6:	461d      	movcc	r5, r3
 80029d8:	0553      	lsls	r3, r2, #21
 80029da:	d527      	bpl.n	8002a2c <__ssputs_r+0x8c>
 80029dc:	4629      	mov	r1, r5
 80029de:	f7ff ff53 	bl	8002888 <_malloc_r>
 80029e2:	4606      	mov	r6, r0
 80029e4:	b360      	cbz	r0, 8002a40 <__ssputs_r+0xa0>
 80029e6:	464a      	mov	r2, r9
 80029e8:	6921      	ldr	r1, [r4, #16]
 80029ea:	f000 fafd 	bl	8002fe8 <memcpy>
 80029ee:	89a3      	ldrh	r3, [r4, #12]
 80029f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f8:	81a3      	strh	r3, [r4, #12]
 80029fa:	6126      	str	r6, [r4, #16]
 80029fc:	444e      	add	r6, r9
 80029fe:	6026      	str	r6, [r4, #0]
 8002a00:	463e      	mov	r6, r7
 8002a02:	6165      	str	r5, [r4, #20]
 8002a04:	eba5 0509 	sub.w	r5, r5, r9
 8002a08:	60a5      	str	r5, [r4, #8]
 8002a0a:	42be      	cmp	r6, r7
 8002a0c:	d900      	bls.n	8002a10 <__ssputs_r+0x70>
 8002a0e:	463e      	mov	r6, r7
 8002a10:	4632      	mov	r2, r6
 8002a12:	4641      	mov	r1, r8
 8002a14:	6820      	ldr	r0, [r4, #0]
 8002a16:	f000 faaf 	bl	8002f78 <memmove>
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	68a3      	ldr	r3, [r4, #8]
 8002a1e:	1b9b      	subs	r3, r3, r6
 8002a20:	60a3      	str	r3, [r4, #8]
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	4433      	add	r3, r6
 8002a26:	6023      	str	r3, [r4, #0]
 8002a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a2c:	462a      	mov	r2, r5
 8002a2e:	f000 fae9 	bl	8003004 <_realloc_r>
 8002a32:	4606      	mov	r6, r0
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d1e0      	bne.n	80029fa <__ssputs_r+0x5a>
 8002a38:	4650      	mov	r0, sl
 8002a3a:	6921      	ldr	r1, [r4, #16]
 8002a3c:	f7ff febc 	bl	80027b8 <_free_r>
 8002a40:	230c      	movs	r3, #12
 8002a42:	f8ca 3000 	str.w	r3, [sl]
 8002a46:	89a3      	ldrh	r3, [r4, #12]
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a50:	81a3      	strh	r3, [r4, #12]
 8002a52:	e7e9      	b.n	8002a28 <__ssputs_r+0x88>

08002a54 <_svfiprintf_r>:
 8002a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a58:	4698      	mov	r8, r3
 8002a5a:	898b      	ldrh	r3, [r1, #12]
 8002a5c:	4607      	mov	r7, r0
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	460d      	mov	r5, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	b09d      	sub	sp, #116	; 0x74
 8002a66:	d50e      	bpl.n	8002a86 <_svfiprintf_r+0x32>
 8002a68:	690b      	ldr	r3, [r1, #16]
 8002a6a:	b963      	cbnz	r3, 8002a86 <_svfiprintf_r+0x32>
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	f7ff ff0b 	bl	8002888 <_malloc_r>
 8002a72:	6028      	str	r0, [r5, #0]
 8002a74:	6128      	str	r0, [r5, #16]
 8002a76:	b920      	cbnz	r0, 8002a82 <_svfiprintf_r+0x2e>
 8002a78:	230c      	movs	r3, #12
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	e0d0      	b.n	8002c24 <_svfiprintf_r+0x1d0>
 8002a82:	2340      	movs	r3, #64	; 0x40
 8002a84:	616b      	str	r3, [r5, #20]
 8002a86:	2300      	movs	r3, #0
 8002a88:	9309      	str	r3, [sp, #36]	; 0x24
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a90:	2330      	movs	r3, #48	; 0x30
 8002a92:	f04f 0901 	mov.w	r9, #1
 8002a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a9a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002c3c <_svfiprintf_r+0x1e8>
 8002a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	469a      	mov	sl, r3
 8002aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aaa:	b10a      	cbz	r2, 8002ab0 <_svfiprintf_r+0x5c>
 8002aac:	2a25      	cmp	r2, #37	; 0x25
 8002aae:	d1f9      	bne.n	8002aa4 <_svfiprintf_r+0x50>
 8002ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ab4:	d00b      	beq.n	8002ace <_svfiprintf_r+0x7a>
 8002ab6:	465b      	mov	r3, fp
 8002ab8:	4622      	mov	r2, r4
 8002aba:	4629      	mov	r1, r5
 8002abc:	4638      	mov	r0, r7
 8002abe:	f7ff ff6f 	bl	80029a0 <__ssputs_r>
 8002ac2:	3001      	adds	r0, #1
 8002ac4:	f000 80a9 	beq.w	8002c1a <_svfiprintf_r+0x1c6>
 8002ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aca:	445a      	add	r2, fp
 8002acc:	9209      	str	r2, [sp, #36]	; 0x24
 8002ace:	f89a 3000 	ldrb.w	r3, [sl]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80a1 	beq.w	8002c1a <_svfiprintf_r+0x1c6>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295
 8002ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ae2:	f10a 0a01 	add.w	sl, sl, #1
 8002ae6:	9304      	str	r3, [sp, #16]
 8002ae8:	9307      	str	r3, [sp, #28]
 8002aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aee:	931a      	str	r3, [sp, #104]	; 0x68
 8002af0:	4654      	mov	r4, sl
 8002af2:	2205      	movs	r2, #5
 8002af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002af8:	4850      	ldr	r0, [pc, #320]	; (8002c3c <_svfiprintf_r+0x1e8>)
 8002afa:	f000 fa67 	bl	8002fcc <memchr>
 8002afe:	9a04      	ldr	r2, [sp, #16]
 8002b00:	b9d8      	cbnz	r0, 8002b3a <_svfiprintf_r+0xe6>
 8002b02:	06d0      	lsls	r0, r2, #27
 8002b04:	bf44      	itt	mi
 8002b06:	2320      	movmi	r3, #32
 8002b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b0c:	0711      	lsls	r1, r2, #28
 8002b0e:	bf44      	itt	mi
 8002b10:	232b      	movmi	r3, #43	; 0x2b
 8002b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b16:	f89a 3000 	ldrb.w	r3, [sl]
 8002b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b1c:	d015      	beq.n	8002b4a <_svfiprintf_r+0xf6>
 8002b1e:	4654      	mov	r4, sl
 8002b20:	2000      	movs	r0, #0
 8002b22:	f04f 0c0a 	mov.w	ip, #10
 8002b26:	9a07      	ldr	r2, [sp, #28]
 8002b28:	4621      	mov	r1, r4
 8002b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b2e:	3b30      	subs	r3, #48	; 0x30
 8002b30:	2b09      	cmp	r3, #9
 8002b32:	d94d      	bls.n	8002bd0 <_svfiprintf_r+0x17c>
 8002b34:	b1b0      	cbz	r0, 8002b64 <_svfiprintf_r+0x110>
 8002b36:	9207      	str	r2, [sp, #28]
 8002b38:	e014      	b.n	8002b64 <_svfiprintf_r+0x110>
 8002b3a:	eba0 0308 	sub.w	r3, r0, r8
 8002b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8002b42:	4313      	orrs	r3, r2
 8002b44:	46a2      	mov	sl, r4
 8002b46:	9304      	str	r3, [sp, #16]
 8002b48:	e7d2      	b.n	8002af0 <_svfiprintf_r+0x9c>
 8002b4a:	9b03      	ldr	r3, [sp, #12]
 8002b4c:	1d19      	adds	r1, r3, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	9103      	str	r1, [sp, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	bfbb      	ittet	lt
 8002b56:	425b      	neglt	r3, r3
 8002b58:	f042 0202 	orrlt.w	r2, r2, #2
 8002b5c:	9307      	strge	r3, [sp, #28]
 8002b5e:	9307      	strlt	r3, [sp, #28]
 8002b60:	bfb8      	it	lt
 8002b62:	9204      	strlt	r2, [sp, #16]
 8002b64:	7823      	ldrb	r3, [r4, #0]
 8002b66:	2b2e      	cmp	r3, #46	; 0x2e
 8002b68:	d10c      	bne.n	8002b84 <_svfiprintf_r+0x130>
 8002b6a:	7863      	ldrb	r3, [r4, #1]
 8002b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b6e:	d134      	bne.n	8002bda <_svfiprintf_r+0x186>
 8002b70:	9b03      	ldr	r3, [sp, #12]
 8002b72:	3402      	adds	r4, #2
 8002b74:	1d1a      	adds	r2, r3, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	9203      	str	r2, [sp, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bfb8      	it	lt
 8002b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b82:	9305      	str	r3, [sp, #20]
 8002b84:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002c40 <_svfiprintf_r+0x1ec>
 8002b88:	2203      	movs	r2, #3
 8002b8a:	4650      	mov	r0, sl
 8002b8c:	7821      	ldrb	r1, [r4, #0]
 8002b8e:	f000 fa1d 	bl	8002fcc <memchr>
 8002b92:	b138      	cbz	r0, 8002ba4 <_svfiprintf_r+0x150>
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	9b04      	ldr	r3, [sp, #16]
 8002b98:	eba0 000a 	sub.w	r0, r0, sl
 8002b9c:	4082      	lsls	r2, r0
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	3401      	adds	r4, #1
 8002ba2:	9304      	str	r3, [sp, #16]
 8002ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ba8:	2206      	movs	r2, #6
 8002baa:	4826      	ldr	r0, [pc, #152]	; (8002c44 <_svfiprintf_r+0x1f0>)
 8002bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bb0:	f000 fa0c 	bl	8002fcc <memchr>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d038      	beq.n	8002c2a <_svfiprintf_r+0x1d6>
 8002bb8:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <_svfiprintf_r+0x1f4>)
 8002bba:	bb1b      	cbnz	r3, 8002c04 <_svfiprintf_r+0x1b0>
 8002bbc:	9b03      	ldr	r3, [sp, #12]
 8002bbe:	3307      	adds	r3, #7
 8002bc0:	f023 0307 	bic.w	r3, r3, #7
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	9303      	str	r3, [sp, #12]
 8002bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bca:	4433      	add	r3, r6
 8002bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8002bce:	e768      	b.n	8002aa2 <_svfiprintf_r+0x4e>
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bd8:	e7a6      	b.n	8002b28 <_svfiprintf_r+0xd4>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f04f 0c0a 	mov.w	ip, #10
 8002be0:	4619      	mov	r1, r3
 8002be2:	3401      	adds	r4, #1
 8002be4:	9305      	str	r3, [sp, #20]
 8002be6:	4620      	mov	r0, r4
 8002be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bec:	3a30      	subs	r2, #48	; 0x30
 8002bee:	2a09      	cmp	r2, #9
 8002bf0:	d903      	bls.n	8002bfa <_svfiprintf_r+0x1a6>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0c6      	beq.n	8002b84 <_svfiprintf_r+0x130>
 8002bf6:	9105      	str	r1, [sp, #20]
 8002bf8:	e7c4      	b.n	8002b84 <_svfiprintf_r+0x130>
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c02:	e7f0      	b.n	8002be6 <_svfiprintf_r+0x192>
 8002c04:	ab03      	add	r3, sp, #12
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	462a      	mov	r2, r5
 8002c0a:	4638      	mov	r0, r7
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <_svfiprintf_r+0x1f8>)
 8002c0e:	a904      	add	r1, sp, #16
 8002c10:	f3af 8000 	nop.w
 8002c14:	1c42      	adds	r2, r0, #1
 8002c16:	4606      	mov	r6, r0
 8002c18:	d1d6      	bne.n	8002bc8 <_svfiprintf_r+0x174>
 8002c1a:	89ab      	ldrh	r3, [r5, #12]
 8002c1c:	065b      	lsls	r3, r3, #25
 8002c1e:	f53f af2d 	bmi.w	8002a7c <_svfiprintf_r+0x28>
 8002c22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c24:	b01d      	add	sp, #116	; 0x74
 8002c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c2a:	ab03      	add	r3, sp, #12
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	462a      	mov	r2, r5
 8002c30:	4638      	mov	r0, r7
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <_svfiprintf_r+0x1f8>)
 8002c34:	a904      	add	r1, sp, #16
 8002c36:	f000 f87d 	bl	8002d34 <_printf_i>
 8002c3a:	e7eb      	b.n	8002c14 <_svfiprintf_r+0x1c0>
 8002c3c:	08003172 	.word	0x08003172
 8002c40:	08003178 	.word	0x08003178
 8002c44:	0800317c 	.word	0x0800317c
 8002c48:	00000000 	.word	0x00000000
 8002c4c:	080029a1 	.word	0x080029a1

08002c50 <_printf_common>:
 8002c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c54:	4616      	mov	r6, r2
 8002c56:	4699      	mov	r9, r3
 8002c58:	688a      	ldr	r2, [r1, #8]
 8002c5a:	690b      	ldr	r3, [r1, #16]
 8002c5c:	4607      	mov	r7, r0
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	bfb8      	it	lt
 8002c62:	4613      	movlt	r3, r2
 8002c64:	6033      	str	r3, [r6, #0]
 8002c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c70:	b10a      	cbz	r2, 8002c76 <_printf_common+0x26>
 8002c72:	3301      	adds	r3, #1
 8002c74:	6033      	str	r3, [r6, #0]
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	0699      	lsls	r1, r3, #26
 8002c7a:	bf42      	ittt	mi
 8002c7c:	6833      	ldrmi	r3, [r6, #0]
 8002c7e:	3302      	addmi	r3, #2
 8002c80:	6033      	strmi	r3, [r6, #0]
 8002c82:	6825      	ldr	r5, [r4, #0]
 8002c84:	f015 0506 	ands.w	r5, r5, #6
 8002c88:	d106      	bne.n	8002c98 <_printf_common+0x48>
 8002c8a:	f104 0a19 	add.w	sl, r4, #25
 8002c8e:	68e3      	ldr	r3, [r4, #12]
 8002c90:	6832      	ldr	r2, [r6, #0]
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	42ab      	cmp	r3, r5
 8002c96:	dc2b      	bgt.n	8002cf0 <_printf_common+0xa0>
 8002c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c9c:	1e13      	subs	r3, r2, #0
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	bf18      	it	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	0692      	lsls	r2, r2, #26
 8002ca6:	d430      	bmi.n	8002d0a <_printf_common+0xba>
 8002ca8:	4649      	mov	r1, r9
 8002caa:	4638      	mov	r0, r7
 8002cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cb0:	47c0      	blx	r8
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d023      	beq.n	8002cfe <_printf_common+0xae>
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	6922      	ldr	r2, [r4, #16]
 8002cba:	f003 0306 	and.w	r3, r3, #6
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf14      	ite	ne
 8002cc2:	2500      	movne	r5, #0
 8002cc4:	6833      	ldreq	r3, [r6, #0]
 8002cc6:	f04f 0600 	mov.w	r6, #0
 8002cca:	bf08      	it	eq
 8002ccc:	68e5      	ldreq	r5, [r4, #12]
 8002cce:	f104 041a 	add.w	r4, r4, #26
 8002cd2:	bf08      	it	eq
 8002cd4:	1aed      	subeq	r5, r5, r3
 8002cd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002cda:	bf08      	it	eq
 8002cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	bfc4      	itt	gt
 8002ce4:	1a9b      	subgt	r3, r3, r2
 8002ce6:	18ed      	addgt	r5, r5, r3
 8002ce8:	42b5      	cmp	r5, r6
 8002cea:	d11a      	bne.n	8002d22 <_printf_common+0xd2>
 8002cec:	2000      	movs	r0, #0
 8002cee:	e008      	b.n	8002d02 <_printf_common+0xb2>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	4652      	mov	r2, sl
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	4638      	mov	r0, r7
 8002cf8:	47c0      	blx	r8
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	d103      	bne.n	8002d06 <_printf_common+0xb6>
 8002cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d06:	3501      	adds	r5, #1
 8002d08:	e7c1      	b.n	8002c8e <_printf_common+0x3e>
 8002d0a:	2030      	movs	r0, #48	; 0x30
 8002d0c:	18e1      	adds	r1, r4, r3
 8002d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d18:	4422      	add	r2, r4
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d20:	e7c2      	b.n	8002ca8 <_printf_common+0x58>
 8002d22:	2301      	movs	r3, #1
 8002d24:	4622      	mov	r2, r4
 8002d26:	4649      	mov	r1, r9
 8002d28:	4638      	mov	r0, r7
 8002d2a:	47c0      	blx	r8
 8002d2c:	3001      	adds	r0, #1
 8002d2e:	d0e6      	beq.n	8002cfe <_printf_common+0xae>
 8002d30:	3601      	adds	r6, #1
 8002d32:	e7d9      	b.n	8002ce8 <_printf_common+0x98>

08002d34 <_printf_i>:
 8002d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d38:	7e0f      	ldrb	r7, [r1, #24]
 8002d3a:	4691      	mov	r9, r2
 8002d3c:	2f78      	cmp	r7, #120	; 0x78
 8002d3e:	4680      	mov	r8, r0
 8002d40:	460c      	mov	r4, r1
 8002d42:	469a      	mov	sl, r3
 8002d44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d4a:	d807      	bhi.n	8002d5c <_printf_i+0x28>
 8002d4c:	2f62      	cmp	r7, #98	; 0x62
 8002d4e:	d80a      	bhi.n	8002d66 <_printf_i+0x32>
 8002d50:	2f00      	cmp	r7, #0
 8002d52:	f000 80d5 	beq.w	8002f00 <_printf_i+0x1cc>
 8002d56:	2f58      	cmp	r7, #88	; 0x58
 8002d58:	f000 80c1 	beq.w	8002ede <_printf_i+0x1aa>
 8002d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d64:	e03a      	b.n	8002ddc <_printf_i+0xa8>
 8002d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d6a:	2b15      	cmp	r3, #21
 8002d6c:	d8f6      	bhi.n	8002d5c <_printf_i+0x28>
 8002d6e:	a101      	add	r1, pc, #4	; (adr r1, 8002d74 <_printf_i+0x40>)
 8002d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d74:	08002dcd 	.word	0x08002dcd
 8002d78:	08002de1 	.word	0x08002de1
 8002d7c:	08002d5d 	.word	0x08002d5d
 8002d80:	08002d5d 	.word	0x08002d5d
 8002d84:	08002d5d 	.word	0x08002d5d
 8002d88:	08002d5d 	.word	0x08002d5d
 8002d8c:	08002de1 	.word	0x08002de1
 8002d90:	08002d5d 	.word	0x08002d5d
 8002d94:	08002d5d 	.word	0x08002d5d
 8002d98:	08002d5d 	.word	0x08002d5d
 8002d9c:	08002d5d 	.word	0x08002d5d
 8002da0:	08002ee7 	.word	0x08002ee7
 8002da4:	08002e0d 	.word	0x08002e0d
 8002da8:	08002ea1 	.word	0x08002ea1
 8002dac:	08002d5d 	.word	0x08002d5d
 8002db0:	08002d5d 	.word	0x08002d5d
 8002db4:	08002f09 	.word	0x08002f09
 8002db8:	08002d5d 	.word	0x08002d5d
 8002dbc:	08002e0d 	.word	0x08002e0d
 8002dc0:	08002d5d 	.word	0x08002d5d
 8002dc4:	08002d5d 	.word	0x08002d5d
 8002dc8:	08002ea9 	.word	0x08002ea9
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	1d1a      	adds	r2, r3, #4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	602a      	str	r2, [r5, #0]
 8002dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0a0      	b.n	8002f22 <_printf_i+0x1ee>
 8002de0:	6820      	ldr	r0, [r4, #0]
 8002de2:	682b      	ldr	r3, [r5, #0]
 8002de4:	0607      	lsls	r7, r0, #24
 8002de6:	f103 0104 	add.w	r1, r3, #4
 8002dea:	6029      	str	r1, [r5, #0]
 8002dec:	d501      	bpl.n	8002df2 <_printf_i+0xbe>
 8002dee:	681e      	ldr	r6, [r3, #0]
 8002df0:	e003      	b.n	8002dfa <_printf_i+0xc6>
 8002df2:	0646      	lsls	r6, r0, #25
 8002df4:	d5fb      	bpl.n	8002dee <_printf_i+0xba>
 8002df6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002dfa:	2e00      	cmp	r6, #0
 8002dfc:	da03      	bge.n	8002e06 <_printf_i+0xd2>
 8002dfe:	232d      	movs	r3, #45	; 0x2d
 8002e00:	4276      	negs	r6, r6
 8002e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e06:	230a      	movs	r3, #10
 8002e08:	4859      	ldr	r0, [pc, #356]	; (8002f70 <_printf_i+0x23c>)
 8002e0a:	e012      	b.n	8002e32 <_printf_i+0xfe>
 8002e0c:	682b      	ldr	r3, [r5, #0]
 8002e0e:	6820      	ldr	r0, [r4, #0]
 8002e10:	1d19      	adds	r1, r3, #4
 8002e12:	6029      	str	r1, [r5, #0]
 8002e14:	0605      	lsls	r5, r0, #24
 8002e16:	d501      	bpl.n	8002e1c <_printf_i+0xe8>
 8002e18:	681e      	ldr	r6, [r3, #0]
 8002e1a:	e002      	b.n	8002e22 <_printf_i+0xee>
 8002e1c:	0641      	lsls	r1, r0, #25
 8002e1e:	d5fb      	bpl.n	8002e18 <_printf_i+0xe4>
 8002e20:	881e      	ldrh	r6, [r3, #0]
 8002e22:	2f6f      	cmp	r7, #111	; 0x6f
 8002e24:	bf0c      	ite	eq
 8002e26:	2308      	moveq	r3, #8
 8002e28:	230a      	movne	r3, #10
 8002e2a:	4851      	ldr	r0, [pc, #324]	; (8002f70 <_printf_i+0x23c>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e32:	6865      	ldr	r5, [r4, #4]
 8002e34:	2d00      	cmp	r5, #0
 8002e36:	bfa8      	it	ge
 8002e38:	6821      	ldrge	r1, [r4, #0]
 8002e3a:	60a5      	str	r5, [r4, #8]
 8002e3c:	bfa4      	itt	ge
 8002e3e:	f021 0104 	bicge.w	r1, r1, #4
 8002e42:	6021      	strge	r1, [r4, #0]
 8002e44:	b90e      	cbnz	r6, 8002e4a <_printf_i+0x116>
 8002e46:	2d00      	cmp	r5, #0
 8002e48:	d04b      	beq.n	8002ee2 <_printf_i+0x1ae>
 8002e4a:	4615      	mov	r5, r2
 8002e4c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e50:	fb03 6711 	mls	r7, r3, r1, r6
 8002e54:	5dc7      	ldrb	r7, [r0, r7]
 8002e56:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e5a:	4637      	mov	r7, r6
 8002e5c:	42bb      	cmp	r3, r7
 8002e5e:	460e      	mov	r6, r1
 8002e60:	d9f4      	bls.n	8002e4c <_printf_i+0x118>
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d10b      	bne.n	8002e7e <_printf_i+0x14a>
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	07de      	lsls	r6, r3, #31
 8002e6a:	d508      	bpl.n	8002e7e <_printf_i+0x14a>
 8002e6c:	6923      	ldr	r3, [r4, #16]
 8002e6e:	6861      	ldr	r1, [r4, #4]
 8002e70:	4299      	cmp	r1, r3
 8002e72:	bfde      	ittt	le
 8002e74:	2330      	movle	r3, #48	; 0x30
 8002e76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e7e:	1b52      	subs	r2, r2, r5
 8002e80:	6122      	str	r2, [r4, #16]
 8002e82:	464b      	mov	r3, r9
 8002e84:	4621      	mov	r1, r4
 8002e86:	4640      	mov	r0, r8
 8002e88:	f8cd a000 	str.w	sl, [sp]
 8002e8c:	aa03      	add	r2, sp, #12
 8002e8e:	f7ff fedf 	bl	8002c50 <_printf_common>
 8002e92:	3001      	adds	r0, #1
 8002e94:	d14a      	bne.n	8002f2c <_printf_i+0x1f8>
 8002e96:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9a:	b004      	add	sp, #16
 8002e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	f043 0320 	orr.w	r3, r3, #32
 8002ea6:	6023      	str	r3, [r4, #0]
 8002ea8:	2778      	movs	r7, #120	; 0x78
 8002eaa:	4832      	ldr	r0, [pc, #200]	; (8002f74 <_printf_i+0x240>)
 8002eac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	6829      	ldr	r1, [r5, #0]
 8002eb4:	061f      	lsls	r7, r3, #24
 8002eb6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002eba:	d402      	bmi.n	8002ec2 <_printf_i+0x18e>
 8002ebc:	065f      	lsls	r7, r3, #25
 8002ebe:	bf48      	it	mi
 8002ec0:	b2b6      	uxthmi	r6, r6
 8002ec2:	07df      	lsls	r7, r3, #31
 8002ec4:	bf48      	it	mi
 8002ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8002eca:	6029      	str	r1, [r5, #0]
 8002ecc:	bf48      	it	mi
 8002ece:	6023      	strmi	r3, [r4, #0]
 8002ed0:	b91e      	cbnz	r6, 8002eda <_printf_i+0x1a6>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	f023 0320 	bic.w	r3, r3, #32
 8002ed8:	6023      	str	r3, [r4, #0]
 8002eda:	2310      	movs	r3, #16
 8002edc:	e7a6      	b.n	8002e2c <_printf_i+0xf8>
 8002ede:	4824      	ldr	r0, [pc, #144]	; (8002f70 <_printf_i+0x23c>)
 8002ee0:	e7e4      	b.n	8002eac <_printf_i+0x178>
 8002ee2:	4615      	mov	r5, r2
 8002ee4:	e7bd      	b.n	8002e62 <_printf_i+0x12e>
 8002ee6:	682b      	ldr	r3, [r5, #0]
 8002ee8:	6826      	ldr	r6, [r4, #0]
 8002eea:	1d18      	adds	r0, r3, #4
 8002eec:	6961      	ldr	r1, [r4, #20]
 8002eee:	6028      	str	r0, [r5, #0]
 8002ef0:	0635      	lsls	r5, r6, #24
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	d501      	bpl.n	8002efa <_printf_i+0x1c6>
 8002ef6:	6019      	str	r1, [r3, #0]
 8002ef8:	e002      	b.n	8002f00 <_printf_i+0x1cc>
 8002efa:	0670      	lsls	r0, r6, #25
 8002efc:	d5fb      	bpl.n	8002ef6 <_printf_i+0x1c2>
 8002efe:	8019      	strh	r1, [r3, #0]
 8002f00:	2300      	movs	r3, #0
 8002f02:	4615      	mov	r5, r2
 8002f04:	6123      	str	r3, [r4, #16]
 8002f06:	e7bc      	b.n	8002e82 <_printf_i+0x14e>
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	1d1a      	adds	r2, r3, #4
 8002f0e:	602a      	str	r2, [r5, #0]
 8002f10:	681d      	ldr	r5, [r3, #0]
 8002f12:	6862      	ldr	r2, [r4, #4]
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 f859 	bl	8002fcc <memchr>
 8002f1a:	b108      	cbz	r0, 8002f20 <_printf_i+0x1ec>
 8002f1c:	1b40      	subs	r0, r0, r5
 8002f1e:	6060      	str	r0, [r4, #4]
 8002f20:	6863      	ldr	r3, [r4, #4]
 8002f22:	6123      	str	r3, [r4, #16]
 8002f24:	2300      	movs	r3, #0
 8002f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f2a:	e7aa      	b.n	8002e82 <_printf_i+0x14e>
 8002f2c:	462a      	mov	r2, r5
 8002f2e:	4649      	mov	r1, r9
 8002f30:	4640      	mov	r0, r8
 8002f32:	6923      	ldr	r3, [r4, #16]
 8002f34:	47d0      	blx	sl
 8002f36:	3001      	adds	r0, #1
 8002f38:	d0ad      	beq.n	8002e96 <_printf_i+0x162>
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	079b      	lsls	r3, r3, #30
 8002f3e:	d413      	bmi.n	8002f68 <_printf_i+0x234>
 8002f40:	68e0      	ldr	r0, [r4, #12]
 8002f42:	9b03      	ldr	r3, [sp, #12]
 8002f44:	4298      	cmp	r0, r3
 8002f46:	bfb8      	it	lt
 8002f48:	4618      	movlt	r0, r3
 8002f4a:	e7a6      	b.n	8002e9a <_printf_i+0x166>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	4632      	mov	r2, r6
 8002f50:	4649      	mov	r1, r9
 8002f52:	4640      	mov	r0, r8
 8002f54:	47d0      	blx	sl
 8002f56:	3001      	adds	r0, #1
 8002f58:	d09d      	beq.n	8002e96 <_printf_i+0x162>
 8002f5a:	3501      	adds	r5, #1
 8002f5c:	68e3      	ldr	r3, [r4, #12]
 8002f5e:	9903      	ldr	r1, [sp, #12]
 8002f60:	1a5b      	subs	r3, r3, r1
 8002f62:	42ab      	cmp	r3, r5
 8002f64:	dcf2      	bgt.n	8002f4c <_printf_i+0x218>
 8002f66:	e7eb      	b.n	8002f40 <_printf_i+0x20c>
 8002f68:	2500      	movs	r5, #0
 8002f6a:	f104 0619 	add.w	r6, r4, #25
 8002f6e:	e7f5      	b.n	8002f5c <_printf_i+0x228>
 8002f70:	08003183 	.word	0x08003183
 8002f74:	08003194 	.word	0x08003194

08002f78 <memmove>:
 8002f78:	4288      	cmp	r0, r1
 8002f7a:	b510      	push	{r4, lr}
 8002f7c:	eb01 0402 	add.w	r4, r1, r2
 8002f80:	d902      	bls.n	8002f88 <memmove+0x10>
 8002f82:	4284      	cmp	r4, r0
 8002f84:	4623      	mov	r3, r4
 8002f86:	d807      	bhi.n	8002f98 <memmove+0x20>
 8002f88:	1e43      	subs	r3, r0, #1
 8002f8a:	42a1      	cmp	r1, r4
 8002f8c:	d008      	beq.n	8002fa0 <memmove+0x28>
 8002f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f96:	e7f8      	b.n	8002f8a <memmove+0x12>
 8002f98:	4601      	mov	r1, r0
 8002f9a:	4402      	add	r2, r0
 8002f9c:	428a      	cmp	r2, r1
 8002f9e:	d100      	bne.n	8002fa2 <memmove+0x2a>
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002faa:	e7f7      	b.n	8002f9c <memmove+0x24>

08002fac <_sbrk_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	2300      	movs	r3, #0
 8002fb0:	4d05      	ldr	r5, [pc, #20]	; (8002fc8 <_sbrk_r+0x1c>)
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	602b      	str	r3, [r5, #0]
 8002fb8:	f7fd fe94 	bl	8000ce4 <_sbrk>
 8002fbc:	1c43      	adds	r3, r0, #1
 8002fbe:	d102      	bne.n	8002fc6 <_sbrk_r+0x1a>
 8002fc0:	682b      	ldr	r3, [r5, #0]
 8002fc2:	b103      	cbz	r3, 8002fc6 <_sbrk_r+0x1a>
 8002fc4:	6023      	str	r3, [r4, #0]
 8002fc6:	bd38      	pop	{r3, r4, r5, pc}
 8002fc8:	20000230 	.word	0x20000230

08002fcc <memchr>:
 8002fcc:	4603      	mov	r3, r0
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	b2c9      	uxtb	r1, r1
 8002fd2:	4402      	add	r2, r0
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	d101      	bne.n	8002fde <memchr+0x12>
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e003      	b.n	8002fe6 <memchr+0x1a>
 8002fde:	7804      	ldrb	r4, [r0, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	428c      	cmp	r4, r1
 8002fe4:	d1f6      	bne.n	8002fd4 <memchr+0x8>
 8002fe6:	bd10      	pop	{r4, pc}

08002fe8 <memcpy>:
 8002fe8:	440a      	add	r2, r1
 8002fea:	4291      	cmp	r1, r2
 8002fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ff0:	d100      	bne.n	8002ff4 <memcpy+0xc>
 8002ff2:	4770      	bx	lr
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ffa:	4291      	cmp	r1, r2
 8002ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003000:	d1f9      	bne.n	8002ff6 <memcpy+0xe>
 8003002:	bd10      	pop	{r4, pc}

08003004 <_realloc_r>:
 8003004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003008:	4680      	mov	r8, r0
 800300a:	4614      	mov	r4, r2
 800300c:	460e      	mov	r6, r1
 800300e:	b921      	cbnz	r1, 800301a <_realloc_r+0x16>
 8003010:	4611      	mov	r1, r2
 8003012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003016:	f7ff bc37 	b.w	8002888 <_malloc_r>
 800301a:	b92a      	cbnz	r2, 8003028 <_realloc_r+0x24>
 800301c:	f7ff fbcc 	bl	80027b8 <_free_r>
 8003020:	4625      	mov	r5, r4
 8003022:	4628      	mov	r0, r5
 8003024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003028:	f000 f81b 	bl	8003062 <_malloc_usable_size_r>
 800302c:	4284      	cmp	r4, r0
 800302e:	4607      	mov	r7, r0
 8003030:	d802      	bhi.n	8003038 <_realloc_r+0x34>
 8003032:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003036:	d812      	bhi.n	800305e <_realloc_r+0x5a>
 8003038:	4621      	mov	r1, r4
 800303a:	4640      	mov	r0, r8
 800303c:	f7ff fc24 	bl	8002888 <_malloc_r>
 8003040:	4605      	mov	r5, r0
 8003042:	2800      	cmp	r0, #0
 8003044:	d0ed      	beq.n	8003022 <_realloc_r+0x1e>
 8003046:	42bc      	cmp	r4, r7
 8003048:	4622      	mov	r2, r4
 800304a:	4631      	mov	r1, r6
 800304c:	bf28      	it	cs
 800304e:	463a      	movcs	r2, r7
 8003050:	f7ff ffca 	bl	8002fe8 <memcpy>
 8003054:	4631      	mov	r1, r6
 8003056:	4640      	mov	r0, r8
 8003058:	f7ff fbae 	bl	80027b8 <_free_r>
 800305c:	e7e1      	b.n	8003022 <_realloc_r+0x1e>
 800305e:	4635      	mov	r5, r6
 8003060:	e7df      	b.n	8003022 <_realloc_r+0x1e>

08003062 <_malloc_usable_size_r>:
 8003062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003066:	1f18      	subs	r0, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	bfbc      	itt	lt
 800306c:	580b      	ldrlt	r3, [r1, r0]
 800306e:	18c0      	addlt	r0, r0, r3
 8003070:	4770      	bx	lr
	...

08003074 <_init>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	bf00      	nop
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr

08003080 <_fini>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr
