
CONTROLE MOTOR DC_IHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004354  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004594  08004594  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004594  08004594  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004594  08004594  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800459c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000060  080045fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080045fc  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a931  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019c7  00000000  00000000  0002a9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  0002c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ff  00000000  00000000  0002d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001767f  00000000  00000000  0002da87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea81  00000000  00000000  00045106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088395  00000000  00000000  00053b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ac4  00000000  00000000  000dbf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000df9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08004448 	.word	0x08004448

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08004448 	.word	0x08004448

0800014c <LCD_Cursor>:
 *  @return None
 *
 ******************************************************************************/

void LCD_Cursor(uint8_t x, uint8_t y)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if (x == 0)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d102      	bne.n	8000168 <LCD_Cursor+0x1c>
		temp = 0x80;
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e001      	b.n	800016c <LCD_Cursor+0x20>
	else
		temp = 0xC0;
 8000168:	23c0      	movs	r3, #192	; 0xc0
 800016a:	73fb      	strb	r3, [r7, #15]

	temp = temp + y;
 800016c:	7bfa      	ldrb	r2, [r7, #15]
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	4413      	add	r3, r2
 8000172:	73fb      	strb	r3, [r7, #15]

	LCD_Cmd(temp);
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	4618      	mov	r0, r3
 8000178:	f000 f8aa 	bl	80002d0 <LCD_Cmd>


}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <LCD_Data>:
*
*  @return  None
*
******************************************************************************/
void LCD_Data(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	RS_GPIO_Port->BSRR = RS_Pin;
 800018e:	4b44      	ldr	r3, [pc, #272]	; (80002a0 <LCD_Data+0x11c>)
 8000190:	2208      	movs	r2, #8
 8000192:	611a      	str	r2, [r3, #16]
	if (data & 0x80)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	da03      	bge.n	80001a4 <LCD_Data+0x20>
		D7_GPIO_Port->BSRR = D7_Pin;
 800019c:	4b40      	ldr	r3, [pc, #256]	; (80002a0 <LCD_Data+0x11c>)
 800019e:	2280      	movs	r2, #128	; 0x80
 80001a0:	611a      	str	r2, [r3, #16]
 80001a2:	e003      	b.n	80001ac <LCD_Data+0x28>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 80001a4:	4b3e      	ldr	r3, [pc, #248]	; (80002a0 <LCD_Data+0x11c>)
 80001a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80001aa:	611a      	str	r2, [r3, #16]
	if (data & 0x40)
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d003      	beq.n	80001be <LCD_Data+0x3a>
		D6_GPIO_Port->BSRR = D6_Pin;
 80001b6:	4b3a      	ldr	r3, [pc, #232]	; (80002a0 <LCD_Data+0x11c>)
 80001b8:	2240      	movs	r2, #64	; 0x40
 80001ba:	611a      	str	r2, [r3, #16]
 80001bc:	e003      	b.n	80001c6 <LCD_Data+0x42>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 80001be:	4b38      	ldr	r3, [pc, #224]	; (80002a0 <LCD_Data+0x11c>)
 80001c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80001c4:	611a      	str	r2, [r3, #16]
	if (data & 0x20)
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	f003 0320 	and.w	r3, r3, #32
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d003      	beq.n	80001d8 <LCD_Data+0x54>
		D5_GPIO_Port->BSRR = D5_Pin;
 80001d0:	4b33      	ldr	r3, [pc, #204]	; (80002a0 <LCD_Data+0x11c>)
 80001d2:	2220      	movs	r2, #32
 80001d4:	611a      	str	r2, [r3, #16]
 80001d6:	e003      	b.n	80001e0 <LCD_Data+0x5c>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 80001d8:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <LCD_Data+0x11c>)
 80001da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80001de:	611a      	str	r2, [r3, #16]
	if (data & 0x10)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 0310 	and.w	r3, r3, #16
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d003      	beq.n	80001f2 <LCD_Data+0x6e>
		D4_GPIO_Port->BSRR = D4_Pin;
 80001ea:	4b2d      	ldr	r3, [pc, #180]	; (80002a0 <LCD_Data+0x11c>)
 80001ec:	2210      	movs	r2, #16
 80001ee:	611a      	str	r2, [r3, #16]
 80001f0:	e003      	b.n	80001fa <LCD_Data+0x76>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 80001f2:	4b2b      	ldr	r3, [pc, #172]	; (80002a0 <LCD_Data+0x11c>)
 80001f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001f8:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 80001fa:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <LCD_Data+0x11c>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000200:	2001      	movs	r0, #1
 8000202:	f001 faef 	bl	80017e4 <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 8000206:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <LCD_Data+0x11c>)
 8000208:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800020c:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 800020e:	2001      	movs	r0, #1
 8000210:	f001 fae8 	bl	80017e4 <HAL_Delay>

	if (data & 0x08)
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	f003 0308 	and.w	r3, r3, #8
 800021a:	2b00      	cmp	r3, #0
 800021c:	d003      	beq.n	8000226 <LCD_Data+0xa2>
		D7_GPIO_Port->BSRR = D7_Pin;
 800021e:	4b20      	ldr	r3, [pc, #128]	; (80002a0 <LCD_Data+0x11c>)
 8000220:	2280      	movs	r2, #128	; 0x80
 8000222:	611a      	str	r2, [r3, #16]
 8000224:	e003      	b.n	800022e <LCD_Data+0xaa>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 8000226:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <LCD_Data+0x11c>)
 8000228:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800022c:	611a      	str	r2, [r3, #16]
	if (data & 0x04)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 0304 	and.w	r3, r3, #4
 8000234:	2b00      	cmp	r3, #0
 8000236:	d003      	beq.n	8000240 <LCD_Data+0xbc>
		D6_GPIO_Port->BSRR = D6_Pin;
 8000238:	4b19      	ldr	r3, [pc, #100]	; (80002a0 <LCD_Data+0x11c>)
 800023a:	2240      	movs	r2, #64	; 0x40
 800023c:	611a      	str	r2, [r3, #16]
 800023e:	e003      	b.n	8000248 <LCD_Data+0xc4>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <LCD_Data+0x11c>)
 8000242:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000246:	611a      	str	r2, [r3, #16]
	if (data & 0x02)
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	f003 0302 	and.w	r3, r3, #2
 800024e:	2b00      	cmp	r3, #0
 8000250:	d003      	beq.n	800025a <LCD_Data+0xd6>
		D5_GPIO_Port->BSRR = D5_Pin;
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <LCD_Data+0x11c>)
 8000254:	2220      	movs	r2, #32
 8000256:	611a      	str	r2, [r3, #16]
 8000258:	e003      	b.n	8000262 <LCD_Data+0xde>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <LCD_Data+0x11c>)
 800025c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000260:	611a      	str	r2, [r3, #16]
	if (data & 0x01)
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d003      	beq.n	8000274 <LCD_Data+0xf0>
		D4_GPIO_Port->BSRR = D4_Pin;
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <LCD_Data+0x11c>)
 800026e:	2210      	movs	r2, #16
 8000270:	611a      	str	r2, [r3, #16]
 8000272:	e003      	b.n	800027c <LCD_Data+0xf8>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <LCD_Data+0x11c>)
 8000276:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800027a:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <LCD_Data+0x11c>)
 800027e:	2201      	movs	r2, #1
 8000280:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000282:	2001      	movs	r0, #1
 8000284:	f001 faae 	bl	80017e4 <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <LCD_Data+0x11c>)
 800028a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800028e:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f001 faa7 	bl	80017e4 <HAL_Delay>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800

080002a4 <LCD_String>:
*
*  @param1 String to be sended.
*
******************************************************************************/
void LCD_String(char *string)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	while (*string)
 80002ac:	e007      	b.n	80002be <LCD_String+0x1a>
	{
		LCD_Data(*string);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff66 	bl	8000184 <LCD_Data>
		string++;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3301      	adds	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
	while (*string)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1f3      	bne.n	80002ae <LCD_String+0xa>
	}
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <LCD_Cmd>:
*
*  @return None.
*
******************************************************************************/
void LCD_Cmd(uint8_t cmd)  // Fun��o para enviar um comando para o Display
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2108      	movs	r1, #8
 80002de:	4853      	ldr	r0, [pc, #332]	; (800042c <LCD_Cmd+0x15c>)
 80002e0:	f001 fd1b 	bl	8001d1a <HAL_GPIO_WritePin>

	if (cmd & 0x80)
 80002e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	da05      	bge.n	80002f8 <LCD_Cmd+0x28>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2180      	movs	r1, #128	; 0x80
 80002f0:	484e      	ldr	r0, [pc, #312]	; (800042c <LCD_Cmd+0x15c>)
 80002f2:	f001 fd12 	bl	8001d1a <HAL_GPIO_WritePin>
 80002f6:	e004      	b.n	8000302 <LCD_Cmd+0x32>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2180      	movs	r1, #128	; 0x80
 80002fc:	484b      	ldr	r0, [pc, #300]	; (800042c <LCD_Cmd+0x15c>)
 80002fe:	f001 fd0c 	bl	8001d1a <HAL_GPIO_WritePin>
	if (cmd & 0x40)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000308:	2b00      	cmp	r3, #0
 800030a:	d005      	beq.n	8000318 <LCD_Cmd+0x48>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	2140      	movs	r1, #64	; 0x40
 8000310:	4846      	ldr	r0, [pc, #280]	; (800042c <LCD_Cmd+0x15c>)
 8000312:	f001 fd02 	bl	8001d1a <HAL_GPIO_WritePin>
 8000316:	e004      	b.n	8000322 <LCD_Cmd+0x52>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2140      	movs	r1, #64	; 0x40
 800031c:	4843      	ldr	r0, [pc, #268]	; (800042c <LCD_Cmd+0x15c>)
 800031e:	f001 fcfc 	bl	8001d1a <HAL_GPIO_WritePin>
	if (cmd & 0x20)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	2b00      	cmp	r3, #0
 800032a:	d005      	beq.n	8000338 <LCD_Cmd+0x68>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2120      	movs	r1, #32
 8000330:	483e      	ldr	r0, [pc, #248]	; (800042c <LCD_Cmd+0x15c>)
 8000332:	f001 fcf2 	bl	8001d1a <HAL_GPIO_WritePin>
 8000336:	e004      	b.n	8000342 <LCD_Cmd+0x72>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2120      	movs	r1, #32
 800033c:	483b      	ldr	r0, [pc, #236]	; (800042c <LCD_Cmd+0x15c>)
 800033e:	f001 fcec 	bl	8001d1a <HAL_GPIO_WritePin>
	if (cmd & 0x10)
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f003 0310 	and.w	r3, r3, #16
 8000348:	2b00      	cmp	r3, #0
 800034a:	d005      	beq.n	8000358 <LCD_Cmd+0x88>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2110      	movs	r1, #16
 8000350:	4836      	ldr	r0, [pc, #216]	; (800042c <LCD_Cmd+0x15c>)
 8000352:	f001 fce2 	bl	8001d1a <HAL_GPIO_WritePin>
 8000356:	e004      	b.n	8000362 <LCD_Cmd+0x92>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4833      	ldr	r0, [pc, #204]	; (800042c <LCD_Cmd+0x15c>)
 800035e:	f001 fcdc 	bl	8001d1a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2101      	movs	r1, #1
 8000366:	4831      	ldr	r0, [pc, #196]	; (800042c <LCD_Cmd+0x15c>)
 8000368:	f001 fcd7 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800036c:	2001      	movs	r0, #1
 800036e:	f001 fa39 	bl	80017e4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	482d      	ldr	r0, [pc, #180]	; (800042c <LCD_Cmd+0x15c>)
 8000378:	f001 fccf 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800037c:	2001      	movs	r0, #1
 800037e:	f001 fa31 	bl	80017e4 <HAL_Delay>

	if (cmd & 0x08)
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d005      	beq.n	8000398 <LCD_Cmd+0xc8>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	4826      	ldr	r0, [pc, #152]	; (800042c <LCD_Cmd+0x15c>)
 8000392:	f001 fcc2 	bl	8001d1a <HAL_GPIO_WritePin>
 8000396:	e004      	b.n	80003a2 <LCD_Cmd+0xd2>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2180      	movs	r1, #128	; 0x80
 800039c:	4823      	ldr	r0, [pc, #140]	; (800042c <LCD_Cmd+0x15c>)
 800039e:	f001 fcbc 	bl	8001d1a <HAL_GPIO_WritePin>
	if (cmd & 0x04)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d005      	beq.n	80003b8 <LCD_Cmd+0xe8>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2140      	movs	r1, #64	; 0x40
 80003b0:	481e      	ldr	r0, [pc, #120]	; (800042c <LCD_Cmd+0x15c>)
 80003b2:	f001 fcb2 	bl	8001d1a <HAL_GPIO_WritePin>
 80003b6:	e004      	b.n	80003c2 <LCD_Cmd+0xf2>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	481b      	ldr	r0, [pc, #108]	; (800042c <LCD_Cmd+0x15c>)
 80003be:	f001 fcac 	bl	8001d1a <HAL_GPIO_WritePin>
	if (cmd & 0x02)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	f003 0302 	and.w	r3, r3, #2
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d005      	beq.n	80003d8 <LCD_Cmd+0x108>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2120      	movs	r1, #32
 80003d0:	4816      	ldr	r0, [pc, #88]	; (800042c <LCD_Cmd+0x15c>)
 80003d2:	f001 fca2 	bl	8001d1a <HAL_GPIO_WritePin>
 80003d6:	e004      	b.n	80003e2 <LCD_Cmd+0x112>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2120      	movs	r1, #32
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <LCD_Cmd+0x15c>)
 80003de:	f001 fc9c 	bl	8001d1a <HAL_GPIO_WritePin>
	if (cmd & 0x01)
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d005      	beq.n	80003f8 <LCD_Cmd+0x128>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2110      	movs	r1, #16
 80003f0:	480e      	ldr	r0, [pc, #56]	; (800042c <LCD_Cmd+0x15c>)
 80003f2:	f001 fc92 	bl	8001d1a <HAL_GPIO_WritePin>
 80003f6:	e004      	b.n	8000402 <LCD_Cmd+0x132>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2110      	movs	r1, #16
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <LCD_Cmd+0x15c>)
 80003fe:	f001 fc8c 	bl	8001d1a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2101      	movs	r1, #1
 8000406:	4809      	ldr	r0, [pc, #36]	; (800042c <LCD_Cmd+0x15c>)
 8000408:	f001 fc87 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800040c:	2001      	movs	r0, #1
 800040e:	f001 f9e9 	bl	80017e4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2101      	movs	r1, #1
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <LCD_Cmd+0x15c>)
 8000418:	f001 fc7f 	bl	8001d1a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f001 f9e1 	bl	80017e4 <HAL_Delay>

}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40010800 	.word	0x40010800

08000430 <LCD_Clear>:
*
*  @return None.
*
******************************************************************************/
void LCD_Clear(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	LCD_Cmd(0x01);
 8000434:	2001      	movs	r0, #1
 8000436:	f7ff ff4b 	bl	80002d0 <LCD_Cmd>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}

0800043e <LCD_Init>:
*
*  @return None.
*
******************************************************************************/
void LCD_Init(void)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	af00      	add	r7, sp, #0
	LCD_Cmd(0x33);
 8000442:	2033      	movs	r0, #51	; 0x33
 8000444:	f7ff ff44 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x32);
 8000448:	2032      	movs	r0, #50	; 0x32
 800044a:	f7ff ff41 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x28);
 800044e:	2028      	movs	r0, #40	; 0x28
 8000450:	f7ff ff3e 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x06);
 8000454:	2006      	movs	r0, #6
 8000456:	f7ff ff3b 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x0C);
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff38 	bl	80002d0 <LCD_Cmd>
	LCD_Cmd(0x01);
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff ff35 	bl	80002d0 <LCD_Cmd>
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000472:	f001 f955 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000476:	f000 fe17 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047a:	f000 ff2d 	bl	80012d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800047e:	f000 fe87 	bl	8001190 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000482:	f000 fe57 	bl	8001134 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000486:	f000 fecf 	bl	8001228 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  sys_init();
 800048a:	f000 fd5d 	bl	8000f48 <sys_init>

 address = find_I2C_device(0x03, 0x77);
 800048e:	2177      	movs	r1, #119	; 0x77
 8000490:	2003      	movs	r0, #3
 8000492:	f000 fde1 	bl	8001058 <find_I2C_device>
 8000496:	4603      	mov	r3, r0
 8000498:	461a      	mov	r2, r3
 800049a:	4ba6      	ldr	r3, [pc, #664]	; (8000734 <main+0x2c8>)
 800049c:	701a      	strb	r2, [r3, #0]
 if (HAL_I2C_Mem_Write(&hi2c1, address, 0x00, I2C_MEMADD_SIZE_8BIT,&data, 1, 100) != HAL_OK)
 800049e:	4ba5      	ldr	r3, [pc, #660]	; (8000734 <main+0x2c8>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	b299      	uxth	r1, r3
 80004a4:	2364      	movs	r3, #100	; 0x64
 80004a6:	9302      	str	r3, [sp, #8]
 80004a8:	2301      	movs	r3, #1
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	4ba2      	ldr	r3, [pc, #648]	; (8000738 <main+0x2cc>)
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2301      	movs	r3, #1
 80004b2:	2200      	movs	r2, #0
 80004b4:	48a1      	ldr	r0, [pc, #644]	; (800073c <main+0x2d0>)
 80004b6:	f001 fd8d 	bl	8001fd4 <HAL_I2C_Mem_Write>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d000      	beq.n	80004c2 <main+0x56>
 {
	 while(1);
 80004c0:	e7fe      	b.n	80004c0 <main+0x54>
 }
HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c8:	489d      	ldr	r0, [pc, #628]	; (8000740 <main+0x2d4>)
 80004ca:	f001 fc26 	bl	8001d1a <HAL_GPIO_WritePin>
HAL_Delay(50);
 80004ce:	2032      	movs	r0, #50	; 0x32
 80004d0:	f001 f988 	bl	80017e4 <HAL_Delay>
HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004da:	4899      	ldr	r0, [pc, #612]	; (8000740 <main+0x2d4>)
 80004dc:	f001 fc1d 	bl	8001d1a <HAL_GPIO_WritePin>
HAL_Delay(50);
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f001 f97f 	bl	80017e4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80004e6:	4b97      	ldr	r3, [pc, #604]	; (8000744 <main+0x2d8>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d110      	bne.n	8000510 <main+0xa4>
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	4895      	ldr	r0, [pc, #596]	; (8000748 <main+0x2dc>)
 80004f4:	f001 fbfa 	bl	8001cec <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d008      	beq.n	8000510 <main+0xa4>
		{
			ENTER_Boucing();
 80004fe:	f000 fbb1 	bl	8000c64 <ENTER_Boucing>
			Buzzer_Teclas();
 8000502:	f000 fb6f 	bl	8000be4 <Buzzer_Teclas>
			start = 3;
 8000506:	4b8f      	ldr	r3, [pc, #572]	; (8000744 <main+0x2d8>)
 8000508:	2203      	movs	r2, #3
 800050a:	701a      	strb	r2, [r3, #0]
			converter_preset();
 800050c:	f000 fd74 	bl	8000ff8 <converter_preset>
		}

		if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (start == 1))
 8000510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000514:	488c      	ldr	r0, [pc, #560]	; (8000748 <main+0x2dc>)
 8000516:	f001 fbe9 	bl	8001cec <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00f      	beq.n	8000540 <main+0xd4>
 8000520:	4b88      	ldr	r3, [pc, #544]	; (8000744 <main+0x2d8>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d10b      	bne.n	8000540 <main+0xd4>
		{
			INC_Boucing();
 8000528:	f000 fb74 	bl	8000c14 <INC_Boucing>
			Buzzer_Teclas();
 800052c:	f000 fb5a 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 8000530:	f7ff ff7e 	bl	8000430 <LCD_Clear>
			menu = 1;
 8000534:	4b85      	ldr	r3, [pc, #532]	; (800074c <main+0x2e0>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
			start = 0;
 800053a:	4b82      	ldr	r3, [pc, #520]	; (8000744 <main+0x2d8>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
		}

		if ((menu == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin)))
 8000540:	4b82      	ldr	r3, [pc, #520]	; (800074c <main+0x2e0>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d113      	bne.n	8000570 <main+0x104>
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	487e      	ldr	r0, [pc, #504]	; (8000748 <main+0x2dc>)
 800054e:	f001 fbcd 	bl	8001cec <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d00b      	beq.n	8000570 <main+0x104>
		{
			DEC_Boucing();
 8000558:	f000 fb70 	bl	8000c3c <DEC_Boucing>
			Buzzer_Teclas();
 800055c:	f000 fb42 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 8000560:	f7ff ff66 	bl	8000430 <LCD_Clear>
			menu = 0;
 8000564:	4b79      	ldr	r3, [pc, #484]	; (800074c <main+0x2e0>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
			start = 2;
 800056a:	4b76      	ldr	r3, [pc, #472]	; (8000744 <main+0x2d8>)
 800056c:	2202      	movs	r2, #2
 800056e:	701a      	strb	r2, [r3, #0]
		}

		if ((aux_start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000570:	4b77      	ldr	r3, [pc, #476]	; (8000750 <main+0x2e4>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d113      	bne.n	80005a0 <main+0x134>
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	4872      	ldr	r0, [pc, #456]	; (8000748 <main+0x2dc>)
 800057e:	f001 fbb5 	bl	8001cec <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <main+0x134>
		{
			ENTER_Boucing();
 8000588:	f000 fb6c 	bl	8000c64 <ENTER_Boucing>
			Buzzer_Teclas();
 800058c:	f000 fb2a 	bl	8000be4 <Buzzer_Teclas>
			start = 3;
 8000590:	4b6c      	ldr	r3, [pc, #432]	; (8000744 <main+0x2d8>)
 8000592:	2203      	movs	r2, #3
 8000594:	701a      	strb	r2, [r3, #0]
			aux_start = 0;
 8000596:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <main+0x2e4>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
			converter_preset();
 800059c:	f000 fd2c 	bl	8000ff8 <converter_preset>
		}

		if ((aux_menu == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80005a0:	4b6c      	ldr	r3, [pc, #432]	; (8000754 <main+0x2e8>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d11d      	bne.n	80005e4 <main+0x178>
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	4866      	ldr	r0, [pc, #408]	; (8000748 <main+0x2dc>)
 80005ae:	f001 fb9d 	bl	8001cec <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d015      	beq.n	80005e4 <main+0x178>
		{
			ENTER_Boucing();
 80005b8:	f000 fb54 	bl	8000c64 <ENTER_Boucing>
			Buzzer_Teclas();
 80005bc:	f000 fb12 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 80005c0:	f7ff ff36 	bl	8000430 <LCD_Clear>
			menu = 2;
 80005c4:	4b61      	ldr	r3, [pc, #388]	; (800074c <main+0x2e0>)
 80005c6:	2202      	movs	r2, #2
 80005c8:	701a      	strb	r2, [r3, #0]
			aux_menu = 0;
 80005ca:	4b62      	ldr	r3, [pc, #392]	; (8000754 <main+0x2e8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
			a_inc = 5;
 80005d0:	4b61      	ldr	r3, [pc, #388]	; (8000758 <main+0x2ec>)
 80005d2:	2205      	movs	r2, #5
 80005d4:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 80005d6:	4b60      	ldr	r3, [pc, #384]	; (8000758 <main+0x2ec>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	495f      	ldr	r1, [pc, #380]	; (800075c <main+0x2f0>)
 80005de:	4860      	ldr	r0, [pc, #384]	; (8000760 <main+0x2f4>)
 80005e0:	f003 fa80 	bl	8003ae4 <siprintf>
		}

		if ((aux_accel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (a_inc <= 80)))
 80005e4:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <main+0x2f8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d125      	bne.n	8000638 <main+0x1cc>
 80005ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f0:	4855      	ldr	r0, [pc, #340]	; (8000748 <main+0x2dc>)
 80005f2:	f001 fb7b 	bl	8001cec <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d01d      	beq.n	8000638 <main+0x1cc>
 80005fc:	4b56      	ldr	r3, [pc, #344]	; (8000758 <main+0x2ec>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b50      	cmp	r3, #80	; 0x50
 8000602:	d819      	bhi.n	8000638 <main+0x1cc>
		{
			aux_menu =0;
 8000604:	4b53      	ldr	r3, [pc, #332]	; (8000754 <main+0x2e8>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
			INC_Boucing();
 800060a:	f000 fb03 	bl	8000c14 <INC_Boucing>
			Buzzer_Teclas();
 800060e:	f000 fae9 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 8000612:	f7ff ff0d 	bl	8000430 <LCD_Clear>
			a_inc += 5;
 8000616:	4b50      	ldr	r3, [pc, #320]	; (8000758 <main+0x2ec>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3305      	adds	r3, #5
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <main+0x2ec>)
 8000620:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 8000622:	4b4d      	ldr	r3, [pc, #308]	; (8000758 <main+0x2ec>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	461a      	mov	r2, r3
 8000628:	494c      	ldr	r1, [pc, #304]	; (800075c <main+0x2f0>)
 800062a:	484d      	ldr	r0, [pc, #308]	; (8000760 <main+0x2f4>)
 800062c:	f003 fa5a 	bl	8003ae4 <siprintf>
			menu = 3;
 8000630:	4b46      	ldr	r3, [pc, #280]	; (800074c <main+0x2e0>)
 8000632:	2203      	movs	r2, #3
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e02c      	b.n	8000692 <main+0x226>
		}
		else if (((aux_accel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (a_inc <= 80) && (a_inc >5))))
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <main+0x2f8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d128      	bne.n	8000692 <main+0x226>
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	4840      	ldr	r0, [pc, #256]	; (8000748 <main+0x2dc>)
 8000646:	f001 fb51 	bl	8001cec <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d020      	beq.n	8000692 <main+0x226>
 8000650:	4b41      	ldr	r3, [pc, #260]	; (8000758 <main+0x2ec>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b50      	cmp	r3, #80	; 0x50
 8000656:	d81c      	bhi.n	8000692 <main+0x226>
 8000658:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <main+0x2ec>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b05      	cmp	r3, #5
 800065e:	d918      	bls.n	8000692 <main+0x226>
		{
			aux_menu = 0;
 8000660:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <main+0x2e8>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
			DEC_Boucing();
 8000666:	f000 fae9 	bl	8000c3c <DEC_Boucing>
			Buzzer_Teclas();
 800066a:	f000 fabb 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 800066e:	f7ff fedf 	bl	8000430 <LCD_Clear>
			a_inc -= 5;
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <main+0x2ec>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b05      	subs	r3, #5
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <main+0x2ec>)
 800067c:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_accel, "%d", a_inc);
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <main+0x2ec>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	4935      	ldr	r1, [pc, #212]	; (800075c <main+0x2f0>)
 8000686:	4836      	ldr	r0, [pc, #216]	; (8000760 <main+0x2f4>)
 8000688:	f003 fa2c 	bl	8003ae4 <siprintf>
			menu = 3;
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <main+0x2e0>)
 800068e:	2203      	movs	r2, #3
 8000690:	701a      	strb	r2, [r3, #0]
		}

		if ((aux_running == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000692:	4b35      	ldr	r3, [pc, #212]	; (8000768 <main+0x2fc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d121      	bne.n	80006de <main+0x272>
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	482a      	ldr	r0, [pc, #168]	; (8000748 <main+0x2dc>)
 80006a0:	f001 fb24 	bl	8001cec <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d019      	beq.n	80006de <main+0x272>
		{
			a_inc = a_inc;
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <main+0x2ec>)
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <main+0x2ec>)
 80006b0:	701a      	strb	r2, [r3, #0]
			aux_accel = 0;
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <main+0x2f8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
			ENTER_Boucing();
 80006b8:	f000 fad4 	bl	8000c64 <ENTER_Boucing>
			Buzzer_Teclas();
 80006bc:	f000 fa92 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 80006c0:	f7ff feb6 	bl	8000430 <LCD_Clear>
			menu = 4;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <main+0x2e0>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	701a      	strb	r2, [r3, #0]
			r_inc = 5;
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <main+0x300>)
 80006cc:	2205      	movs	r2, #5
 80006ce:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <main+0x300>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4921      	ldr	r1, [pc, #132]	; (800075c <main+0x2f0>)
 80006d8:	4825      	ldr	r0, [pc, #148]	; (8000770 <main+0x304>)
 80006da:	f003 fa03 	bl	8003ae4 <siprintf>
		}

		if ((inc_running == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (r_inc <= 180)))
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <main+0x308>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d148      	bne.n	8000778 <main+0x30c>
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	4817      	ldr	r0, [pc, #92]	; (8000748 <main+0x2dc>)
 80006ec:	f001 fafe 	bl	8001cec <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d040      	beq.n	8000778 <main+0x30c>
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <main+0x300>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2bb4      	cmp	r3, #180	; 0xb4
 80006fc:	d83c      	bhi.n	8000778 <main+0x30c>
		{
			aux_running = 0;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <main+0x2fc>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
			INC_Boucing();
 8000704:	f000 fa86 	bl	8000c14 <INC_Boucing>
			Buzzer_Teclas();
 8000708:	f000 fa6c 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 800070c:	f7ff fe90 	bl	8000430 <LCD_Clear>
			r_inc += 5;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <main+0x300>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3305      	adds	r3, #5
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <main+0x300>)
 800071a:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <main+0x300>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	490e      	ldr	r1, [pc, #56]	; (800075c <main+0x2f0>)
 8000724:	4812      	ldr	r0, [pc, #72]	; (8000770 <main+0x304>)
 8000726:	f003 f9dd 	bl	8003ae4 <siprintf>
			menu = 5;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <main+0x2e0>)
 800072c:	2205      	movs	r2, #5
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	e04f      	b.n	80007d2 <main+0x366>
 8000732:	bf00      	nop
 8000734:	20000000 	.word	0x20000000
 8000738:	20000001 	.word	0x20000001
 800073c:	2000007c 	.word	0x2000007c
 8000740:	40011000 	.word	0x40011000
 8000744:	20000161 	.word	0x20000161
 8000748:	40010c00 	.word	0x40010c00
 800074c:	20000160 	.word	0x20000160
 8000750:	20000163 	.word	0x20000163
 8000754:	20000162 	.word	0x20000162
 8000758:	20000168 	.word	0x20000168
 800075c:	08004460 	.word	0x08004460
 8000760:	20000170 	.word	0x20000170
 8000764:	20000164 	.word	0x20000164
 8000768:	20000165 	.word	0x20000165
 800076c:	20000169 	.word	0x20000169
 8000770:	20000180 	.word	0x20000180
 8000774:	2000016b 	.word	0x2000016b
		}
		else if ((inc_running == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (r_inc <= 180) && (r_inc > 5)))
 8000778:	4bb5      	ldr	r3, [pc, #724]	; (8000a50 <main+0x5e4>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d128      	bne.n	80007d2 <main+0x366>
 8000780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000784:	48b3      	ldr	r0, [pc, #716]	; (8000a54 <main+0x5e8>)
 8000786:	f001 fab1 	bl	8001cec <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d020      	beq.n	80007d2 <main+0x366>
 8000790:	4bb1      	ldr	r3, [pc, #708]	; (8000a58 <main+0x5ec>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2bb4      	cmp	r3, #180	; 0xb4
 8000796:	d81c      	bhi.n	80007d2 <main+0x366>
 8000798:	4baf      	ldr	r3, [pc, #700]	; (8000a58 <main+0x5ec>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b05      	cmp	r3, #5
 800079e:	d918      	bls.n	80007d2 <main+0x366>
		{
			aux_running = 0;
 80007a0:	4bae      	ldr	r3, [pc, #696]	; (8000a5c <main+0x5f0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
			DEC_Boucing();
 80007a6:	f000 fa49 	bl	8000c3c <DEC_Boucing>
			Buzzer_Teclas();
 80007aa:	f000 fa1b 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 80007ae:	f7ff fe3f 	bl	8000430 <LCD_Clear>
			r_inc -= 5;
 80007b2:	4ba9      	ldr	r3, [pc, #676]	; (8000a58 <main+0x5ec>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	3b05      	subs	r3, #5
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4ba7      	ldr	r3, [pc, #668]	; (8000a58 <main+0x5ec>)
 80007bc:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 80007be:	4ba6      	ldr	r3, [pc, #664]	; (8000a58 <main+0x5ec>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	49a6      	ldr	r1, [pc, #664]	; (8000a60 <main+0x5f4>)
 80007c6:	48a7      	ldr	r0, [pc, #668]	; (8000a64 <main+0x5f8>)
 80007c8:	f003 f98c 	bl	8003ae4 <siprintf>
			menu = 5;
 80007cc:	4ba6      	ldr	r3, [pc, #664]	; (8000a68 <main+0x5fc>)
 80007ce:	2205      	movs	r2, #5
 80007d0:	701a      	strb	r2, [r3, #0]
		}

		if ((aux_decel == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80007d2:	4ba6      	ldr	r3, [pc, #664]	; (8000a6c <main+0x600>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d121      	bne.n	800081e <main+0x3b2>
 80007da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007de:	489d      	ldr	r0, [pc, #628]	; (8000a54 <main+0x5e8>)
 80007e0:	f001 fa84 	bl	8001cec <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d019      	beq.n	800081e <main+0x3b2>
		{
			r_inc = r_inc;
 80007ea:	4b9b      	ldr	r3, [pc, #620]	; (8000a58 <main+0x5ec>)
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	4b9a      	ldr	r3, [pc, #616]	; (8000a58 <main+0x5ec>)
 80007f0:	701a      	strb	r2, [r3, #0]
			inc_running = 0;
 80007f2:	4b97      	ldr	r3, [pc, #604]	; (8000a50 <main+0x5e4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
			ENTER_Boucing();
 80007f8:	f000 fa34 	bl	8000c64 <ENTER_Boucing>
			Buzzer_Teclas();
 80007fc:	f000 f9f2 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 8000800:	f7ff fe16 	bl	8000430 <LCD_Clear>
			menu = 6;
 8000804:	4b98      	ldr	r3, [pc, #608]	; (8000a68 <main+0x5fc>)
 8000806:	2206      	movs	r2, #6
 8000808:	701a      	strb	r2, [r3, #0]
			d_inc = 5;
 800080a:	4b99      	ldr	r3, [pc, #612]	; (8000a70 <main+0x604>)
 800080c:	2205      	movs	r2, #5
 800080e:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 8000810:	4b97      	ldr	r3, [pc, #604]	; (8000a70 <main+0x604>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4992      	ldr	r1, [pc, #584]	; (8000a60 <main+0x5f4>)
 8000818:	4896      	ldr	r0, [pc, #600]	; (8000a74 <main+0x608>)
 800081a:	f003 f963 	bl	8003ae4 <siprintf>
		}

		if ((inc_decel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (d_inc <= 80)))
 800081e:	4b96      	ldr	r3, [pc, #600]	; (8000a78 <main+0x60c>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d125      	bne.n	8000872 <main+0x406>
 8000826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082a:	488a      	ldr	r0, [pc, #552]	; (8000a54 <main+0x5e8>)
 800082c:	f001 fa5e 	bl	8001cec <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d01d      	beq.n	8000872 <main+0x406>
 8000836:	4b8e      	ldr	r3, [pc, #568]	; (8000a70 <main+0x604>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b50      	cmp	r3, #80	; 0x50
 800083c:	d819      	bhi.n	8000872 <main+0x406>
		{
			aux_decel = 0;
 800083e:	4b8b      	ldr	r3, [pc, #556]	; (8000a6c <main+0x600>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
			INC_Boucing();
 8000844:	f000 f9e6 	bl	8000c14 <INC_Boucing>
			Buzzer_Teclas();
 8000848:	f000 f9cc 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 800084c:	f7ff fdf0 	bl	8000430 <LCD_Clear>
			d_inc += 5;
 8000850:	4b87      	ldr	r3, [pc, #540]	; (8000a70 <main+0x604>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	3305      	adds	r3, #5
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b85      	ldr	r3, [pc, #532]	; (8000a70 <main+0x604>)
 800085a:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 800085c:	4b84      	ldr	r3, [pc, #528]	; (8000a70 <main+0x604>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	497f      	ldr	r1, [pc, #508]	; (8000a60 <main+0x5f4>)
 8000864:	4883      	ldr	r0, [pc, #524]	; (8000a74 <main+0x608>)
 8000866:	f003 f93d 	bl	8003ae4 <siprintf>
			menu = 7;
 800086a:	4b7f      	ldr	r3, [pc, #508]	; (8000a68 <main+0x5fc>)
 800086c:	2207      	movs	r2, #7
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e02c      	b.n	80008cc <main+0x460>
		}
		else if ((inc_decel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (d_inc <= 80) && (d_inc > 5)))
 8000872:	4b81      	ldr	r3, [pc, #516]	; (8000a78 <main+0x60c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d128      	bne.n	80008cc <main+0x460>
 800087a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087e:	4875      	ldr	r0, [pc, #468]	; (8000a54 <main+0x5e8>)
 8000880:	f001 fa34 	bl	8001cec <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d020      	beq.n	80008cc <main+0x460>
 800088a:	4b79      	ldr	r3, [pc, #484]	; (8000a70 <main+0x604>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b50      	cmp	r3, #80	; 0x50
 8000890:	d81c      	bhi.n	80008cc <main+0x460>
 8000892:	4b77      	ldr	r3, [pc, #476]	; (8000a70 <main+0x604>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b05      	cmp	r3, #5
 8000898:	d918      	bls.n	80008cc <main+0x460>
		{
			aux_decel = 0;
 800089a:	4b74      	ldr	r3, [pc, #464]	; (8000a6c <main+0x600>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
			DEC_Boucing();
 80008a0:	f000 f9cc 	bl	8000c3c <DEC_Boucing>
			Buzzer_Teclas();
 80008a4:	f000 f99e 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 80008a8:	f7ff fdc2 	bl	8000430 <LCD_Clear>
			d_inc -= 5;
 80008ac:	4b70      	ldr	r3, [pc, #448]	; (8000a70 <main+0x604>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	3b05      	subs	r3, #5
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b6e      	ldr	r3, [pc, #440]	; (8000a70 <main+0x604>)
 80008b6:	701a      	strb	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 80008b8:	4b6d      	ldr	r3, [pc, #436]	; (8000a70 <main+0x604>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4968      	ldr	r1, [pc, #416]	; (8000a60 <main+0x5f4>)
 80008c0:	486c      	ldr	r0, [pc, #432]	; (8000a74 <main+0x608>)
 80008c2:	f003 f90f 	bl	8003ae4 <siprintf>
			menu = 7;
 80008c6:	4b68      	ldr	r3, [pc, #416]	; (8000a68 <main+0x5fc>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	701a      	strb	r2, [r3, #0]
		}

		if ((config_finish == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80008cc:	4b6b      	ldr	r3, [pc, #428]	; (8000a7c <main+0x610>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d11a      	bne.n	800090a <main+0x49e>
 80008d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d8:	485e      	ldr	r0, [pc, #376]	; (8000a54 <main+0x5e8>)
 80008da:	f001 fa07 	bl	8001cec <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d012      	beq.n	800090a <main+0x49e>
		{
			d_inc = d_inc;
 80008e4:	4b62      	ldr	r3, [pc, #392]	; (8000a70 <main+0x604>)
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b61      	ldr	r3, [pc, #388]	; (8000a70 <main+0x604>)
 80008ea:	701a      	strb	r2, [r3, #0]
			inc_decel = 0;
 80008ec:	4b62      	ldr	r3, [pc, #392]	; (8000a78 <main+0x60c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
			ENTER_Boucing();
 80008f2:	f000 f9b7 	bl	8000c64 <ENTER_Boucing>
			Buzzer_Teclas();
 80008f6:	f000 f975 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 80008fa:	f7ff fd99 	bl	8000430 <LCD_Clear>
			start = 4;
 80008fe:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <main+0x614>)
 8000900:	2204      	movs	r2, #4
 8000902:	701a      	strb	r2, [r3, #0]
			menu = 0;
 8000904:	4b58      	ldr	r3, [pc, #352]	; (8000a68 <main+0x5fc>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
		}

		if ((HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)) && (config_init = 1))
 800090a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090e:	4851      	ldr	r0, [pc, #324]	; (8000a54 <main+0x5e8>)
 8000910:	f001 f9ec 	bl	8001cec <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d00d      	beq.n	8000936 <main+0x4ca>
 800091a:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <main+0x618>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
		{
			ENTER_Boucing();
 8000920:	f000 f9a0 	bl	8000c64 <ENTER_Boucing>
			Buzzer_Teclas();
 8000924:	f000 f95e 	bl	8000be4 <Buzzer_Teclas>
			LCD_Clear();
 8000928:	f7ff fd82 	bl	8000430 <LCD_Clear>
			set_converter();
 800092c:	f000 fb30 	bl	8000f90 <set_converter>
			start = 5;
 8000930:	4b53      	ldr	r3, [pc, #332]	; (8000a80 <main+0x614>)
 8000932:	2205      	movs	r2, #5
 8000934:	701a      	strb	r2, [r3, #0]
		}

		switch (menu)
 8000936:	4b4c      	ldr	r3, [pc, #304]	; (8000a68 <main+0x5fc>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	2b06      	cmp	r3, #6
 800093e:	f200 80e5 	bhi.w	8000b0c <main+0x6a0>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <main+0x4dc>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000965 	.word	0x08000965
 800094c:	08000989 	.word	0x08000989
 8000950:	080009bb 	.word	0x080009bb
 8000954:	080009ed 	.word	0x080009ed
 8000958:	08000a1f 	.word	0x08000a1f
 800095c:	08000aa9 	.word	0x08000aa9
 8000960:	08000adb 	.word	0x08000adb
		{
		case 1:
			LCD_Cursor(0, 2);
 8000964:	2102      	movs	r1, #2
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fbf0 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 800096c:	4846      	ldr	r0, [pc, #280]	; (8000a88 <main+0x61c>)
 800096e:	f7ff fc99 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 0);
 8000972:	2100      	movs	r1, #0
 8000974:	2001      	movs	r0, #1
 8000976:	f7ff fbe9 	bl	800014c <LCD_Cursor>
			LCD_String("<     MENU    ");
 800097a:	4844      	ldr	r0, [pc, #272]	; (8000a8c <main+0x620>)
 800097c:	f7ff fc92 	bl	80002a4 <LCD_String>
			aux_menu = 1;
 8000980:	4b43      	ldr	r3, [pc, #268]	; (8000a90 <main+0x624>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
			break;
 8000986:	e0c1      	b.n	8000b0c <main+0x6a0>

		case 2:
			LCD_Cursor(0, 0);
 8000988:	2100      	movs	r1, #0
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fbde 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 8000990:	4840      	ldr	r0, [pc, #256]	; (8000a94 <main+0x628>)
 8000992:	f7ff fc87 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 7);
 8000996:	2107      	movs	r1, #7
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fbd7 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 800099e:	483e      	ldr	r0, [pc, #248]	; (8000a98 <main+0x62c>)
 80009a0:	f7ff fc80 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 8);
 80009a4:	2108      	movs	r1, #8
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff fbd0 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 80009ac:	483b      	ldr	r0, [pc, #236]	; (8000a9c <main+0x630>)
 80009ae:	f7ff fc79 	bl	80002a4 <LCD_String>
			aux_accel = 1;
 80009b2:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <main+0x634>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
			break;
 80009b8:	e0a8      	b.n	8000b0c <main+0x6a0>

		case 3:
			LCD_Cursor(0, 0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fbc5 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 80009c2:	4834      	ldr	r0, [pc, #208]	; (8000a94 <main+0x628>)
 80009c4:	f7ff fc6e 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 6);
 80009c8:	2106      	movs	r1, #6
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff fbbe 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 80009d0:	4831      	ldr	r0, [pc, #196]	; (8000a98 <main+0x62c>)
 80009d2:	f7ff fc67 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 8);
 80009d6:	2108      	movs	r1, #8
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff fbb7 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 80009de:	482f      	ldr	r0, [pc, #188]	; (8000a9c <main+0x630>)
 80009e0:	f7ff fc60 	bl	80002a4 <LCD_String>
			aux_running = 1;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <main+0x5f0>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
			break;
 80009ea:	e08f      	b.n	8000b0c <main+0x6a0>

		case 4:
			LCD_Cursor(0, 0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fbac 	bl	800014c <LCD_Cursor>
			LCD_String("  RUNNING TIME  ");
 80009f4:	482b      	ldr	r0, [pc, #172]	; (8000aa4 <main+0x638>)
 80009f6:	f7ff fc55 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 7);
 80009fa:	2107      	movs	r1, #7
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff fba5 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 8000a02:	4818      	ldr	r0, [pc, #96]	; (8000a64 <main+0x5f8>)
 8000a04:	f7ff fc4e 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 8);
 8000a08:	2108      	movs	r1, #8
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fb9e 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000a10:	4822      	ldr	r0, [pc, #136]	; (8000a9c <main+0x630>)
 8000a12:	f7ff fc47 	bl	80002a4 <LCD_String>
			inc_running = 1;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <main+0x5e4>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
			break;
 8000a1c:	e076      	b.n	8000b0c <main+0x6a0>

		case 5:
			LCD_Cursor(0, 0);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fb93 	bl	800014c <LCD_Cursor>
			LCD_String("  RUNNING TIME  ");
 8000a26:	481f      	ldr	r0, [pc, #124]	; (8000aa4 <main+0x638>)
 8000a28:	f7ff fc3c 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 6);
 8000a2c:	2106      	movs	r1, #6
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fb8c 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <main+0x5f8>)
 8000a36:	f7ff fc35 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 9);
 8000a3a:	2109      	movs	r1, #9
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff fb85 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000a42:	4816      	ldr	r0, [pc, #88]	; (8000a9c <main+0x630>)
 8000a44:	f7ff fc2e 	bl	80002a4 <LCD_String>
			aux_decel = 1;
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <main+0x600>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
			break;
 8000a4e:	e05d      	b.n	8000b0c <main+0x6a0>
 8000a50:	2000016b 	.word	0x2000016b
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	20000169 	.word	0x20000169
 8000a5c:	20000165 	.word	0x20000165
 8000a60:	08004460 	.word	0x08004460
 8000a64:	20000180 	.word	0x20000180
 8000a68:	20000160 	.word	0x20000160
 8000a6c:	20000166 	.word	0x20000166
 8000a70:	2000016a 	.word	0x2000016a
 8000a74:	20000190 	.word	0x20000190
 8000a78:	2000016c 	.word	0x2000016c
 8000a7c:	20000167 	.word	0x20000167
 8000a80:	20000161 	.word	0x20000161
 8000a84:	2000016d 	.word	0x2000016d
 8000a88:	08004464 	.word	0x08004464
 8000a8c:	08004474 	.word	0x08004474
 8000a90:	20000162 	.word	0x20000162
 8000a94:	08004484 	.word	0x08004484
 8000a98:	20000170 	.word	0x20000170
 8000a9c:	08004498 	.word	0x08004498
 8000aa0:	20000164 	.word	0x20000164
 8000aa4:	0800449c 	.word	0x0800449c

		case 6:
			LCD_Cursor(0, 0);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fb4e 	bl	800014c <LCD_Cursor>
			LCD_String("   DECEL TIME   ");
 8000ab0:	4841      	ldr	r0, [pc, #260]	; (8000bb8 <main+0x74c>)
 8000ab2:	f7ff fbf7 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 7);
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fb47 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000abe:	483f      	ldr	r0, [pc, #252]	; (8000bbc <main+0x750>)
 8000ac0:	f7ff fbf0 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 8);
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f7ff fb40 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000acc:	483c      	ldr	r0, [pc, #240]	; (8000bc0 <main+0x754>)
 8000ace:	f7ff fbe9 	bl	80002a4 <LCD_String>
			inc_decel = 1;
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <main+0x758>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
			break;
 8000ad8:	e018      	b.n	8000b0c <main+0x6a0>

		case 7:
			LCD_Cursor(0, 0);
 8000ada:	2100      	movs	r1, #0
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff fb35 	bl	800014c <LCD_Cursor>
			LCD_String("   DECEL TIME   ");
 8000ae2:	4835      	ldr	r0, [pc, #212]	; (8000bb8 <main+0x74c>)
 8000ae4:	f7ff fbde 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 6);
 8000ae8:	2106      	movs	r1, #6
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff fb2e 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000af0:	4832      	ldr	r0, [pc, #200]	; (8000bbc <main+0x750>)
 8000af2:	f7ff fbd7 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 8);
 8000af6:	2108      	movs	r1, #8
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fb27 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000afe:	4830      	ldr	r0, [pc, #192]	; (8000bc0 <main+0x754>)
 8000b00:	f7ff fbd0 	bl	80002a4 <LCD_String>
			config_finish = 1;
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <main+0x75c>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
			break;
 8000b0a:	bf00      	nop
		}

		switch (start)
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <main+0x760>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	f63f ace7 	bhi.w	80004e6 <main+0x7a>
 8000b18:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <main+0x6b4>)
 8000b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1e:	bf00      	nop
 8000b20:	08000b35 	.word	0x08000b35
 8000b24:	08000b53 	.word	0x08000b53
 8000b28:	08000b77 	.word	0x08000b77
 8000b2c:	08000b83 	.word	0x08000b83
 8000b30:	08000bad 	.word	0x08000bad
		{

		case 1:
			LCD_Cursor(0, 2);
 8000b34:	2102      	movs	r1, #2
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff fb08 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000b3c:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <main+0x764>)
 8000b3e:	f7ff fbb1 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 0);
 8000b42:	2100      	movs	r1, #0
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fb01 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000b4a:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <main+0x768>)
 8000b4c:	f7ff fbaa 	bl	80002a4 <LCD_String>
			break;
 8000b50:	e030      	b.n	8000bb4 <main+0x748>

		case 2:
			LCD_Cursor(0, 2);
 8000b52:	2102      	movs	r1, #2
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff faf9 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000b5a:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <main+0x764>)
 8000b5c:	f7ff fba2 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 0);
 8000b60:	2100      	movs	r1, #0
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff faf2 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000b68:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <main+0x768>)
 8000b6a:	f7ff fb9b 	bl	80002a4 <LCD_String>
			aux_start = 1;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <main+0x76c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
			break;
 8000b74:	e01e      	b.n	8000bb4 <main+0x748>

		case 3:
			aux_pwmPreset = 1;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <main+0x770>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
			start_preset();
 8000b7c:	f000 f886 	bl	8000c8c <start_preset>
			break;
 8000b80:	e018      	b.n	8000bb4 <main+0x748>

		case 4:
			LCD_Cursor(0, 2);
 8000b82:	2102      	movs	r1, #2
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff fae1 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <main+0x764>)
 8000b8c:	f7ff fb8a 	bl	80002a4 <LCD_String>
			LCD_Cursor(1, 0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fada 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000b98:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <main+0x768>)
 8000b9a:	f7ff fb83 	bl	80002a4 <LCD_String>
			config_init = 1;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <main+0x774>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
			config_finish = 0;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <main+0x75c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
			break;
 8000baa:	e003      	b.n	8000bb4 <main+0x748>

		case 5:
			start_config();
 8000bac:	f000 f91e 	bl	8000dec <start_config>
			break;
 8000bb0:	bf00      	nop
 8000bb2:	e498      	b.n	80004e6 <main+0x7a>
		if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000bb4:	e497      	b.n	80004e6 <main+0x7a>
 8000bb6:	bf00      	nop
 8000bb8:	080044b0 	.word	0x080044b0
 8000bbc:	20000190 	.word	0x20000190
 8000bc0:	08004498 	.word	0x08004498
 8000bc4:	2000016c 	.word	0x2000016c
 8000bc8:	20000167 	.word	0x20000167
 8000bcc:	20000161 	.word	0x20000161
 8000bd0:	08004464 	.word	0x08004464
 8000bd4:	080044c4 	.word	0x080044c4
 8000bd8:	20000163 	.word	0x20000163
 8000bdc:	2000016e 	.word	0x2000016e
 8000be0:	2000016d 	.word	0x2000016d

08000be4 <Buzzer_Teclas>:

    /* USER CODE BEGIN 3 */
  }
}
	void Buzzer_Teclas()
	{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <Buzzer_Teclas+0x2c>)
 8000bf0:	f001 f893 	bl	8001d1a <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000bf4:	2032      	movs	r0, #50	; 0x32
 8000bf6:	f000 fdf5 	bl	80017e4 <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <Buzzer_Teclas+0x2c>)
 8000c02:	f001 f88a 	bl	8001d1a <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000c06:	2032      	movs	r0, #50	; 0x32
 8000c08:	f000 fdec 	bl	80017e4 <HAL_Delay>
	}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40010c00 	.word	0x40010c00

08000c14 <INC_Boucing>:

	void INC_Boucing()
	{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f000 fde3 	bl	80017e4 <HAL_Delay>
		while (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin));
 8000c1e:	bf00      	nop
 8000c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <INC_Boucing+0x24>)
 8000c26:	f001 f861 	bl	8001cec <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1f7      	bne.n	8000c20 <INC_Boucing+0xc>
	}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <DEC_Boucing>:
	void DEC_Boucing()
	{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000c40:	200a      	movs	r0, #10
 8000c42:	f000 fdcf 	bl	80017e4 <HAL_Delay>
		while (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin));
 8000c46:	bf00      	nop
 8000c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <DEC_Boucing+0x24>)
 8000c4e:	f001 f84d 	bl	8001cec <HAL_GPIO_ReadPin>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f7      	bne.n	8000c48 <DEC_Boucing+0xc>
	}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40010c00 	.word	0x40010c00

08000c64 <ENTER_Boucing>:
	void ENTER_Boucing()
	{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000c68:	200a      	movs	r0, #10
 8000c6a:	f000 fdbb 	bl	80017e4 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin));
 8000c6e:	bf00      	nop
 8000c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <ENTER_Boucing+0x24>)
 8000c76:	f001 f839 	bl	8001cec <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f7      	bne.n	8000c70 <ENTER_Boucing+0xc>
	}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40010c00 	.word	0x40010c00

08000c8c <start_preset>:

	void start_preset()
	{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	LCD_Clear();
 8000c90:	f7ff fbce 	bl	8000430 <LCD_Clear>
	LCD_Cursor(0, 0);
 8000c94:	2100      	movs	r1, #0
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fa58 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:    ACCEL");
 8000c9c:	4846      	ldr	r0, [pc, #280]	; (8000db8 <start_preset+0x12c>)
 8000c9e:	f7ff fb01 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 0);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fa51 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000caa:	4844      	ldr	r0, [pc, #272]	; (8000dbc <start_preset+0x130>)
 8000cac:	f7ff fafa 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 11);
 8000cb0:	210b      	movs	r1, #11
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fa4a 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000cb8:	4841      	ldr	r0, [pc, #260]	; (8000dc0 <start_preset+0x134>)
 8000cba:	f7ff faf3 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 13);
 8000cbe:	210d      	movs	r1, #13
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fa43 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_accel);
 8000cc6:	483f      	ldr	r0, [pc, #252]	; (8000dc4 <start_preset+0x138>)
 8000cc8:	f7ff faec 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 15);
 8000ccc:	210f      	movs	r1, #15
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff fa3c 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000cd4:	483c      	ldr	r0, [pc, #240]	; (8000dc8 <start_preset+0x13c>)
 8000cd6:	f7ff fae5 	bl	80002a4 <LCD_String>
	HAL_Delay(a_inc * 1000);
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <start_preset+0x140>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fd7b 	bl	80017e4 <HAL_Delay>
	LCD_Clear();
 8000cee:	f7ff fb9f 	bl	8000430 <LCD_Clear>

	LCD_Cursor(0, 0);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fa29 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:  RUNNING");
 8000cfa:	4835      	ldr	r0, [pc, #212]	; (8000dd0 <start_preset+0x144>)
 8000cfc:	f7ff fad2 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 0);
 8000d00:	2100      	movs	r1, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fa22 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000d08:	482c      	ldr	r0, [pc, #176]	; (8000dbc <start_preset+0x130>)
 8000d0a:	f7ff facb 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 10);
 8000d0e:	210a      	movs	r1, #10
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fa1b 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000d16:	482a      	ldr	r0, [pc, #168]	; (8000dc0 <start_preset+0x134>)
 8000d18:	f7ff fac4 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 12);
 8000d1c:	210c      	movs	r1, #12
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff fa14 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_running);
 8000d24:	482b      	ldr	r0, [pc, #172]	; (8000dd4 <start_preset+0x148>)
 8000d26:	f7ff fabd 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 15);
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fa0d 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000d32:	4825      	ldr	r0, [pc, #148]	; (8000dc8 <start_preset+0x13c>)
 8000d34:	f7ff fab6 	bl	80002a4 <LCD_String>
	HAL_Delay(r_inc * 1000);
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <start_preset+0x14c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fd4c 	bl	80017e4 <HAL_Delay>
	LCD_Clear();
 8000d4c:	f7ff fb70 	bl	8000430 <LCD_Clear>

	LCD_Cursor(0, 0);
 8000d50:	2100      	movs	r1, #0
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff f9fa 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:    DECEL");
 8000d58:	4820      	ldr	r0, [pc, #128]	; (8000ddc <start_preset+0x150>)
 8000d5a:	f7ff faa3 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 0);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff f9f3 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000d66:	4815      	ldr	r0, [pc, #84]	; (8000dbc <start_preset+0x130>)
 8000d68:	f7ff fa9c 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 11);
 8000d6c:	210b      	movs	r1, #11
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff f9ec 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <start_preset+0x134>)
 8000d76:	f7ff fa95 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 13);
 8000d7a:	210d      	movs	r1, #13
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff f9e5 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_decel);
 8000d82:	4817      	ldr	r0, [pc, #92]	; (8000de0 <start_preset+0x154>)
 8000d84:	f7ff fa8e 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 15);
 8000d88:	210f      	movs	r1, #15
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff f9de 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <start_preset+0x13c>)
 8000d92:	f7ff fa87 	bl	80002a4 <LCD_String>
	HAL_Delay(d_inc * 1000);
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <start_preset+0x158>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fd1d 	bl	80017e4 <HAL_Delay>
	LCD_Clear();
 8000daa:	f7ff fb41 	bl	8000430 <LCD_Clear>
	start = 1;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <start_preset+0x15c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
	}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	080044d8 	.word	0x080044d8
 8000dbc:	080044ec 	.word	0x080044ec
 8000dc0:	080044f8 	.word	0x080044f8
 8000dc4:	20000170 	.word	0x20000170
 8000dc8:	08004498 	.word	0x08004498
 8000dcc:	20000168 	.word	0x20000168
 8000dd0:	080044fc 	.word	0x080044fc
 8000dd4:	20000180 	.word	0x20000180
 8000dd8:	20000169 	.word	0x20000169
 8000ddc:	08004510 	.word	0x08004510
 8000de0:	20000190 	.word	0x20000190
 8000de4:	2000016a 	.word	0x2000016a
 8000de8:	20000161 	.word	0x20000161

08000dec <start_config>:

	void start_config()
	{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	LCD_Cursor(0, 0);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff f9aa 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:    ACCEL");
 8000df8:	4846      	ldr	r0, [pc, #280]	; (8000f14 <start_config+0x128>)
 8000dfa:	f7ff fa53 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 0);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff f9a3 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000e06:	4844      	ldr	r0, [pc, #272]	; (8000f18 <start_config+0x12c>)
 8000e08:	f7ff fa4c 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 11);
 8000e0c:	210b      	movs	r1, #11
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff f99c 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000e14:	4841      	ldr	r0, [pc, #260]	; (8000f1c <start_config+0x130>)
 8000e16:	f7ff fa45 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 13);
 8000e1a:	210d      	movs	r1, #13
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f7ff f995 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_accel);
 8000e22:	483f      	ldr	r0, [pc, #252]	; (8000f20 <start_config+0x134>)
 8000e24:	f7ff fa3e 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 15);
 8000e28:	210f      	movs	r1, #15
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f7ff f98e 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000e30:	483c      	ldr	r0, [pc, #240]	; (8000f24 <start_config+0x138>)
 8000e32:	f7ff fa37 	bl	80002a4 <LCD_String>
	HAL_Delay(a_inc * 1000);
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <start_config+0x13c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e40:	fb02 f303 	mul.w	r3, r2, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fccd 	bl	80017e4 <HAL_Delay>
	LCD_Clear();
 8000e4a:	f7ff faf1 	bl	8000430 <LCD_Clear>

	LCD_Cursor(0, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff f97b 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:  RUNNING");
 8000e56:	4835      	ldr	r0, [pc, #212]	; (8000f2c <start_config+0x140>)
 8000e58:	f7ff fa24 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 0);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff f974 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000e64:	482c      	ldr	r0, [pc, #176]	; (8000f18 <start_config+0x12c>)
 8000e66:	f7ff fa1d 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 10);
 8000e6a:	210a      	movs	r1, #10
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f7ff f96d 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000e72:	482a      	ldr	r0, [pc, #168]	; (8000f1c <start_config+0x130>)
 8000e74:	f7ff fa16 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 12);
 8000e78:	210c      	movs	r1, #12
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff f966 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_running);
 8000e80:	482b      	ldr	r0, [pc, #172]	; (8000f30 <start_config+0x144>)
 8000e82:	f7ff fa0f 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 15);
 8000e86:	210f      	movs	r1, #15
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f7ff f95f 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000e8e:	4825      	ldr	r0, [pc, #148]	; (8000f24 <start_config+0x138>)
 8000e90:	f7ff fa08 	bl	80002a4 <LCD_String>
	HAL_Delay(r_inc * 1000);
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <start_config+0x148>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fc9e 	bl	80017e4 <HAL_Delay>
	LCD_Clear();
 8000ea8:	f7ff fac2 	bl	8000430 <LCD_Clear>

	LCD_Cursor(0, 0);
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff f94c 	bl	800014c <LCD_Cursor>
	LCD_String("STATUS:    DECEL");
 8000eb4:	4820      	ldr	r0, [pc, #128]	; (8000f38 <start_config+0x14c>)
 8000eb6:	f7ff f9f5 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 0);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff f945 	bl	800014c <LCD_Cursor>
	LCD_String("RPM: 1000");
 8000ec2:	4815      	ldr	r0, [pc, #84]	; (8000f18 <start_config+0x12c>)
 8000ec4:	f7ff f9ee 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 11);
 8000ec8:	210b      	movs	r1, #11
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff f93e 	bl	800014c <LCD_Cursor>
	LCD_String("t:");
 8000ed0:	4812      	ldr	r0, [pc, #72]	; (8000f1c <start_config+0x130>)
 8000ed2:	f7ff f9e7 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 13);
 8000ed6:	210d      	movs	r1, #13
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff f937 	bl	800014c <LCD_Cursor>
	LCD_String(buffer_decel);
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <start_config+0x150>)
 8000ee0:	f7ff f9e0 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 15);
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff f930 	bl	800014c <LCD_Cursor>
	LCD_String("s");
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <start_config+0x138>)
 8000eee:	f7ff f9d9 	bl	80002a4 <LCD_String>
	HAL_Delay(d_inc * 1000);
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <start_config+0x154>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fc6f 	bl	80017e4 <HAL_Delay>
	LCD_Clear();
 8000f06:	f7ff fa93 	bl	8000430 <LCD_Clear>
	start = 4;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <start_config+0x158>)
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	701a      	strb	r2, [r3, #0]
	}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	080044d8 	.word	0x080044d8
 8000f18:	080044ec 	.word	0x080044ec
 8000f1c:	080044f8 	.word	0x080044f8
 8000f20:	20000170 	.word	0x20000170
 8000f24:	08004498 	.word	0x08004498
 8000f28:	20000168 	.word	0x20000168
 8000f2c:	080044fc 	.word	0x080044fc
 8000f30:	20000180 	.word	0x20000180
 8000f34:	20000169 	.word	0x20000169
 8000f38:	08004510 	.word	0x08004510
 8000f3c:	20000190 	.word	0x20000190
 8000f40:	2000016a 	.word	0x2000016a
 8000f44:	20000161 	.word	0x20000161

08000f48 <sys_init>:

	void sys_init()
	{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	LCD_Init();
 8000f4c:	f7ff fa77 	bl	800043e <LCD_Init>
	LCD_Cursor(0, 2);
 8000f50:	2102      	movs	r1, #2
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff f8fa 	bl	800014c <LCD_Cursor>
	LCD_String("DC MOTOR SYS");
 8000f58:	480a      	ldr	r0, [pc, #40]	; (8000f84 <sys_init+0x3c>)
 8000f5a:	f7ff f9a3 	bl	80002a4 <LCD_String>
	LCD_Cursor(1, 2);
 8000f5e:	2102      	movs	r1, #2
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff f8f3 	bl	800014c <LCD_Cursor>
	LCD_String("VERSION: 1.0");
 8000f66:	4808      	ldr	r0, [pc, #32]	; (8000f88 <sys_init+0x40>)
 8000f68:	f7ff f99c 	bl	80002a4 <LCD_String>
	HAL_Delay(3000);
 8000f6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f70:	f000 fc38 	bl	80017e4 <HAL_Delay>
	LCD_Clear();
 8000f74:	f7ff fa5c 	bl	8000430 <LCD_Clear>
	start = 1;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <sys_init+0x44>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
	}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	08004464 	.word	0x08004464
 8000f88:	08004524 	.word	0x08004524
 8000f8c:	20000161 	.word	0x20000161

08000f90 <set_converter>:

	void set_converter()
	{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	a_inc = a_inc;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <set_converter+0x4c>)
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <set_converter+0x4c>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_accel, "%d", a_inc);
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <set_converter+0x4c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	490f      	ldr	r1, [pc, #60]	; (8000fe0 <set_converter+0x50>)
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <set_converter+0x54>)
 8000fa6:	f002 fd9d 	bl	8003ae4 <siprintf>
	r_inc = r_inc;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <set_converter+0x58>)
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <set_converter+0x58>)
 8000fb0:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_running, "%d", r_inc);
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <set_converter+0x58>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4909      	ldr	r1, [pc, #36]	; (8000fe0 <set_converter+0x50>)
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <set_converter+0x5c>)
 8000fbc:	f002 fd92 	bl	8003ae4 <siprintf>
	d_inc = d_inc;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <set_converter+0x60>)
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <set_converter+0x60>)
 8000fc6:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_decel, "%d", d_inc);
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <set_converter+0x60>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4904      	ldr	r1, [pc, #16]	; (8000fe0 <set_converter+0x50>)
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <set_converter+0x64>)
 8000fd2:	f002 fd87 	bl	8003ae4 <siprintf>
	}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000168 	.word	0x20000168
 8000fe0:	08004460 	.word	0x08004460
 8000fe4:	20000170 	.word	0x20000170
 8000fe8:	20000169 	.word	0x20000169
 8000fec:	20000180 	.word	0x20000180
 8000ff0:	2000016a 	.word	0x2000016a
 8000ff4:	20000190 	.word	0x20000190

08000ff8 <converter_preset>:

	void converter_preset()
	{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	a_inc = 10;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <converter_preset+0x44>)
 8000ffe:	220a      	movs	r2, #10
 8001000:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_accel, "%d", a_inc);
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <converter_preset+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	490d      	ldr	r1, [pc, #52]	; (8001040 <converter_preset+0x48>)
 800100a:	480e      	ldr	r0, [pc, #56]	; (8001044 <converter_preset+0x4c>)
 800100c:	f002 fd6a 	bl	8003ae4 <siprintf>
	r_inc = 120;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <converter_preset+0x50>)
 8001012:	2278      	movs	r2, #120	; 0x78
 8001014:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_running, "%d", r_inc);
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <converter_preset+0x50>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4908      	ldr	r1, [pc, #32]	; (8001040 <converter_preset+0x48>)
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <converter_preset+0x54>)
 8001020:	f002 fd60 	bl	8003ae4 <siprintf>
	d_inc = 10;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <converter_preset+0x58>)
 8001026:	220a      	movs	r2, #10
 8001028:	701a      	strb	r2, [r3, #0]
	sprintf(buffer_decel, "%d", d_inc);
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <converter_preset+0x58>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	4903      	ldr	r1, [pc, #12]	; (8001040 <converter_preset+0x48>)
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <converter_preset+0x5c>)
 8001034:	f002 fd56 	bl	8003ae4 <siprintf>
	}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000168 	.word	0x20000168
 8001040:	08004460 	.word	0x08004460
 8001044:	20000170 	.word	0x20000170
 8001048:	20000169 	.word	0x20000169
 800104c:	20000180 	.word	0x20000180
 8001050:	2000016a 	.word	0x2000016a
 8001054:	20000190 	.word	0x20000190

08001058 <find_I2C_device>:

	uint8_t find_I2C_device(uint8_t start_address, uint8_t end_address)
	{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
	  for (uint8_t address = start_address; address <= end_address; address++)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e010      	b.n	8001090 <find_I2C_device+0x38>
	  {
	    if (HAL_I2C_IsDeviceReady(&hi2c1, address << 1, 2, 5) == HAL_OK) {
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	b29b      	uxth	r3, r3
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b299      	uxth	r1, r3
 8001076:	2305      	movs	r3, #5
 8001078:	2202      	movs	r2, #2
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <find_I2C_device+0x4c>)
 800107c:	f001 f8a4 	bl	80021c8 <HAL_I2C_IsDeviceReady>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <find_I2C_device+0x32>
	      return address;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	e007      	b.n	800109a <find_I2C_device+0x42>
	  for (uint8_t address = start_address; address <= end_address; address++)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3301      	adds	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	429a      	cmp	r2, r3
 8001096:	d9ea      	bls.n	800106e <find_I2C_device+0x16>
	    }
	  }
	  return 0;
 8001098:	2300      	movs	r3, #0
	}//
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000007c 	.word	0x2000007c

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	; 0x40
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2228      	movs	r2, #40	; 0x28
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fd34 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fc05 	bl	8002900 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010fc:	f000 f97c 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2102      	movs	r1, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fe72 	bl	8002e04 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001126:	f000 f967 	bl	80013f8 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3740      	adds	r7, #64	; 0x40
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_I2C1_Init+0x50>)
 800113a:	4a13      	ldr	r2, [pc, #76]	; (8001188 <MX_I2C1_Init+0x54>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_I2C1_Init+0x50>)
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_I2C1_Init+0x58>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_I2C1_Init+0x50>)
 8001152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001156:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_I2C1_Init+0x50>)
 8001172:	f000 fdeb 	bl	8001d4c <HAL_I2C_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 f93c 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000007c 	.word	0x2000007c
 8001188:	40005400 	.word	0x40005400
 800118c:	000186a0 	.word	0x000186a0

08001190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_TIM2_Init+0x94>)
 80011ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_TIM2_Init+0x94>)
 80011b6:	2247      	movs	r2, #71	; 0x47
 80011b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_TIM2_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_TIM2_Init+0x94>)
 80011c2:	2263      	movs	r2, #99	; 0x63
 80011c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_TIM2_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM2_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_TIM2_Init+0x94>)
 80011d4:	f001 ff90 	bl	80030f8 <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80011de:	f000 f90b 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM2_Init+0x94>)
 80011f0:	f002 f8e2 	bl	80033b8 <HAL_TIM_ConfigClockSource>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80011fa:	f000 f8fd 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM2_Init+0x94>)
 800120c:	f002 fc12 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001216:	f000 f8ef 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200000d0 	.word	0x200000d0

08001228 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
 8001246:	615a      	str	r2, [r3, #20]
 8001248:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_TIM3_Init+0xa8>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <MX_TIM3_Init+0xac>)
 800124e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_TIM3_Init+0xa8>)
 8001252:	2247      	movs	r2, #71	; 0x47
 8001254:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM3_Init+0xa8>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM3_Init+0xa8>)
 800125e:	2263      	movs	r2, #99	; 0x63
 8001260:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM3_Init+0xa8>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM3_Init+0xa8>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800126e:	4818      	ldr	r0, [pc, #96]	; (80012d0 <MX_TIM3_Init+0xa8>)
 8001270:	f001 ff91 	bl	8003196 <HAL_TIM_PWM_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800127a:	f000 f8bd 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4619      	mov	r1, r3
 800128c:	4810      	ldr	r0, [pc, #64]	; (80012d0 <MX_TIM3_Init+0xa8>)
 800128e:	f002 fbd1 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001298:	f000 f8ae 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129c:	2360      	movs	r3, #96	; 0x60
 800129e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2204      	movs	r2, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM3_Init+0xa8>)
 80012b4:	f001 ffbe 	bl	8003234 <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012be:	f000 f89b 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM3_Init+0xa8>)
 80012c4:	f000 f95c 	bl	8001580 <HAL_TIM_MspPostInit>

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000118 	.word	0x20000118
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <MX_GPIO_Init+0x110>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a3d      	ldr	r2, [pc, #244]	; (80013e8 <MX_GPIO_Init+0x110>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <MX_GPIO_Init+0x110>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <MX_GPIO_Init+0x110>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a37      	ldr	r2, [pc, #220]	; (80013e8 <MX_GPIO_Init+0x110>)
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <MX_GPIO_Init+0x110>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <MX_GPIO_Init+0x110>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <MX_GPIO_Init+0x110>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <MX_GPIO_Init+0x110>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <MX_GPIO_Init+0x110>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <MX_GPIO_Init+0x110>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MX_GPIO_Init+0x110>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001352:	4826      	ldr	r0, [pc, #152]	; (80013ec <MX_GPIO_Init+0x114>)
 8001354:	f000 fce1 	bl	8001d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|RS_Pin|D4_Pin|D5_Pin
 8001358:	2200      	movs	r2, #0
 800135a:	21f9      	movs	r1, #249	; 0xf9
 800135c:	4824      	ldr	r0, [pc, #144]	; (80013f0 <MX_GPIO_Init+0x118>)
 800135e:	f000 fcdc 	bl	8001d1a <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001368:	4822      	ldr	r0, [pc, #136]	; (80013f4 <MX_GPIO_Init+0x11c>)
 800136a:	f000 fcd6 	bl	8001d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2302      	movs	r3, #2
 800137e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	4819      	ldr	r0, [pc, #100]	; (80013ec <MX_GPIO_Init+0x114>)
 8001388:	f000 fb34 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin RS_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin|D4_Pin|D5_Pin
 800138c:	23f9      	movs	r3, #249	; 0xf9
 800138e:	613b      	str	r3, [r7, #16]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <MX_GPIO_Init+0x118>)
 80013a4:	f000 fb26 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80013a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <MX_GPIO_Init+0x11c>)
 80013c2:	f000 fb17 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin ENTER_Pin DEC_Pin */
  GPIO_InitStruct.Pin = INC_Pin|ENTER_Pin|DEC_Pin;
 80013c6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_GPIO_Init+0x11c>)
 80013dc:	f000 fb0a 	bl	80019f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_MspInit+0x5c>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_MspInit+0x5c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_MspInit+0x5c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_MspInit+0x5c>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_MspInit+0x5c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_MspInit+0x5c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_MspInit+0x60>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_MspInit+0x60>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000

08001468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <HAL_I2C_MspInit+0x94>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d134      	bne.n	80014f2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_I2C_MspInit+0x98>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_I2C_MspInit+0x98>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_I2C_MspInit+0x98>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a6:	2312      	movs	r3, #18
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <HAL_I2C_MspInit+0x9c>)
 80014ba:	f000 fa9b 	bl	80019f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_I2C_MspInit+0xa0>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_I2C_MspInit+0xa0>)
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_I2C_MspInit+0x98>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_I2C_MspInit+0x98>)
 80014e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_I2C_MspInit+0x98>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40005400 	.word	0x40005400
 8001500:	40021000 	.word	0x40021000
 8001504:	40010c00 	.word	0x40010c00
 8001508:	40010000 	.word	0x40010000

0800150c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800151c:	d10b      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_TIM_Base_MspInit+0x34>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_TIM_Base_MspInit+0x34>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_TIM_Base_MspInit+0x34>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_TIM_PWM_MspInit+0x34>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10b      	bne.n	800156e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_TIM_PWM_MspInit+0x38>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_TIM_PWM_MspInit+0x38>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_TIM_PWM_MspInit+0x38>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40000400 	.word	0x40000400
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a18      	ldr	r2, [pc, #96]	; (80015fc <HAL_TIM_MspPostInit+0x7c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d129      	bne.n	80015f4 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_TIM_MspPostInit+0x80>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a16      	ldr	r2, [pc, #88]	; (8001600 <HAL_TIM_MspPostInit+0x80>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_TIM_MspPostInit+0x80>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_Pin;
 80015b8:	2320      	movs	r3, #32
 80015ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4619      	mov	r1, r3
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <HAL_TIM_MspPostInit+0x84>)
 80015cc:	f000 fa12 	bl	80019f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_TIM_MspPostInit+0x88>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_TIM_MspPostInit+0x88>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40000400 	.word	0x40000400
 8001600:	40021000 	.word	0x40021000
 8001604:	40010c00 	.word	0x40010c00
 8001608:	40010000 	.word	0x40010000

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001610:	e7fe      	b.n	8001610 <NMI_Handler+0x4>

08001612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <MemManage_Handler+0x4>

0800161e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <UsageFault_Handler+0x4>

0800162a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001652:	f000 f8ab 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f002 fa52 	bl	8003b34 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20002800 	.word	0x20002800
 80016bc:	00000400 	.word	0x00000400
 80016c0:	200001a0 	.word	0x200001a0
 80016c4:	200002f0 	.word	0x200002f0

080016c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d4:	f7ff fff8 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016da:	490c      	ldr	r1, [pc, #48]	; (800170c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016dc:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016f0:	4c09      	ldr	r4, [pc, #36]	; (8001718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f002 fa1f 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001702:	f7fe feb3 	bl	800046c <main>
  bx lr
 8001706:	4770      	bx	lr
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001710:	0800459c 	.word	0x0800459c
  ldr r2, =_sbss
 8001714:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001718:	200002f0 	.word	0x200002f0

0800171c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_Init+0x28>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_Init+0x28>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f000 f92b 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001736:	200f      	movs	r0, #15
 8001738:	f000 f808 	bl	800174c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800173c:	f7ff fe62 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40022000 	.word	0x40022000

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_InitTick+0x54>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x58>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f935 	bl	80019da <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f000 f90b 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_InitTick+0x5c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000004 	.word	0x20000004
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	20000008 	.word	0x20000008

080017ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_IncTick+0x1c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_IncTick+0x20>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a03      	ldr	r2, [pc, #12]	; (80017cc <HAL_IncTick+0x20>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	200001a4 	.word	0x200001a4

080017d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <HAL_GetTick+0x10>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	200001a4 	.word	0x200001a4

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff fff0 	bl	80017d0 <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffe0 	bl	80017d0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000000c 	.word	0x2000000c

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff90 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff49 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff5e 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff90 	bl	80018e4 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5f 	bl	8001890 <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ffb0 	bl	8001948 <SysTick_Config>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b08b      	sub	sp, #44	; 0x2c
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	e161      	b.n	8001ccc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8150 	bne.w	8001cc6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4a97      	ldr	r2, [pc, #604]	; (8001c88 <HAL_GPIO_Init+0x294>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d05e      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a30:	4a95      	ldr	r2, [pc, #596]	; (8001c88 <HAL_GPIO_Init+0x294>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d875      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a36:	4a95      	ldr	r2, [pc, #596]	; (8001c8c <HAL_GPIO_Init+0x298>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d058      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a3c:	4a93      	ldr	r2, [pc, #588]	; (8001c8c <HAL_GPIO_Init+0x298>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d86f      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a42:	4a93      	ldr	r2, [pc, #588]	; (8001c90 <HAL_GPIO_Init+0x29c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d052      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a48:	4a91      	ldr	r2, [pc, #580]	; (8001c90 <HAL_GPIO_Init+0x29c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d869      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a4e:	4a91      	ldr	r2, [pc, #580]	; (8001c94 <HAL_GPIO_Init+0x2a0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d04c      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a54:	4a8f      	ldr	r2, [pc, #572]	; (8001c94 <HAL_GPIO_Init+0x2a0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d863      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a5a:	4a8f      	ldr	r2, [pc, #572]	; (8001c98 <HAL_GPIO_Init+0x2a4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d046      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a60:	4a8d      	ldr	r2, [pc, #564]	; (8001c98 <HAL_GPIO_Init+0x2a4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d85d      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d82a      	bhi.n	8001ac0 <HAL_GPIO_Init+0xcc>
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d859      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <HAL_GPIO_Init+0x80>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001ac9 	.word	0x08001ac9
 8001a7c:	08001adb 	.word	0x08001adb
 8001a80:	08001b1d 	.word	0x08001b1d
 8001a84:	08001b23 	.word	0x08001b23
 8001a88:	08001b23 	.word	0x08001b23
 8001a8c:	08001b23 	.word	0x08001b23
 8001a90:	08001b23 	.word	0x08001b23
 8001a94:	08001b23 	.word	0x08001b23
 8001a98:	08001b23 	.word	0x08001b23
 8001a9c:	08001b23 	.word	0x08001b23
 8001aa0:	08001b23 	.word	0x08001b23
 8001aa4:	08001b23 	.word	0x08001b23
 8001aa8:	08001b23 	.word	0x08001b23
 8001aac:	08001b23 	.word	0x08001b23
 8001ab0:	08001b23 	.word	0x08001b23
 8001ab4:	08001b23 	.word	0x08001b23
 8001ab8:	08001ad1 	.word	0x08001ad1
 8001abc:	08001ae5 	.word	0x08001ae5
 8001ac0:	4a76      	ldr	r2, [pc, #472]	; (8001c9c <HAL_GPIO_Init+0x2a8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ac6:	e02c      	b.n	8001b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e029      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	e024      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	3308      	adds	r3, #8
 8001ae0:	623b      	str	r3, [r7, #32]
          break;
 8001ae2:	e01f      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	330c      	adds	r3, #12
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e01a      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af6:	2304      	movs	r3, #4
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e013      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b04:	2308      	movs	r3, #8
 8001b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	611a      	str	r2, [r3, #16]
          break;
 8001b0e:	e009      	b.n	8001b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b10:	2308      	movs	r3, #8
 8001b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	615a      	str	r2, [r3, #20]
          break;
 8001b1a:	e003      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          break;
 8001b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2bff      	cmp	r3, #255	; 0xff
 8001b28:	d801      	bhi.n	8001b2e <HAL_GPIO_Init+0x13a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	e001      	b.n	8001b32 <HAL_GPIO_Init+0x13e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3304      	adds	r3, #4
 8001b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2bff      	cmp	r3, #255	; 0xff
 8001b38:	d802      	bhi.n	8001b40 <HAL_GPIO_Init+0x14c>
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x152>
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	3b08      	subs	r3, #8
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	210f      	movs	r1, #15
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	6a39      	ldr	r1, [r7, #32]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80a9 	beq.w	8001cc6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_GPIO_Init+0x2ac>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <HAL_GPIO_Init+0x2ac>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_GPIO_Init+0x2ac>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b8c:	4a45      	ldr	r2, [pc, #276]	; (8001ca4 <HAL_GPIO_Init+0x2b0>)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a3d      	ldr	r2, [pc, #244]	; (8001ca8 <HAL_GPIO_Init+0x2b4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_GPIO_Init+0x1e0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3c      	ldr	r2, [pc, #240]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d007      	beq.n	8001bd0 <HAL_GPIO_Init+0x1dc>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3b      	ldr	r2, [pc, #236]	; (8001cb0 <HAL_GPIO_Init+0x2bc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d101      	bne.n	8001bcc <HAL_GPIO_Init+0x1d8>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e004      	b.n	8001bd6 <HAL_GPIO_Init+0x1e2>
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e002      	b.n	8001bd6 <HAL_GPIO_Init+0x1e2>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_GPIO_Init+0x1e2>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	f002 0203 	and.w	r2, r2, #3
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	4093      	lsls	r3, r2
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001be6:	492f      	ldr	r1, [pc, #188]	; (8001ca4 <HAL_GPIO_Init+0x2b0>)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c00:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	492b      	ldr	r1, [pc, #172]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4927      	ldr	r1, [pc, #156]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	4921      	ldr	r1, [pc, #132]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	491d      	ldr	r1, [pc, #116]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4917      	ldr	r1, [pc, #92]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4913      	ldr	r1, [pc, #76]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01f      	beq.n	8001cb8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e01f      	b.n	8001cc6 <HAL_GPIO_Init+0x2d2>
 8001c86:	bf00      	nop
 8001c88:	10320000 	.word	0x10320000
 8001c8c:	10310000 	.word	0x10310000
 8001c90:	10220000 	.word	0x10220000
 8001c94:	10210000 	.word	0x10210000
 8001c98:	10120000 	.word	0x10120000
 8001c9c:	10110000 	.word	0x10110000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	40010c00 	.word	0x40010c00
 8001cb0:	40011000 	.word	0x40011000
 8001cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_GPIO_Init+0x2f4>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	4909      	ldr	r1, [pc, #36]	; (8001ce8 <HAL_GPIO_Init+0x2f4>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	3301      	adds	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f47f ae96 	bne.w	8001a08 <HAL_GPIO_Init+0x14>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	372c      	adds	r7, #44	; 0x2c
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	40010400 	.word	0x40010400

08001cec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e001      	b.n	8001d0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	807b      	strh	r3, [r7, #2]
 8001d26:	4613      	mov	r3, r2
 8001d28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2a:	787b      	ldrb	r3, [r7, #1]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d30:	887a      	ldrh	r2, [r7, #2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d36:	e003      	b.n	8001d40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	041a      	lsls	r2, r3, #16
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	611a      	str	r2, [r3, #16]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e12b      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fb78 	bl	8001468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db0:	f001 f970 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8001db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a81      	ldr	r2, [pc, #516]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d807      	bhi.n	8001dd0 <HAL_I2C_Init+0x84>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a80      	ldr	r2, [pc, #512]	; (8001fc4 <HAL_I2C_Init+0x278>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf94      	ite	ls
 8001dc8:	2301      	movls	r3, #1
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e006      	b.n	8001dde <HAL_I2C_Init+0x92>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a7d      	ldr	r2, [pc, #500]	; (8001fc8 <HAL_I2C_Init+0x27c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf94      	ite	ls
 8001dd8:	2301      	movls	r3, #1
 8001dda:	2300      	movhi	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0e7      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a78      	ldr	r2, [pc, #480]	; (8001fcc <HAL_I2C_Init+0x280>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d802      	bhi.n	8001e20 <HAL_I2C_Init+0xd4>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	e009      	b.n	8001e34 <HAL_I2C_Init+0xe8>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a69      	ldr	r2, [pc, #420]	; (8001fd0 <HAL_I2C_Init+0x284>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	495c      	ldr	r1, [pc, #368]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001e50:	428b      	cmp	r3, r1
 8001e52:	d819      	bhi.n	8001e88 <HAL_I2C_Init+0x13c>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e59      	subs	r1, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e62:	1c59      	adds	r1, r3, #1
 8001e64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e68:	400b      	ands	r3, r1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_I2C_Init+0x138>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e59      	subs	r1, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	e051      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e04f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <HAL_I2C_Init+0x168>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e012      	b.n	8001eda <HAL_I2C_Init+0x18e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	0099      	lsls	r1, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x196>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e022      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <HAL_I2C_Init+0x1bc>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e58      	subs	r0, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	440b      	add	r3, r1
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f06:	e00f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	0099      	lsls	r1, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6911      	ldr	r1, [r2, #16]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	000186a0 	.word	0x000186a0
 8001fc4:	001e847f 	.word	0x001e847f
 8001fc8:	003d08ff 	.word	0x003d08ff
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fee:	f7ff fbef 	bl	80017d0 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	f040 80d9 	bne.w	80021b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2319      	movs	r3, #25
 8002008:	2201      	movs	r2, #1
 800200a:	496d      	ldr	r1, [pc, #436]	; (80021c0 <HAL_I2C_Mem_Write+0x1ec>)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fa9f 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
 800201a:	e0cc      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_I2C_Mem_Write+0x56>
 8002026:	2302      	movs	r3, #2
 8002028:	e0c5      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2221      	movs	r2, #33	; 0x21
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	; 0x40
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_I2C_Mem_Write+0x1f0>)
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002092:	88f8      	ldrh	r0, [r7, #6]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f9be 	bl	8002424 <I2C_RequestMemoryWrite>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d052      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e081      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fb64 	bl	8002784 <I2C_WaitOnTXEFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d107      	bne.n	80020da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06b      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11b      	bne.n	8002154 <HAL_I2C_Mem_Write+0x180>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1aa      	bne.n	80020b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fb57 	bl	8002814 <I2C_WaitOnBTFFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2b04      	cmp	r3, #4
 8002172:	d107      	bne.n	8002184 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e016      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	00100002 	.word	0x00100002
 80021c4:	ffff0000 	.word	0xffff0000

080021c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	460b      	mov	r3, r1
 80021d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff fafa 	bl	80017d0 <HAL_GetTick>
 80021dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	f040 8111 	bne.w	8002412 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2319      	movs	r3, #25
 80021f6:	2201      	movs	r2, #1
 80021f8:	4988      	ldr	r1, [pc, #544]	; (800241c <HAL_I2C_IsDeviceReady+0x254>)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f9a8 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
 8002208:	e104      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2C_IsDeviceReady+0x50>
 8002214:	2302      	movs	r3, #2
 8002216:	e0fd      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x24c>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d007      	beq.n	800223e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2224      	movs	r2, #36	; 0x24
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a70      	ldr	r2, [pc, #448]	; (8002420 <HAL_I2C_IsDeviceReady+0x258>)
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002270:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f966 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002298:	d103      	bne.n	80022a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0b6      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022a6:	897b      	ldrh	r3, [r7, #10]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022b6:	f7ff fa8b 	bl	80017d0 <HAL_GetTick>
 80022ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	bf0c      	ite	eq
 80022ca:	2301      	moveq	r3, #1
 80022cc:	2300      	movne	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022ea:	e025      	b.n	8002338 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022ec:	f7ff fa70 	bl	80017d0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d302      	bcc.n	8002302 <HAL_I2C_IsDeviceReady+0x13a>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	22a0      	movs	r2, #160	; 0xa0
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b02      	cmp	r3, #2
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2ba0      	cmp	r3, #160	; 0xa0
 8002342:	d005      	beq.n	8002350 <HAL_I2C_IsDeviceReady+0x188>
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_I2C_IsDeviceReady+0x188>
 800234a:	7dbb      	ldrb	r3, [r7, #22]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0cd      	beq.n	80022ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d129      	bne.n	80023ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002374:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2319      	movs	r3, #25
 8002392:	2201      	movs	r2, #1
 8002394:	4921      	ldr	r1, [pc, #132]	; (800241c <HAL_I2C_IsDeviceReady+0x254>)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f8da 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e036      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e02c      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2319      	movs	r3, #25
 80023da:	2201      	movs	r2, #1
 80023dc:	490f      	ldr	r1, [pc, #60]	; (800241c <HAL_I2C_IsDeviceReady+0x254>)
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f8b6 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e012      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3301      	adds	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f4ff af32 	bcc.w	8002262 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
  }
}
 8002414:	4618      	mov	r0, r3
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	00100002 	.word	0x00100002
 8002420:	ffff0000 	.word	0xffff0000

08002424 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	817b      	strh	r3, [r7, #10]
 8002436:	460b      	mov	r3, r1
 8002438:	813b      	strh	r3, [r7, #8]
 800243a:	4613      	mov	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	2200      	movs	r2, #0
 8002456:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f878 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002474:	d103      	bne.n	800247e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e05f      	b.n	8002542 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002490:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	492d      	ldr	r1, [pc, #180]	; (800254c <I2C_RequestMemoryWrite+0x128>)
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f8d3 	bl	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e04c      	b.n	8002542 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	6a39      	ldr	r1, [r7, #32]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f95e 	bl	8002784 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00d      	beq.n	80024ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d107      	bne.n	80024e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e02b      	b.n	8002542 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d105      	bne.n	80024fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024f0:	893b      	ldrh	r3, [r7, #8]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	e021      	b.n	8002540 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024fc:	893b      	ldrh	r3, [r7, #8]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	b29b      	uxth	r3, r3
 8002502:	b2da      	uxtb	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f938 	bl	8002784 <I2C_WaitOnTXEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b04      	cmp	r3, #4
 8002520:	d107      	bne.n	8002532 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e005      	b.n	8002542 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002536:	893b      	ldrh	r3, [r7, #8]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	00010002 	.word	0x00010002

08002550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002560:	e048      	b.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d044      	beq.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256a:	f7ff f931 	bl	80017d0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d302      	bcc.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d139      	bne.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	0c1b      	lsrs	r3, r3, #16
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d10d      	bne.n	80025a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	43da      	mvns	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4013      	ands	r3, r2
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	e00c      	b.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d116      	bne.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e023      	b.n	800263c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d10d      	bne.n	800261a <I2C_WaitOnFlagUntilTimeout+0xca>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	43da      	mvns	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4013      	ands	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	e00c      	b.n	8002634 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	43da      	mvns	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4013      	ands	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	429a      	cmp	r2, r3
 8002638:	d093      	beq.n	8002562 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002652:	e071      	b.n	8002738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002662:	d123      	bne.n	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002672:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800267c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f043 0204 	orr.w	r2, r3, #4
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e067      	b.n	800277c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b2:	d041      	beq.n	8002738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b4:	f7ff f88c 	bl	80017d0 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d302      	bcc.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d136      	bne.n	8002738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10c      	bne.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e00b      	b.n	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4013      	ands	r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e021      	b.n	800277c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	0c1b      	lsrs	r3, r3, #16
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10c      	bne.n	800275c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	43da      	mvns	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e00b      	b.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4013      	ands	r3, r2
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	f47f af6d 	bne.w	8002654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002790:	e034      	b.n	80027fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f886 	bl	80028a4 <I2C_IsAcknowledgeFailed>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e034      	b.n	800280c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d028      	beq.n	80027fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	f7ff f811 	bl	80017d0 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11d      	bne.n	80027fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ca:	2b80      	cmp	r3, #128	; 0x80
 80027cc:	d016      	beq.n	80027fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e007      	b.n	800280c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b80      	cmp	r3, #128	; 0x80
 8002808:	d1c3      	bne.n	8002792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002820:	e034      	b.n	800288c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f83e 	bl	80028a4 <I2C_IsAcknowledgeFailed>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e034      	b.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d028      	beq.n	800288c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283a:	f7fe ffc9 	bl	80017d0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d11d      	bne.n	800288c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b04      	cmp	r3, #4
 800285c:	d016      	beq.n	800288c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e007      	b.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d1c3      	bne.n	8002822 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ba:	d11b      	bne.n	80028f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f043 0204 	orr.w	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e272      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8087 	beq.w	8002a2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002920:	4b92      	ldr	r3, [pc, #584]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b04      	cmp	r3, #4
 800292a:	d00c      	beq.n	8002946 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800292c:	4b8f      	ldr	r3, [pc, #572]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d112      	bne.n	800295e <HAL_RCC_OscConfig+0x5e>
 8002938:	4b8c      	ldr	r3, [pc, #560]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002944:	d10b      	bne.n	800295e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002946:	4b89      	ldr	r3, [pc, #548]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d06c      	beq.n	8002a2c <HAL_RCC_OscConfig+0x12c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d168      	bne.n	8002a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e24c      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x76>
 8002968:	4b80      	ldr	r3, [pc, #512]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a7f      	ldr	r2, [pc, #508]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 800296e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	e02e      	b.n	80029d4 <HAL_RCC_OscConfig+0xd4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x98>
 800297e:	4b7b      	ldr	r3, [pc, #492]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a7a      	ldr	r2, [pc, #488]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	4b78      	ldr	r3, [pc, #480]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a77      	ldr	r2, [pc, #476]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e01d      	b.n	80029d4 <HAL_RCC_OscConfig+0xd4>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0xbc>
 80029a2:	4b72      	ldr	r3, [pc, #456]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a71      	ldr	r2, [pc, #452]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b6f      	ldr	r3, [pc, #444]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6e      	ldr	r2, [pc, #440]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0xd4>
 80029bc:	4b6b      	ldr	r3, [pc, #428]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a6a      	ldr	r2, [pc, #424]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b68      	ldr	r3, [pc, #416]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a67      	ldr	r2, [pc, #412]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe fef8 	bl	80017d0 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe fef4 	bl	80017d0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e200      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0xe4>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe fee4 	bl	80017d0 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fee0 	bl	80017d0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1ec      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x10c>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d063      	beq.n	8002b02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3a:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a46:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d11c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x18c>
 8002a52:	4b46      	ldr	r3, [pc, #280]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	4b43      	ldr	r3, [pc, #268]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_RCC_OscConfig+0x176>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1c0      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4939      	ldr	r1, [pc, #228]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	e03a      	b.n	8002b02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a94:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fe99 	bl	80017d0 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fe95 	bl	80017d0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1a1      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4927      	ldr	r1, [pc, #156]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e015      	b.n	8002b02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe fe78 	bl	80017d0 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7fe fe74 	bl	80017d0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e180      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d03a      	beq.n	8002b84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d019      	beq.n	8002b4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fe58 	bl	80017d0 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fe fe54 	bl	80017d0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e160      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_RCC_OscConfig+0x26c>)
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b42:	2001      	movs	r0, #1
 8002b44:	f000 faba 	bl	80030bc <RCC_Delay>
 8002b48:	e01c      	b.n	8002b84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7fe fe3e 	bl	80017d0 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b56:	e00f      	b.n	8002b78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fe fe3a 	bl	80017d0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d908      	bls.n	8002b78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e146      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	42420000 	.word	0x42420000
 8002b74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	4b92      	ldr	r3, [pc, #584]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e9      	bne.n	8002b58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80a6 	beq.w	8002cde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b92:	2300      	movs	r3, #0
 8002b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b96:	4b8b      	ldr	r3, [pc, #556]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10d      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4a87      	ldr	r2, [pc, #540]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	61d3      	str	r3, [r2, #28]
 8002bae:	4b85      	ldr	r3, [pc, #532]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	4b82      	ldr	r3, [pc, #520]	; (8002dc8 <HAL_RCC_OscConfig+0x4c8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d118      	bne.n	8002bfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bca:	4b7f      	ldr	r3, [pc, #508]	; (8002dc8 <HAL_RCC_OscConfig+0x4c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7e      	ldr	r2, [pc, #504]	; (8002dc8 <HAL_RCC_OscConfig+0x4c8>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fdfb 	bl	80017d0 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7fe fdf7 	bl	80017d0 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b64      	cmp	r3, #100	; 0x64
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e103      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <HAL_RCC_OscConfig+0x4c8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x312>
 8002c04:	4b6f      	ldr	r3, [pc, #444]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a6e      	ldr	r2, [pc, #440]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6213      	str	r3, [r2, #32]
 8002c10:	e02d      	b.n	8002c6e <HAL_RCC_OscConfig+0x36e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x334>
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	4a69      	ldr	r2, [pc, #420]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6213      	str	r3, [r2, #32]
 8002c26:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a66      	ldr	r2, [pc, #408]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	6213      	str	r3, [r2, #32]
 8002c32:	e01c      	b.n	8002c6e <HAL_RCC_OscConfig+0x36e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCC_OscConfig+0x356>
 8002c3c:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	4a60      	ldr	r2, [pc, #384]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6213      	str	r3, [r2, #32]
 8002c48:	4b5e      	ldr	r3, [pc, #376]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	4a5d      	ldr	r2, [pc, #372]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6213      	str	r3, [r2, #32]
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0x36e>
 8002c56:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4a5a      	ldr	r2, [pc, #360]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	6213      	str	r3, [r2, #32]
 8002c62:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4a57      	ldr	r2, [pc, #348]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d015      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe fdab 	bl	80017d0 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fe fda7 	bl	80017d0 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e0b1      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c94:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ee      	beq.n	8002c7e <HAL_RCC_OscConfig+0x37e>
 8002ca0:	e014      	b.n	8002ccc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fd95 	bl	80017d0 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fd91 	bl	80017d0 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e09b      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d105      	bne.n	8002cde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd2:	4b3c      	ldr	r3, [pc, #240]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8087 	beq.w	8002df6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d061      	beq.n	8002db8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d146      	bne.n	8002d8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7fe fd65 	bl	80017d0 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7fe fd61 	bl	80017d0 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e06d      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1c:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f0      	bne.n	8002d0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d108      	bne.n	8002d44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4921      	ldr	r1, [pc, #132]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d44:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a19      	ldr	r1, [r3, #32]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	430b      	orrs	r3, r1
 8002d56:	491b      	ldr	r1, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe fd35 	bl	80017d0 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe fd31 	bl	80017d0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e03d      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x46a>
 8002d88:	e035      	b.n	8002df6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_RCC_OscConfig+0x4cc>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe fd1e 	bl	80017d0 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe fd1a 	bl	80017d0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e026      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x498>
 8002db6:	e01e      	b.n	8002df6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e019      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_OscConfig+0x500>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000

08002e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0d0      	b.n	8002fba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b6a      	ldr	r3, [pc, #424]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d910      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b67      	ldr	r3, [pc, #412]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 0207 	bic.w	r2, r3, #7
 8002e2e:	4965      	ldr	r1, [pc, #404]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b8      	b.n	8002fba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e60:	4b59      	ldr	r3, [pc, #356]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a58      	ldr	r2, [pc, #352]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e78:	4b53      	ldr	r3, [pc, #332]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b50      	ldr	r3, [pc, #320]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	494d      	ldr	r1, [pc, #308]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d040      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d115      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e073      	b.n	8002fba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e06b      	b.n	8002fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4936      	ldr	r1, [pc, #216]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fe fc6c 	bl	80017d0 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fe fc68 	bl	80017d0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e053      	b.n	8002fba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d210      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 0207 	bic.w	r2, r3, #7
 8002f3a:	4922      	ldr	r1, [pc, #136]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e032      	b.n	8002fba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4916      	ldr	r1, [pc, #88]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f92:	f000 f821 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490a      	ldr	r1, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fbca 	bl	800174c <HAL_InitTick>

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40022000 	.word	0x40022000
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08004534 	.word	0x08004534
 8002fd0:	20000004 	.word	0x20000004
 8002fd4:	20000008 	.word	0x20000008

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d002      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x30>
 8003002:	2b08      	cmp	r3, #8
 8003004:	d003      	beq.n	800300e <HAL_RCC_GetSysClockFreq+0x36>
 8003006:	e027      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_GetSysClockFreq+0x98>)
 800300a:	613b      	str	r3, [r7, #16]
      break;
 800300c:	e027      	b.n	800305e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	0c9b      	lsrs	r3, r3, #18
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003018:	5cd3      	ldrb	r3, [r2, r3]
 800301a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d010      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_RCC_GetSysClockFreq+0x94>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0c5b      	lsrs	r3, r3, #17
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	4a11      	ldr	r2, [pc, #68]	; (8003078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <HAL_RCC_GetSysClockFreq+0x98>)
 800303a:	fb03 f202 	mul.w	r2, r3, r2
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	e004      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0c      	ldr	r2, [pc, #48]	; (800307c <HAL_RCC_GetSysClockFreq+0xa4>)
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	613b      	str	r3, [r7, #16]
      break;
 8003056:	e002      	b.n	800305e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCC_GetSysClockFreq+0x98>)
 800305a:	613b      	str	r3, [r7, #16]
      break;
 800305c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800305e:	693b      	ldr	r3, [r7, #16]
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	007a1200 	.word	0x007a1200
 8003074:	0800454c 	.word	0x0800454c
 8003078:	0800455c 	.word	0x0800455c
 800307c:	003d0900 	.word	0x003d0900

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b02      	ldr	r3, [pc, #8]	; (8003090 <HAL_RCC_GetHCLKFreq+0x10>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	20000004 	.word	0x20000004

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003098:	f7ff fff2 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	08004544 	.word	0x08004544

080030bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <RCC_Delay+0x34>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <RCC_Delay+0x38>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0a5b      	lsrs	r3, r3, #9
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030d8:	bf00      	nop
  }
  while (Delay --);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e5a      	subs	r2, r3, #1
 80030de:	60fa      	str	r2, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f9      	bne.n	80030d8 <RCC_Delay+0x1c>
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	20000004 	.word	0x20000004
 80030f4:	10624dd3 	.word	0x10624dd3

080030f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e041      	b.n	800318e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe f9f4 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f000 fa06 	bl	8003548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e041      	b.n	800322c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7fe f9c1 	bl	8001544 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3304      	adds	r3, #4
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f000 f9b7 	bl	8003548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800324e:	2302      	movs	r3, #2
 8003250:	e0ae      	b.n	80033b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	f200 809f 	bhi.w	80033a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	0800329d 	.word	0x0800329d
 800326c:	080033a1 	.word	0x080033a1
 8003270:	080033a1 	.word	0x080033a1
 8003274:	080033a1 	.word	0x080033a1
 8003278:	080032dd 	.word	0x080032dd
 800327c:	080033a1 	.word	0x080033a1
 8003280:	080033a1 	.word	0x080033a1
 8003284:	080033a1 	.word	0x080033a1
 8003288:	0800331f 	.word	0x0800331f
 800328c:	080033a1 	.word	0x080033a1
 8003290:	080033a1 	.word	0x080033a1
 8003294:	080033a1 	.word	0x080033a1
 8003298:	0800335f 	.word	0x0800335f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f9a8 	bl	80035f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6999      	ldr	r1, [r3, #24]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	619a      	str	r2, [r3, #24]
      break;
 80032da:	e064      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f9ee 	bl	80036c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6999      	ldr	r1, [r3, #24]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
      break;
 800331c:	e043      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fa37 	bl	8003798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0208 	orr.w	r2, r2, #8
 8003338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0204 	bic.w	r2, r2, #4
 8003348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69d9      	ldr	r1, [r3, #28]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	61da      	str	r2, [r3, #28]
      break;
 800335c:	e023      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fa81 	bl	800386c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69d9      	ldr	r1, [r3, #28]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	61da      	str	r2, [r3, #28]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
      break;
 80033a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIM_ConfigClockSource+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0b4      	b.n	800353e <HAL_TIM_ConfigClockSource+0x186>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340c:	d03e      	beq.n	800348c <HAL_TIM_ConfigClockSource+0xd4>
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003412:	f200 8087 	bhi.w	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341a:	f000 8086 	beq.w	800352a <HAL_TIM_ConfigClockSource+0x172>
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003422:	d87f      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d01a      	beq.n	800345e <HAL_TIM_ConfigClockSource+0xa6>
 8003428:	2b70      	cmp	r3, #112	; 0x70
 800342a:	d87b      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b60      	cmp	r3, #96	; 0x60
 800342e:	d050      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x11a>
 8003430:	2b60      	cmp	r3, #96	; 0x60
 8003432:	d877      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b50      	cmp	r3, #80	; 0x50
 8003436:	d03c      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0xfa>
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d873      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d058      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x13a>
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d86f      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b30      	cmp	r3, #48	; 0x30
 8003446:	d064      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d86b      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b20      	cmp	r3, #32
 800344e:	d060      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d867      	bhi.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d05c      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 8003458:	2b10      	cmp	r3, #16
 800345a:	d05a      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x15a>
 800345c:	e062      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800346e:	f000 fac2 	bl	80039f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	609a      	str	r2, [r3, #8]
      break;
 800348a:	e04f      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800349c:	f000 faab 	bl	80039f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ae:	609a      	str	r2, [r3, #8]
      break;
 80034b0:	e03c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034be:	461a      	mov	r2, r3
 80034c0:	f000 fa22 	bl	8003908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2150      	movs	r1, #80	; 0x50
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fa79 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80034d0:	e02c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034de:	461a      	mov	r2, r3
 80034e0:	f000 fa40 	bl	8003964 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2160      	movs	r1, #96	; 0x60
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fa69 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 80034f0:	e01c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fe:	461a      	mov	r2, r3
 8003500:	f000 fa02 	bl	8003908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2140      	movs	r1, #64	; 0x40
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fa59 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 8003510:	e00c      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f000 fa50 	bl	80039c2 <TIM_ITRx_SetConfig>
      break;
 8003522:	e003      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      break;
 8003528:	e000      	b.n	800352c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800352a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <TIM_Base_SetConfig+0xa8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x28>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x28>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <TIM_Base_SetConfig+0xac>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <TIM_Base_SetConfig+0xa8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0x52>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x52>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <TIM_Base_SetConfig+0xac>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a07      	ldr	r2, [pc, #28]	; (80035f0 <TIM_Base_SetConfig+0xa8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d103      	bne.n	80035e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	615a      	str	r2, [r3, #20]
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40000400 	.word	0x40000400

080035f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f023 0201 	bic.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 0302 	bic.w	r3, r3, #2
 8003640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <TIM_OC1_SetConfig+0xc8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10c      	bne.n	800366e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0308 	bic.w	r3, r3, #8
 800365a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <TIM_OC1_SetConfig+0xc8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d111      	bne.n	800369a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800367c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	621a      	str	r2, [r3, #32]
}
 80036b4:	bf00      	nop
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00

080036c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 0210 	bic.w	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f023 0320 	bic.w	r3, r3, #32
 800370e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <TIM_OC2_SetConfig+0xd0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10d      	bne.n	8003740 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800373e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <TIM_OC2_SetConfig+0xd0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d113      	bne.n	8003770 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00

08003798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <TIM_OC3_SetConfig+0xd0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10d      	bne.n	8003812 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <TIM_OC3_SetConfig+0xd0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d113      	bne.n	8003842 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	621a      	str	r2, [r3, #32]
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40012c00 	.word	0x40012c00

0800386c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	031b      	lsls	r3, r3, #12
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <TIM_OC4_SetConfig+0x98>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d109      	bne.n	80038e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	40012c00 	.word	0x40012c00

08003908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f023 0201 	bic.w	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f023 030a 	bic.w	r3, r3, #10
 8003944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0210 	bic.w	r2, r3, #16
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	031b      	lsls	r3, r3, #12
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	621a      	str	r2, [r3, #32]
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f043 0307 	orr.w	r3, r3, #7
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	021a      	lsls	r2, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	609a      	str	r2, [r3, #8]
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e041      	b.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a14      	ldr	r2, [pc, #80]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10c      	bne.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40000400 	.word	0x40000400

08003ae4 <siprintf>:
 8003ae4:	b40e      	push	{r1, r2, r3}
 8003ae6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003aea:	b500      	push	{lr}
 8003aec:	b09c      	sub	sp, #112	; 0x70
 8003aee:	ab1d      	add	r3, sp, #116	; 0x74
 8003af0:	9002      	str	r0, [sp, #8]
 8003af2:	9006      	str	r0, [sp, #24]
 8003af4:	9107      	str	r1, [sp, #28]
 8003af6:	9104      	str	r1, [sp, #16]
 8003af8:	4808      	ldr	r0, [pc, #32]	; (8003b1c <siprintf+0x38>)
 8003afa:	4909      	ldr	r1, [pc, #36]	; (8003b20 <siprintf+0x3c>)
 8003afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b00:	9105      	str	r1, [sp, #20]
 8003b02:	6800      	ldr	r0, [r0, #0]
 8003b04:	a902      	add	r1, sp, #8
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	f000 f98e 	bl	8003e28 <_svfiprintf_r>
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	9b02      	ldr	r3, [sp, #8]
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	b01c      	add	sp, #112	; 0x70
 8003b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b18:	b003      	add	sp, #12
 8003b1a:	4770      	bx	lr
 8003b1c:	2000005c 	.word	0x2000005c
 8003b20:	ffff0208 	.word	0xffff0208

08003b24 <memset>:
 8003b24:	4603      	mov	r3, r0
 8003b26:	4402      	add	r2, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <__errno>:
 8003b34:	4b01      	ldr	r3, [pc, #4]	; (8003b3c <__errno+0x8>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	2000005c 	.word	0x2000005c

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	2600      	movs	r6, #0
 8003b44:	4d0c      	ldr	r5, [pc, #48]	; (8003b78 <__libc_init_array+0x38>)
 8003b46:	4c0d      	ldr	r4, [pc, #52]	; (8003b7c <__libc_init_array+0x3c>)
 8003b48:	1b64      	subs	r4, r4, r5
 8003b4a:	10a4      	asrs	r4, r4, #2
 8003b4c:	42a6      	cmp	r6, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	f000 fc7a 	bl	8004448 <_init>
 8003b54:	2600      	movs	r6, #0
 8003b56:	4d0a      	ldr	r5, [pc, #40]	; (8003b80 <__libc_init_array+0x40>)
 8003b58:	4c0a      	ldr	r4, [pc, #40]	; (8003b84 <__libc_init_array+0x44>)
 8003b5a:	1b64      	subs	r4, r4, r5
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	42a6      	cmp	r6, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b68:	4798      	blx	r3
 8003b6a:	3601      	adds	r6, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b72:	4798      	blx	r3
 8003b74:	3601      	adds	r6, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	08004594 	.word	0x08004594
 8003b7c:	08004594 	.word	0x08004594
 8003b80:	08004594 	.word	0x08004594
 8003b84:	08004598 	.word	0x08004598

08003b88 <__retarget_lock_acquire_recursive>:
 8003b88:	4770      	bx	lr

08003b8a <__retarget_lock_release_recursive>:
 8003b8a:	4770      	bx	lr

08003b8c <_free_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4605      	mov	r5, r0
 8003b90:	2900      	cmp	r1, #0
 8003b92:	d040      	beq.n	8003c16 <_free_r+0x8a>
 8003b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b98:	1f0c      	subs	r4, r1, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bfb8      	it	lt
 8003b9e:	18e4      	addlt	r4, r4, r3
 8003ba0:	f000 f8dc 	bl	8003d5c <__malloc_lock>
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <_free_r+0x8c>)
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	b933      	cbnz	r3, 8003bb8 <_free_r+0x2c>
 8003baa:	6063      	str	r3, [r4, #4]
 8003bac:	6014      	str	r4, [r2, #0]
 8003bae:	4628      	mov	r0, r5
 8003bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb4:	f000 b8d8 	b.w	8003d68 <__malloc_unlock>
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	d908      	bls.n	8003bce <_free_r+0x42>
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	1821      	adds	r1, r4, r0
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	bf01      	itttt	eq
 8003bc4:	6819      	ldreq	r1, [r3, #0]
 8003bc6:	685b      	ldreq	r3, [r3, #4]
 8003bc8:	1809      	addeq	r1, r1, r0
 8003bca:	6021      	streq	r1, [r4, #0]
 8003bcc:	e7ed      	b.n	8003baa <_free_r+0x1e>
 8003bce:	461a      	mov	r2, r3
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	b10b      	cbz	r3, 8003bd8 <_free_r+0x4c>
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d9fa      	bls.n	8003bce <_free_r+0x42>
 8003bd8:	6811      	ldr	r1, [r2, #0]
 8003bda:	1850      	adds	r0, r2, r1
 8003bdc:	42a0      	cmp	r0, r4
 8003bde:	d10b      	bne.n	8003bf8 <_free_r+0x6c>
 8003be0:	6820      	ldr	r0, [r4, #0]
 8003be2:	4401      	add	r1, r0
 8003be4:	1850      	adds	r0, r2, r1
 8003be6:	4283      	cmp	r3, r0
 8003be8:	6011      	str	r1, [r2, #0]
 8003bea:	d1e0      	bne.n	8003bae <_free_r+0x22>
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4408      	add	r0, r1
 8003bf2:	6010      	str	r0, [r2, #0]
 8003bf4:	6053      	str	r3, [r2, #4]
 8003bf6:	e7da      	b.n	8003bae <_free_r+0x22>
 8003bf8:	d902      	bls.n	8003c00 <_free_r+0x74>
 8003bfa:	230c      	movs	r3, #12
 8003bfc:	602b      	str	r3, [r5, #0]
 8003bfe:	e7d6      	b.n	8003bae <_free_r+0x22>
 8003c00:	6820      	ldr	r0, [r4, #0]
 8003c02:	1821      	adds	r1, r4, r0
 8003c04:	428b      	cmp	r3, r1
 8003c06:	bf01      	itttt	eq
 8003c08:	6819      	ldreq	r1, [r3, #0]
 8003c0a:	685b      	ldreq	r3, [r3, #4]
 8003c0c:	1809      	addeq	r1, r1, r0
 8003c0e:	6021      	streq	r1, [r4, #0]
 8003c10:	6063      	str	r3, [r4, #4]
 8003c12:	6054      	str	r4, [r2, #4]
 8003c14:	e7cb      	b.n	8003bae <_free_r+0x22>
 8003c16:	bd38      	pop	{r3, r4, r5, pc}
 8003c18:	200002e8 	.word	0x200002e8

08003c1c <sbrk_aligned>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4e0e      	ldr	r6, [pc, #56]	; (8003c58 <sbrk_aligned+0x3c>)
 8003c20:	460c      	mov	r4, r1
 8003c22:	6831      	ldr	r1, [r6, #0]
 8003c24:	4605      	mov	r5, r0
 8003c26:	b911      	cbnz	r1, 8003c2e <sbrk_aligned+0x12>
 8003c28:	f000 fbaa 	bl	8004380 <_sbrk_r>
 8003c2c:	6030      	str	r0, [r6, #0]
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 fba5 	bl	8004380 <_sbrk_r>
 8003c36:	1c43      	adds	r3, r0, #1
 8003c38:	d00a      	beq.n	8003c50 <sbrk_aligned+0x34>
 8003c3a:	1cc4      	adds	r4, r0, #3
 8003c3c:	f024 0403 	bic.w	r4, r4, #3
 8003c40:	42a0      	cmp	r0, r4
 8003c42:	d007      	beq.n	8003c54 <sbrk_aligned+0x38>
 8003c44:	1a21      	subs	r1, r4, r0
 8003c46:	4628      	mov	r0, r5
 8003c48:	f000 fb9a 	bl	8004380 <_sbrk_r>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d101      	bne.n	8003c54 <sbrk_aligned+0x38>
 8003c50:	f04f 34ff 	mov.w	r4, #4294967295
 8003c54:	4620      	mov	r0, r4
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	200002ec 	.word	0x200002ec

08003c5c <_malloc_r>:
 8003c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c60:	1ccd      	adds	r5, r1, #3
 8003c62:	f025 0503 	bic.w	r5, r5, #3
 8003c66:	3508      	adds	r5, #8
 8003c68:	2d0c      	cmp	r5, #12
 8003c6a:	bf38      	it	cc
 8003c6c:	250c      	movcc	r5, #12
 8003c6e:	2d00      	cmp	r5, #0
 8003c70:	4607      	mov	r7, r0
 8003c72:	db01      	blt.n	8003c78 <_malloc_r+0x1c>
 8003c74:	42a9      	cmp	r1, r5
 8003c76:	d905      	bls.n	8003c84 <_malloc_r+0x28>
 8003c78:	230c      	movs	r3, #12
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4630      	mov	r0, r6
 8003c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d58 <_malloc_r+0xfc>
 8003c88:	f000 f868 	bl	8003d5c <__malloc_lock>
 8003c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c90:	461c      	mov	r4, r3
 8003c92:	bb5c      	cbnz	r4, 8003cec <_malloc_r+0x90>
 8003c94:	4629      	mov	r1, r5
 8003c96:	4638      	mov	r0, r7
 8003c98:	f7ff ffc0 	bl	8003c1c <sbrk_aligned>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	d155      	bne.n	8003d4e <_malloc_r+0xf2>
 8003ca2:	f8d8 4000 	ldr.w	r4, [r8]
 8003ca6:	4626      	mov	r6, r4
 8003ca8:	2e00      	cmp	r6, #0
 8003caa:	d145      	bne.n	8003d38 <_malloc_r+0xdc>
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	d048      	beq.n	8003d42 <_malloc_r+0xe6>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	eb04 0903 	add.w	r9, r4, r3
 8003cba:	f000 fb61 	bl	8004380 <_sbrk_r>
 8003cbe:	4581      	cmp	r9, r0
 8003cc0:	d13f      	bne.n	8003d42 <_malloc_r+0xe6>
 8003cc2:	6821      	ldr	r1, [r4, #0]
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	1a6d      	subs	r5, r5, r1
 8003cc8:	4629      	mov	r1, r5
 8003cca:	f7ff ffa7 	bl	8003c1c <sbrk_aligned>
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d037      	beq.n	8003d42 <_malloc_r+0xe6>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	442b      	add	r3, r5
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d038      	beq.n	8003d52 <_malloc_r+0xf6>
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	42a2      	cmp	r2, r4
 8003ce4:	d12b      	bne.n	8003d3e <_malloc_r+0xe2>
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e00f      	b.n	8003d0c <_malloc_r+0xb0>
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	1b52      	subs	r2, r2, r5
 8003cf0:	d41f      	bmi.n	8003d32 <_malloc_r+0xd6>
 8003cf2:	2a0b      	cmp	r2, #11
 8003cf4:	d917      	bls.n	8003d26 <_malloc_r+0xca>
 8003cf6:	1961      	adds	r1, r4, r5
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	6025      	str	r5, [r4, #0]
 8003cfc:	bf18      	it	ne
 8003cfe:	6059      	strne	r1, [r3, #4]
 8003d00:	6863      	ldr	r3, [r4, #4]
 8003d02:	bf08      	it	eq
 8003d04:	f8c8 1000 	streq.w	r1, [r8]
 8003d08:	5162      	str	r2, [r4, r5]
 8003d0a:	604b      	str	r3, [r1, #4]
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f104 060b 	add.w	r6, r4, #11
 8003d12:	f000 f829 	bl	8003d68 <__malloc_unlock>
 8003d16:	f026 0607 	bic.w	r6, r6, #7
 8003d1a:	1d23      	adds	r3, r4, #4
 8003d1c:	1af2      	subs	r2, r6, r3
 8003d1e:	d0ae      	beq.n	8003c7e <_malloc_r+0x22>
 8003d20:	1b9b      	subs	r3, r3, r6
 8003d22:	50a3      	str	r3, [r4, r2]
 8003d24:	e7ab      	b.n	8003c7e <_malloc_r+0x22>
 8003d26:	42a3      	cmp	r3, r4
 8003d28:	6862      	ldr	r2, [r4, #4]
 8003d2a:	d1dd      	bne.n	8003ce8 <_malloc_r+0x8c>
 8003d2c:	f8c8 2000 	str.w	r2, [r8]
 8003d30:	e7ec      	b.n	8003d0c <_malloc_r+0xb0>
 8003d32:	4623      	mov	r3, r4
 8003d34:	6864      	ldr	r4, [r4, #4]
 8003d36:	e7ac      	b.n	8003c92 <_malloc_r+0x36>
 8003d38:	4634      	mov	r4, r6
 8003d3a:	6876      	ldr	r6, [r6, #4]
 8003d3c:	e7b4      	b.n	8003ca8 <_malloc_r+0x4c>
 8003d3e:	4613      	mov	r3, r2
 8003d40:	e7cc      	b.n	8003cdc <_malloc_r+0x80>
 8003d42:	230c      	movs	r3, #12
 8003d44:	4638      	mov	r0, r7
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	f000 f80e 	bl	8003d68 <__malloc_unlock>
 8003d4c:	e797      	b.n	8003c7e <_malloc_r+0x22>
 8003d4e:	6025      	str	r5, [r4, #0]
 8003d50:	e7dc      	b.n	8003d0c <_malloc_r+0xb0>
 8003d52:	605b      	str	r3, [r3, #4]
 8003d54:	deff      	udf	#255	; 0xff
 8003d56:	bf00      	nop
 8003d58:	200002e8 	.word	0x200002e8

08003d5c <__malloc_lock>:
 8003d5c:	4801      	ldr	r0, [pc, #4]	; (8003d64 <__malloc_lock+0x8>)
 8003d5e:	f7ff bf13 	b.w	8003b88 <__retarget_lock_acquire_recursive>
 8003d62:	bf00      	nop
 8003d64:	200002e4 	.word	0x200002e4

08003d68 <__malloc_unlock>:
 8003d68:	4801      	ldr	r0, [pc, #4]	; (8003d70 <__malloc_unlock+0x8>)
 8003d6a:	f7ff bf0e 	b.w	8003b8a <__retarget_lock_release_recursive>
 8003d6e:	bf00      	nop
 8003d70:	200002e4 	.word	0x200002e4

08003d74 <__ssputs_r>:
 8003d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d78:	461f      	mov	r7, r3
 8003d7a:	688e      	ldr	r6, [r1, #8]
 8003d7c:	4682      	mov	sl, r0
 8003d7e:	42be      	cmp	r6, r7
 8003d80:	460c      	mov	r4, r1
 8003d82:	4690      	mov	r8, r2
 8003d84:	680b      	ldr	r3, [r1, #0]
 8003d86:	d82c      	bhi.n	8003de2 <__ssputs_r+0x6e>
 8003d88:	898a      	ldrh	r2, [r1, #12]
 8003d8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d8e:	d026      	beq.n	8003dde <__ssputs_r+0x6a>
 8003d90:	6965      	ldr	r5, [r4, #20]
 8003d92:	6909      	ldr	r1, [r1, #16]
 8003d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d98:	eba3 0901 	sub.w	r9, r3, r1
 8003d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003da0:	1c7b      	adds	r3, r7, #1
 8003da2:	444b      	add	r3, r9
 8003da4:	106d      	asrs	r5, r5, #1
 8003da6:	429d      	cmp	r5, r3
 8003da8:	bf38      	it	cc
 8003daa:	461d      	movcc	r5, r3
 8003dac:	0553      	lsls	r3, r2, #21
 8003dae:	d527      	bpl.n	8003e00 <__ssputs_r+0x8c>
 8003db0:	4629      	mov	r1, r5
 8003db2:	f7ff ff53 	bl	8003c5c <_malloc_r>
 8003db6:	4606      	mov	r6, r0
 8003db8:	b360      	cbz	r0, 8003e14 <__ssputs_r+0xa0>
 8003dba:	464a      	mov	r2, r9
 8003dbc:	6921      	ldr	r1, [r4, #16]
 8003dbe:	f000 fafd 	bl	80043bc <memcpy>
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dcc:	81a3      	strh	r3, [r4, #12]
 8003dce:	6126      	str	r6, [r4, #16]
 8003dd0:	444e      	add	r6, r9
 8003dd2:	6026      	str	r6, [r4, #0]
 8003dd4:	463e      	mov	r6, r7
 8003dd6:	6165      	str	r5, [r4, #20]
 8003dd8:	eba5 0509 	sub.w	r5, r5, r9
 8003ddc:	60a5      	str	r5, [r4, #8]
 8003dde:	42be      	cmp	r6, r7
 8003de0:	d900      	bls.n	8003de4 <__ssputs_r+0x70>
 8003de2:	463e      	mov	r6, r7
 8003de4:	4632      	mov	r2, r6
 8003de6:	4641      	mov	r1, r8
 8003de8:	6820      	ldr	r0, [r4, #0]
 8003dea:	f000 faaf 	bl	800434c <memmove>
 8003dee:	2000      	movs	r0, #0
 8003df0:	68a3      	ldr	r3, [r4, #8]
 8003df2:	1b9b      	subs	r3, r3, r6
 8003df4:	60a3      	str	r3, [r4, #8]
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	4433      	add	r3, r6
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e00:	462a      	mov	r2, r5
 8003e02:	f000 fae9 	bl	80043d8 <_realloc_r>
 8003e06:	4606      	mov	r6, r0
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d1e0      	bne.n	8003dce <__ssputs_r+0x5a>
 8003e0c:	4650      	mov	r0, sl
 8003e0e:	6921      	ldr	r1, [r4, #16]
 8003e10:	f7ff febc 	bl	8003b8c <_free_r>
 8003e14:	230c      	movs	r3, #12
 8003e16:	f8ca 3000 	str.w	r3, [sl]
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	e7e9      	b.n	8003dfc <__ssputs_r+0x88>

08003e28 <_svfiprintf_r>:
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	4698      	mov	r8, r3
 8003e2e:	898b      	ldrh	r3, [r1, #12]
 8003e30:	4607      	mov	r7, r0
 8003e32:	061b      	lsls	r3, r3, #24
 8003e34:	460d      	mov	r5, r1
 8003e36:	4614      	mov	r4, r2
 8003e38:	b09d      	sub	sp, #116	; 0x74
 8003e3a:	d50e      	bpl.n	8003e5a <_svfiprintf_r+0x32>
 8003e3c:	690b      	ldr	r3, [r1, #16]
 8003e3e:	b963      	cbnz	r3, 8003e5a <_svfiprintf_r+0x32>
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	f7ff ff0b 	bl	8003c5c <_malloc_r>
 8003e46:	6028      	str	r0, [r5, #0]
 8003e48:	6128      	str	r0, [r5, #16]
 8003e4a:	b920      	cbnz	r0, 8003e56 <_svfiprintf_r+0x2e>
 8003e4c:	230c      	movs	r3, #12
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	e0d0      	b.n	8003ff8 <_svfiprintf_r+0x1d0>
 8003e56:	2340      	movs	r3, #64	; 0x40
 8003e58:	616b      	str	r3, [r5, #20]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5e:	2320      	movs	r3, #32
 8003e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e64:	2330      	movs	r3, #48	; 0x30
 8003e66:	f04f 0901 	mov.w	r9, #1
 8003e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e6e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004010 <_svfiprintf_r+0x1e8>
 8003e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e76:	4623      	mov	r3, r4
 8003e78:	469a      	mov	sl, r3
 8003e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e7e:	b10a      	cbz	r2, 8003e84 <_svfiprintf_r+0x5c>
 8003e80:	2a25      	cmp	r2, #37	; 0x25
 8003e82:	d1f9      	bne.n	8003e78 <_svfiprintf_r+0x50>
 8003e84:	ebba 0b04 	subs.w	fp, sl, r4
 8003e88:	d00b      	beq.n	8003ea2 <_svfiprintf_r+0x7a>
 8003e8a:	465b      	mov	r3, fp
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	4629      	mov	r1, r5
 8003e90:	4638      	mov	r0, r7
 8003e92:	f7ff ff6f 	bl	8003d74 <__ssputs_r>
 8003e96:	3001      	adds	r0, #1
 8003e98:	f000 80a9 	beq.w	8003fee <_svfiprintf_r+0x1c6>
 8003e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e9e:	445a      	add	r2, fp
 8003ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80a1 	beq.w	8003fee <_svfiprintf_r+0x1c6>
 8003eac:	2300      	movs	r3, #0
 8003eae:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eb6:	f10a 0a01 	add.w	sl, sl, #1
 8003eba:	9304      	str	r3, [sp, #16]
 8003ebc:	9307      	str	r3, [sp, #28]
 8003ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ec4:	4654      	mov	r4, sl
 8003ec6:	2205      	movs	r2, #5
 8003ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ecc:	4850      	ldr	r0, [pc, #320]	; (8004010 <_svfiprintf_r+0x1e8>)
 8003ece:	f000 fa67 	bl	80043a0 <memchr>
 8003ed2:	9a04      	ldr	r2, [sp, #16]
 8003ed4:	b9d8      	cbnz	r0, 8003f0e <_svfiprintf_r+0xe6>
 8003ed6:	06d0      	lsls	r0, r2, #27
 8003ed8:	bf44      	itt	mi
 8003eda:	2320      	movmi	r3, #32
 8003edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee0:	0711      	lsls	r1, r2, #28
 8003ee2:	bf44      	itt	mi
 8003ee4:	232b      	movmi	r3, #43	; 0x2b
 8003ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eea:	f89a 3000 	ldrb.w	r3, [sl]
 8003eee:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef0:	d015      	beq.n	8003f1e <_svfiprintf_r+0xf6>
 8003ef2:	4654      	mov	r4, sl
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f04f 0c0a 	mov.w	ip, #10
 8003efa:	9a07      	ldr	r2, [sp, #28]
 8003efc:	4621      	mov	r1, r4
 8003efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f02:	3b30      	subs	r3, #48	; 0x30
 8003f04:	2b09      	cmp	r3, #9
 8003f06:	d94d      	bls.n	8003fa4 <_svfiprintf_r+0x17c>
 8003f08:	b1b0      	cbz	r0, 8003f38 <_svfiprintf_r+0x110>
 8003f0a:	9207      	str	r2, [sp, #28]
 8003f0c:	e014      	b.n	8003f38 <_svfiprintf_r+0x110>
 8003f0e:	eba0 0308 	sub.w	r3, r0, r8
 8003f12:	fa09 f303 	lsl.w	r3, r9, r3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	46a2      	mov	sl, r4
 8003f1a:	9304      	str	r3, [sp, #16]
 8003f1c:	e7d2      	b.n	8003ec4 <_svfiprintf_r+0x9c>
 8003f1e:	9b03      	ldr	r3, [sp, #12]
 8003f20:	1d19      	adds	r1, r3, #4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	9103      	str	r1, [sp, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bfbb      	ittet	lt
 8003f2a:	425b      	neglt	r3, r3
 8003f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8003f30:	9307      	strge	r3, [sp, #28]
 8003f32:	9307      	strlt	r3, [sp, #28]
 8003f34:	bfb8      	it	lt
 8003f36:	9204      	strlt	r2, [sp, #16]
 8003f38:	7823      	ldrb	r3, [r4, #0]
 8003f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f3c:	d10c      	bne.n	8003f58 <_svfiprintf_r+0x130>
 8003f3e:	7863      	ldrb	r3, [r4, #1]
 8003f40:	2b2a      	cmp	r3, #42	; 0x2a
 8003f42:	d134      	bne.n	8003fae <_svfiprintf_r+0x186>
 8003f44:	9b03      	ldr	r3, [sp, #12]
 8003f46:	3402      	adds	r4, #2
 8003f48:	1d1a      	adds	r2, r3, #4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	9203      	str	r2, [sp, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bfb8      	it	lt
 8003f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f56:	9305      	str	r3, [sp, #20]
 8003f58:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004014 <_svfiprintf_r+0x1ec>
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	4650      	mov	r0, sl
 8003f60:	7821      	ldrb	r1, [r4, #0]
 8003f62:	f000 fa1d 	bl	80043a0 <memchr>
 8003f66:	b138      	cbz	r0, 8003f78 <_svfiprintf_r+0x150>
 8003f68:	2240      	movs	r2, #64	; 0x40
 8003f6a:	9b04      	ldr	r3, [sp, #16]
 8003f6c:	eba0 000a 	sub.w	r0, r0, sl
 8003f70:	4082      	lsls	r2, r0
 8003f72:	4313      	orrs	r3, r2
 8003f74:	3401      	adds	r4, #1
 8003f76:	9304      	str	r3, [sp, #16]
 8003f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f7c:	2206      	movs	r2, #6
 8003f7e:	4826      	ldr	r0, [pc, #152]	; (8004018 <_svfiprintf_r+0x1f0>)
 8003f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f84:	f000 fa0c 	bl	80043a0 <memchr>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d038      	beq.n	8003ffe <_svfiprintf_r+0x1d6>
 8003f8c:	4b23      	ldr	r3, [pc, #140]	; (800401c <_svfiprintf_r+0x1f4>)
 8003f8e:	bb1b      	cbnz	r3, 8003fd8 <_svfiprintf_r+0x1b0>
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	3307      	adds	r3, #7
 8003f94:	f023 0307 	bic.w	r3, r3, #7
 8003f98:	3308      	adds	r3, #8
 8003f9a:	9303      	str	r3, [sp, #12]
 8003f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f9e:	4433      	add	r3, r6
 8003fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa2:	e768      	b.n	8003e76 <_svfiprintf_r+0x4e>
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fac:	e7a6      	b.n	8003efc <_svfiprintf_r+0xd4>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f04f 0c0a 	mov.w	ip, #10
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	3401      	adds	r4, #1
 8003fb8:	9305      	str	r3, [sp, #20]
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc0:	3a30      	subs	r2, #48	; 0x30
 8003fc2:	2a09      	cmp	r2, #9
 8003fc4:	d903      	bls.n	8003fce <_svfiprintf_r+0x1a6>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0c6      	beq.n	8003f58 <_svfiprintf_r+0x130>
 8003fca:	9105      	str	r1, [sp, #20]
 8003fcc:	e7c4      	b.n	8003f58 <_svfiprintf_r+0x130>
 8003fce:	4604      	mov	r4, r0
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fd6:	e7f0      	b.n	8003fba <_svfiprintf_r+0x192>
 8003fd8:	ab03      	add	r3, sp, #12
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	462a      	mov	r2, r5
 8003fde:	4638      	mov	r0, r7
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <_svfiprintf_r+0x1f8>)
 8003fe2:	a904      	add	r1, sp, #16
 8003fe4:	f3af 8000 	nop.w
 8003fe8:	1c42      	adds	r2, r0, #1
 8003fea:	4606      	mov	r6, r0
 8003fec:	d1d6      	bne.n	8003f9c <_svfiprintf_r+0x174>
 8003fee:	89ab      	ldrh	r3, [r5, #12]
 8003ff0:	065b      	lsls	r3, r3, #25
 8003ff2:	f53f af2d 	bmi.w	8003e50 <_svfiprintf_r+0x28>
 8003ff6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ff8:	b01d      	add	sp, #116	; 0x74
 8003ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffe:	ab03      	add	r3, sp, #12
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	462a      	mov	r2, r5
 8004004:	4638      	mov	r0, r7
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <_svfiprintf_r+0x1f8>)
 8004008:	a904      	add	r1, sp, #16
 800400a:	f000 f87d 	bl	8004108 <_printf_i>
 800400e:	e7eb      	b.n	8003fe8 <_svfiprintf_r+0x1c0>
 8004010:	0800455e 	.word	0x0800455e
 8004014:	08004564 	.word	0x08004564
 8004018:	08004568 	.word	0x08004568
 800401c:	00000000 	.word	0x00000000
 8004020:	08003d75 	.word	0x08003d75

08004024 <_printf_common>:
 8004024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004028:	4616      	mov	r6, r2
 800402a:	4699      	mov	r9, r3
 800402c:	688a      	ldr	r2, [r1, #8]
 800402e:	690b      	ldr	r3, [r1, #16]
 8004030:	4607      	mov	r7, r0
 8004032:	4293      	cmp	r3, r2
 8004034:	bfb8      	it	lt
 8004036:	4613      	movlt	r3, r2
 8004038:	6033      	str	r3, [r6, #0]
 800403a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800403e:	460c      	mov	r4, r1
 8004040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004044:	b10a      	cbz	r2, 800404a <_printf_common+0x26>
 8004046:	3301      	adds	r3, #1
 8004048:	6033      	str	r3, [r6, #0]
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	0699      	lsls	r1, r3, #26
 800404e:	bf42      	ittt	mi
 8004050:	6833      	ldrmi	r3, [r6, #0]
 8004052:	3302      	addmi	r3, #2
 8004054:	6033      	strmi	r3, [r6, #0]
 8004056:	6825      	ldr	r5, [r4, #0]
 8004058:	f015 0506 	ands.w	r5, r5, #6
 800405c:	d106      	bne.n	800406c <_printf_common+0x48>
 800405e:	f104 0a19 	add.w	sl, r4, #25
 8004062:	68e3      	ldr	r3, [r4, #12]
 8004064:	6832      	ldr	r2, [r6, #0]
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	42ab      	cmp	r3, r5
 800406a:	dc2b      	bgt.n	80040c4 <_printf_common+0xa0>
 800406c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004070:	1e13      	subs	r3, r2, #0
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	bf18      	it	ne
 8004076:	2301      	movne	r3, #1
 8004078:	0692      	lsls	r2, r2, #26
 800407a:	d430      	bmi.n	80040de <_printf_common+0xba>
 800407c:	4649      	mov	r1, r9
 800407e:	4638      	mov	r0, r7
 8004080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004084:	47c0      	blx	r8
 8004086:	3001      	adds	r0, #1
 8004088:	d023      	beq.n	80040d2 <_printf_common+0xae>
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	6922      	ldr	r2, [r4, #16]
 800408e:	f003 0306 	and.w	r3, r3, #6
 8004092:	2b04      	cmp	r3, #4
 8004094:	bf14      	ite	ne
 8004096:	2500      	movne	r5, #0
 8004098:	6833      	ldreq	r3, [r6, #0]
 800409a:	f04f 0600 	mov.w	r6, #0
 800409e:	bf08      	it	eq
 80040a0:	68e5      	ldreq	r5, [r4, #12]
 80040a2:	f104 041a 	add.w	r4, r4, #26
 80040a6:	bf08      	it	eq
 80040a8:	1aed      	subeq	r5, r5, r3
 80040aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040ae:	bf08      	it	eq
 80040b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b4:	4293      	cmp	r3, r2
 80040b6:	bfc4      	itt	gt
 80040b8:	1a9b      	subgt	r3, r3, r2
 80040ba:	18ed      	addgt	r5, r5, r3
 80040bc:	42b5      	cmp	r5, r6
 80040be:	d11a      	bne.n	80040f6 <_printf_common+0xd2>
 80040c0:	2000      	movs	r0, #0
 80040c2:	e008      	b.n	80040d6 <_printf_common+0xb2>
 80040c4:	2301      	movs	r3, #1
 80040c6:	4652      	mov	r2, sl
 80040c8:	4649      	mov	r1, r9
 80040ca:	4638      	mov	r0, r7
 80040cc:	47c0      	blx	r8
 80040ce:	3001      	adds	r0, #1
 80040d0:	d103      	bne.n	80040da <_printf_common+0xb6>
 80040d2:	f04f 30ff 	mov.w	r0, #4294967295
 80040d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040da:	3501      	adds	r5, #1
 80040dc:	e7c1      	b.n	8004062 <_printf_common+0x3e>
 80040de:	2030      	movs	r0, #48	; 0x30
 80040e0:	18e1      	adds	r1, r4, r3
 80040e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040ec:	4422      	add	r2, r4
 80040ee:	3302      	adds	r3, #2
 80040f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f4:	e7c2      	b.n	800407c <_printf_common+0x58>
 80040f6:	2301      	movs	r3, #1
 80040f8:	4622      	mov	r2, r4
 80040fa:	4649      	mov	r1, r9
 80040fc:	4638      	mov	r0, r7
 80040fe:	47c0      	blx	r8
 8004100:	3001      	adds	r0, #1
 8004102:	d0e6      	beq.n	80040d2 <_printf_common+0xae>
 8004104:	3601      	adds	r6, #1
 8004106:	e7d9      	b.n	80040bc <_printf_common+0x98>

08004108 <_printf_i>:
 8004108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	7e0f      	ldrb	r7, [r1, #24]
 800410e:	4691      	mov	r9, r2
 8004110:	2f78      	cmp	r7, #120	; 0x78
 8004112:	4680      	mov	r8, r0
 8004114:	460c      	mov	r4, r1
 8004116:	469a      	mov	sl, r3
 8004118:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800411a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800411e:	d807      	bhi.n	8004130 <_printf_i+0x28>
 8004120:	2f62      	cmp	r7, #98	; 0x62
 8004122:	d80a      	bhi.n	800413a <_printf_i+0x32>
 8004124:	2f00      	cmp	r7, #0
 8004126:	f000 80d5 	beq.w	80042d4 <_printf_i+0x1cc>
 800412a:	2f58      	cmp	r7, #88	; 0x58
 800412c:	f000 80c1 	beq.w	80042b2 <_printf_i+0x1aa>
 8004130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004138:	e03a      	b.n	80041b0 <_printf_i+0xa8>
 800413a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800413e:	2b15      	cmp	r3, #21
 8004140:	d8f6      	bhi.n	8004130 <_printf_i+0x28>
 8004142:	a101      	add	r1, pc, #4	; (adr r1, 8004148 <_printf_i+0x40>)
 8004144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004148:	080041a1 	.word	0x080041a1
 800414c:	080041b5 	.word	0x080041b5
 8004150:	08004131 	.word	0x08004131
 8004154:	08004131 	.word	0x08004131
 8004158:	08004131 	.word	0x08004131
 800415c:	08004131 	.word	0x08004131
 8004160:	080041b5 	.word	0x080041b5
 8004164:	08004131 	.word	0x08004131
 8004168:	08004131 	.word	0x08004131
 800416c:	08004131 	.word	0x08004131
 8004170:	08004131 	.word	0x08004131
 8004174:	080042bb 	.word	0x080042bb
 8004178:	080041e1 	.word	0x080041e1
 800417c:	08004275 	.word	0x08004275
 8004180:	08004131 	.word	0x08004131
 8004184:	08004131 	.word	0x08004131
 8004188:	080042dd 	.word	0x080042dd
 800418c:	08004131 	.word	0x08004131
 8004190:	080041e1 	.word	0x080041e1
 8004194:	08004131 	.word	0x08004131
 8004198:	08004131 	.word	0x08004131
 800419c:	0800427d 	.word	0x0800427d
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	1d1a      	adds	r2, r3, #4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0a0      	b.n	80042f6 <_printf_i+0x1ee>
 80041b4:	6820      	ldr	r0, [r4, #0]
 80041b6:	682b      	ldr	r3, [r5, #0]
 80041b8:	0607      	lsls	r7, r0, #24
 80041ba:	f103 0104 	add.w	r1, r3, #4
 80041be:	6029      	str	r1, [r5, #0]
 80041c0:	d501      	bpl.n	80041c6 <_printf_i+0xbe>
 80041c2:	681e      	ldr	r6, [r3, #0]
 80041c4:	e003      	b.n	80041ce <_printf_i+0xc6>
 80041c6:	0646      	lsls	r6, r0, #25
 80041c8:	d5fb      	bpl.n	80041c2 <_printf_i+0xba>
 80041ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041ce:	2e00      	cmp	r6, #0
 80041d0:	da03      	bge.n	80041da <_printf_i+0xd2>
 80041d2:	232d      	movs	r3, #45	; 0x2d
 80041d4:	4276      	negs	r6, r6
 80041d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041da:	230a      	movs	r3, #10
 80041dc:	4859      	ldr	r0, [pc, #356]	; (8004344 <_printf_i+0x23c>)
 80041de:	e012      	b.n	8004206 <_printf_i+0xfe>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	6820      	ldr	r0, [r4, #0]
 80041e4:	1d19      	adds	r1, r3, #4
 80041e6:	6029      	str	r1, [r5, #0]
 80041e8:	0605      	lsls	r5, r0, #24
 80041ea:	d501      	bpl.n	80041f0 <_printf_i+0xe8>
 80041ec:	681e      	ldr	r6, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <_printf_i+0xee>
 80041f0:	0641      	lsls	r1, r0, #25
 80041f2:	d5fb      	bpl.n	80041ec <_printf_i+0xe4>
 80041f4:	881e      	ldrh	r6, [r3, #0]
 80041f6:	2f6f      	cmp	r7, #111	; 0x6f
 80041f8:	bf0c      	ite	eq
 80041fa:	2308      	moveq	r3, #8
 80041fc:	230a      	movne	r3, #10
 80041fe:	4851      	ldr	r0, [pc, #324]	; (8004344 <_printf_i+0x23c>)
 8004200:	2100      	movs	r1, #0
 8004202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004206:	6865      	ldr	r5, [r4, #4]
 8004208:	2d00      	cmp	r5, #0
 800420a:	bfa8      	it	ge
 800420c:	6821      	ldrge	r1, [r4, #0]
 800420e:	60a5      	str	r5, [r4, #8]
 8004210:	bfa4      	itt	ge
 8004212:	f021 0104 	bicge.w	r1, r1, #4
 8004216:	6021      	strge	r1, [r4, #0]
 8004218:	b90e      	cbnz	r6, 800421e <_printf_i+0x116>
 800421a:	2d00      	cmp	r5, #0
 800421c:	d04b      	beq.n	80042b6 <_printf_i+0x1ae>
 800421e:	4615      	mov	r5, r2
 8004220:	fbb6 f1f3 	udiv	r1, r6, r3
 8004224:	fb03 6711 	mls	r7, r3, r1, r6
 8004228:	5dc7      	ldrb	r7, [r0, r7]
 800422a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800422e:	4637      	mov	r7, r6
 8004230:	42bb      	cmp	r3, r7
 8004232:	460e      	mov	r6, r1
 8004234:	d9f4      	bls.n	8004220 <_printf_i+0x118>
 8004236:	2b08      	cmp	r3, #8
 8004238:	d10b      	bne.n	8004252 <_printf_i+0x14a>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	07de      	lsls	r6, r3, #31
 800423e:	d508      	bpl.n	8004252 <_printf_i+0x14a>
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	6861      	ldr	r1, [r4, #4]
 8004244:	4299      	cmp	r1, r3
 8004246:	bfde      	ittt	le
 8004248:	2330      	movle	r3, #48	; 0x30
 800424a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800424e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004252:	1b52      	subs	r2, r2, r5
 8004254:	6122      	str	r2, [r4, #16]
 8004256:	464b      	mov	r3, r9
 8004258:	4621      	mov	r1, r4
 800425a:	4640      	mov	r0, r8
 800425c:	f8cd a000 	str.w	sl, [sp]
 8004260:	aa03      	add	r2, sp, #12
 8004262:	f7ff fedf 	bl	8004024 <_printf_common>
 8004266:	3001      	adds	r0, #1
 8004268:	d14a      	bne.n	8004300 <_printf_i+0x1f8>
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	b004      	add	sp, #16
 8004270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	f043 0320 	orr.w	r3, r3, #32
 800427a:	6023      	str	r3, [r4, #0]
 800427c:	2778      	movs	r7, #120	; 0x78
 800427e:	4832      	ldr	r0, [pc, #200]	; (8004348 <_printf_i+0x240>)
 8004280:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	6829      	ldr	r1, [r5, #0]
 8004288:	061f      	lsls	r7, r3, #24
 800428a:	f851 6b04 	ldr.w	r6, [r1], #4
 800428e:	d402      	bmi.n	8004296 <_printf_i+0x18e>
 8004290:	065f      	lsls	r7, r3, #25
 8004292:	bf48      	it	mi
 8004294:	b2b6      	uxthmi	r6, r6
 8004296:	07df      	lsls	r7, r3, #31
 8004298:	bf48      	it	mi
 800429a:	f043 0320 	orrmi.w	r3, r3, #32
 800429e:	6029      	str	r1, [r5, #0]
 80042a0:	bf48      	it	mi
 80042a2:	6023      	strmi	r3, [r4, #0]
 80042a4:	b91e      	cbnz	r6, 80042ae <_printf_i+0x1a6>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	f023 0320 	bic.w	r3, r3, #32
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	2310      	movs	r3, #16
 80042b0:	e7a6      	b.n	8004200 <_printf_i+0xf8>
 80042b2:	4824      	ldr	r0, [pc, #144]	; (8004344 <_printf_i+0x23c>)
 80042b4:	e7e4      	b.n	8004280 <_printf_i+0x178>
 80042b6:	4615      	mov	r5, r2
 80042b8:	e7bd      	b.n	8004236 <_printf_i+0x12e>
 80042ba:	682b      	ldr	r3, [r5, #0]
 80042bc:	6826      	ldr	r6, [r4, #0]
 80042be:	1d18      	adds	r0, r3, #4
 80042c0:	6961      	ldr	r1, [r4, #20]
 80042c2:	6028      	str	r0, [r5, #0]
 80042c4:	0635      	lsls	r5, r6, #24
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	d501      	bpl.n	80042ce <_printf_i+0x1c6>
 80042ca:	6019      	str	r1, [r3, #0]
 80042cc:	e002      	b.n	80042d4 <_printf_i+0x1cc>
 80042ce:	0670      	lsls	r0, r6, #25
 80042d0:	d5fb      	bpl.n	80042ca <_printf_i+0x1c2>
 80042d2:	8019      	strh	r1, [r3, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	4615      	mov	r5, r2
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	e7bc      	b.n	8004256 <_printf_i+0x14e>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	2100      	movs	r1, #0
 80042e0:	1d1a      	adds	r2, r3, #4
 80042e2:	602a      	str	r2, [r5, #0]
 80042e4:	681d      	ldr	r5, [r3, #0]
 80042e6:	6862      	ldr	r2, [r4, #4]
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 f859 	bl	80043a0 <memchr>
 80042ee:	b108      	cbz	r0, 80042f4 <_printf_i+0x1ec>
 80042f0:	1b40      	subs	r0, r0, r5
 80042f2:	6060      	str	r0, [r4, #4]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	2300      	movs	r3, #0
 80042fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fe:	e7aa      	b.n	8004256 <_printf_i+0x14e>
 8004300:	462a      	mov	r2, r5
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	47d0      	blx	sl
 800430a:	3001      	adds	r0, #1
 800430c:	d0ad      	beq.n	800426a <_printf_i+0x162>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	079b      	lsls	r3, r3, #30
 8004312:	d413      	bmi.n	800433c <_printf_i+0x234>
 8004314:	68e0      	ldr	r0, [r4, #12]
 8004316:	9b03      	ldr	r3, [sp, #12]
 8004318:	4298      	cmp	r0, r3
 800431a:	bfb8      	it	lt
 800431c:	4618      	movlt	r0, r3
 800431e:	e7a6      	b.n	800426e <_printf_i+0x166>
 8004320:	2301      	movs	r3, #1
 8004322:	4632      	mov	r2, r6
 8004324:	4649      	mov	r1, r9
 8004326:	4640      	mov	r0, r8
 8004328:	47d0      	blx	sl
 800432a:	3001      	adds	r0, #1
 800432c:	d09d      	beq.n	800426a <_printf_i+0x162>
 800432e:	3501      	adds	r5, #1
 8004330:	68e3      	ldr	r3, [r4, #12]
 8004332:	9903      	ldr	r1, [sp, #12]
 8004334:	1a5b      	subs	r3, r3, r1
 8004336:	42ab      	cmp	r3, r5
 8004338:	dcf2      	bgt.n	8004320 <_printf_i+0x218>
 800433a:	e7eb      	b.n	8004314 <_printf_i+0x20c>
 800433c:	2500      	movs	r5, #0
 800433e:	f104 0619 	add.w	r6, r4, #25
 8004342:	e7f5      	b.n	8004330 <_printf_i+0x228>
 8004344:	0800456f 	.word	0x0800456f
 8004348:	08004580 	.word	0x08004580

0800434c <memmove>:
 800434c:	4288      	cmp	r0, r1
 800434e:	b510      	push	{r4, lr}
 8004350:	eb01 0402 	add.w	r4, r1, r2
 8004354:	d902      	bls.n	800435c <memmove+0x10>
 8004356:	4284      	cmp	r4, r0
 8004358:	4623      	mov	r3, r4
 800435a:	d807      	bhi.n	800436c <memmove+0x20>
 800435c:	1e43      	subs	r3, r0, #1
 800435e:	42a1      	cmp	r1, r4
 8004360:	d008      	beq.n	8004374 <memmove+0x28>
 8004362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800436a:	e7f8      	b.n	800435e <memmove+0x12>
 800436c:	4601      	mov	r1, r0
 800436e:	4402      	add	r2, r0
 8004370:	428a      	cmp	r2, r1
 8004372:	d100      	bne.n	8004376 <memmove+0x2a>
 8004374:	bd10      	pop	{r4, pc}
 8004376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800437a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800437e:	e7f7      	b.n	8004370 <memmove+0x24>

08004380 <_sbrk_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	2300      	movs	r3, #0
 8004384:	4d05      	ldr	r5, [pc, #20]	; (800439c <_sbrk_r+0x1c>)
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	f7fd f966 	bl	800165c <_sbrk>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_sbrk_r+0x1a>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	b103      	cbz	r3, 800439a <_sbrk_r+0x1a>
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	200002e0 	.word	0x200002e0

080043a0 <memchr>:
 80043a0:	4603      	mov	r3, r0
 80043a2:	b510      	push	{r4, lr}
 80043a4:	b2c9      	uxtb	r1, r1
 80043a6:	4402      	add	r2, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	4618      	mov	r0, r3
 80043ac:	d101      	bne.n	80043b2 <memchr+0x12>
 80043ae:	2000      	movs	r0, #0
 80043b0:	e003      	b.n	80043ba <memchr+0x1a>
 80043b2:	7804      	ldrb	r4, [r0, #0]
 80043b4:	3301      	adds	r3, #1
 80043b6:	428c      	cmp	r4, r1
 80043b8:	d1f6      	bne.n	80043a8 <memchr+0x8>
 80043ba:	bd10      	pop	{r4, pc}

080043bc <memcpy>:
 80043bc:	440a      	add	r2, r1
 80043be:	4291      	cmp	r1, r2
 80043c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043c4:	d100      	bne.n	80043c8 <memcpy+0xc>
 80043c6:	4770      	bx	lr
 80043c8:	b510      	push	{r4, lr}
 80043ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ce:	4291      	cmp	r1, r2
 80043d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043d4:	d1f9      	bne.n	80043ca <memcpy+0xe>
 80043d6:	bd10      	pop	{r4, pc}

080043d8 <_realloc_r>:
 80043d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043dc:	4680      	mov	r8, r0
 80043de:	4614      	mov	r4, r2
 80043e0:	460e      	mov	r6, r1
 80043e2:	b921      	cbnz	r1, 80043ee <_realloc_r+0x16>
 80043e4:	4611      	mov	r1, r2
 80043e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ea:	f7ff bc37 	b.w	8003c5c <_malloc_r>
 80043ee:	b92a      	cbnz	r2, 80043fc <_realloc_r+0x24>
 80043f0:	f7ff fbcc 	bl	8003b8c <_free_r>
 80043f4:	4625      	mov	r5, r4
 80043f6:	4628      	mov	r0, r5
 80043f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043fc:	f000 f81b 	bl	8004436 <_malloc_usable_size_r>
 8004400:	4284      	cmp	r4, r0
 8004402:	4607      	mov	r7, r0
 8004404:	d802      	bhi.n	800440c <_realloc_r+0x34>
 8004406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800440a:	d812      	bhi.n	8004432 <_realloc_r+0x5a>
 800440c:	4621      	mov	r1, r4
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff fc24 	bl	8003c5c <_malloc_r>
 8004414:	4605      	mov	r5, r0
 8004416:	2800      	cmp	r0, #0
 8004418:	d0ed      	beq.n	80043f6 <_realloc_r+0x1e>
 800441a:	42bc      	cmp	r4, r7
 800441c:	4622      	mov	r2, r4
 800441e:	4631      	mov	r1, r6
 8004420:	bf28      	it	cs
 8004422:	463a      	movcs	r2, r7
 8004424:	f7ff ffca 	bl	80043bc <memcpy>
 8004428:	4631      	mov	r1, r6
 800442a:	4640      	mov	r0, r8
 800442c:	f7ff fbae 	bl	8003b8c <_free_r>
 8004430:	e7e1      	b.n	80043f6 <_realloc_r+0x1e>
 8004432:	4635      	mov	r5, r6
 8004434:	e7df      	b.n	80043f6 <_realloc_r+0x1e>

08004436 <_malloc_usable_size_r>:
 8004436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443a:	1f18      	subs	r0, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	bfbc      	itt	lt
 8004440:	580b      	ldrlt	r3, [r1, r0]
 8004442:	18c0      	addlt	r0, r0, r3
 8004444:	4770      	bx	lr
	...

08004448 <_init>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	bf00      	nop
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr

08004454 <_fini>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	bf00      	nop
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr
