
CONTROLE MOTOR DC_IHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d0  080027d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027d0  080027d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027d0  080027d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080027e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080027e4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007951  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015ff  00000000  00000000  000279c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  00028fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074b  00000000  00000000  00029940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e66  00000000  00000000  0002a08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a460  00000000  00000000  00040ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000856a2  00000000  00000000  0004b351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026b0  00000000  00000000  000d09f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000d30a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026c8 	.word	0x080026c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026c8 	.word	0x080026c8

0800014c <LCD_Cursor>:
 *  @return None
 *
 ******************************************************************************/

void LCD_Cursor(uint8_t x, uint8_t y)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if (x == 0)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d102      	bne.n	8000168 <LCD_Cursor+0x1c>
		temp = 0x80;
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e001      	b.n	800016c <LCD_Cursor+0x20>
	else
		temp = 0xC0;
 8000168:	23c0      	movs	r3, #192	; 0xc0
 800016a:	73fb      	strb	r3, [r7, #15]

	temp = temp + y;
 800016c:	7bfa      	ldrb	r2, [r7, #15]
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	4413      	add	r3, r2
 8000172:	73fb      	strb	r3, [r7, #15]

	LCD_Cmd(temp);
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	4618      	mov	r0, r3
 8000178:	f000 f8ae 	bl	80002d8 <LCD_Cmd>


}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <LCD_Data>:
*
*  @return  None
*
******************************************************************************/
void LCD_Data(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	RS_GPIO_Port->BSRR = RS_Pin;
 800018e:	4b45      	ldr	r3, [pc, #276]	; (80002a4 <LCD_Data+0x120>)
 8000190:	2208      	movs	r2, #8
 8000192:	611a      	str	r2, [r3, #16]
	if (data & 0x80)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	da04      	bge.n	80001a6 <LCD_Data+0x22>
		D7_GPIO_Port->BSRR = D7_Pin;
 800019c:	4b42      	ldr	r3, [pc, #264]	; (80002a8 <LCD_Data+0x124>)
 800019e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001a2:	611a      	str	r2, [r3, #16]
 80001a4:	e003      	b.n	80001ae <LCD_Data+0x2a>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 80001a6:	4b40      	ldr	r3, [pc, #256]	; (80002a8 <LCD_Data+0x124>)
 80001a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001ac:	611a      	str	r2, [r3, #16]
	if (data & 0x40)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <LCD_Data+0x3c>
		D6_GPIO_Port->BSRR = D6_Pin;
 80001b8:	4b3b      	ldr	r3, [pc, #236]	; (80002a8 <LCD_Data+0x124>)
 80001ba:	2208      	movs	r2, #8
 80001bc:	611a      	str	r2, [r3, #16]
 80001be:	e003      	b.n	80001c8 <LCD_Data+0x44>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 80001c0:	4b39      	ldr	r3, [pc, #228]	; (80002a8 <LCD_Data+0x124>)
 80001c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80001c6:	611a      	str	r2, [r3, #16]
	if (data & 0x20)
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	f003 0320 	and.w	r3, r3, #32
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d003      	beq.n	80001da <LCD_Data+0x56>
		D5_GPIO_Port->BSRR = D5_Pin;
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <LCD_Data+0x120>)
 80001d4:	2220      	movs	r2, #32
 80001d6:	611a      	str	r2, [r3, #16]
 80001d8:	e003      	b.n	80001e2 <LCD_Data+0x5e>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 80001da:	4b32      	ldr	r3, [pc, #200]	; (80002a4 <LCD_Data+0x120>)
 80001dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80001e0:	611a      	str	r2, [r3, #16]
	if (data & 0x10)
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f003 0310 	and.w	r3, r3, #16
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d003      	beq.n	80001f4 <LCD_Data+0x70>
		D4_GPIO_Port->BSRR = D4_Pin;
 80001ec:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <LCD_Data+0x120>)
 80001ee:	2210      	movs	r2, #16
 80001f0:	611a      	str	r2, [r3, #16]
 80001f2:	e003      	b.n	80001fc <LCD_Data+0x78>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 80001f4:	4b2b      	ldr	r3, [pc, #172]	; (80002a4 <LCD_Data+0x120>)
 80001f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001fa:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <LCD_Data+0x120>)
 80001fe:	2201      	movs	r2, #1
 8000200:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f000 fde2 	bl	8000dcc <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 8000208:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <LCD_Data+0x120>)
 800020a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800020e:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 fddb 	bl	8000dcc <HAL_Delay>

	if (data & 0x08)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 0308 	and.w	r3, r3, #8
 800021c:	2b00      	cmp	r3, #0
 800021e:	d004      	beq.n	800022a <LCD_Data+0xa6>
		D7_GPIO_Port->BSRR = D7_Pin;
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <LCD_Data+0x124>)
 8000222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	e003      	b.n	8000232 <LCD_Data+0xae>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <LCD_Data+0x124>)
 800022c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000230:	611a      	str	r2, [r3, #16]
	if (data & 0x04)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	2b00      	cmp	r3, #0
 800023a:	d003      	beq.n	8000244 <LCD_Data+0xc0>
		D6_GPIO_Port->BSRR = D6_Pin;
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <LCD_Data+0x124>)
 800023e:	2208      	movs	r2, #8
 8000240:	611a      	str	r2, [r3, #16]
 8000242:	e003      	b.n	800024c <LCD_Data+0xc8>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <LCD_Data+0x124>)
 8000246:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800024a:	611a      	str	r2, [r3, #16]
	if (data & 0x02)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <LCD_Data+0xda>
		D5_GPIO_Port->BSRR = D5_Pin;
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <LCD_Data+0x120>)
 8000258:	2220      	movs	r2, #32
 800025a:	611a      	str	r2, [r3, #16]
 800025c:	e003      	b.n	8000266 <LCD_Data+0xe2>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <LCD_Data+0x120>)
 8000260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000264:	611a      	str	r2, [r3, #16]
	if (data & 0x01)
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d003      	beq.n	8000278 <LCD_Data+0xf4>
		D4_GPIO_Port->BSRR = D4_Pin;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <LCD_Data+0x120>)
 8000272:	2210      	movs	r2, #16
 8000274:	611a      	str	r2, [r3, #16]
 8000276:	e003      	b.n	8000280 <LCD_Data+0xfc>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <LCD_Data+0x120>)
 800027a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800027e:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <LCD_Data+0x120>)
 8000282:	2201      	movs	r2, #1
 8000284:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f000 fda0 	bl	8000dcc <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <LCD_Data+0x120>)
 800028e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000292:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fd99 	bl	8000dcc <HAL_Delay>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40010c00 	.word	0x40010c00

080002ac <LCD_String>:
*
*  @param1 String to be sended.
*
******************************************************************************/
void LCD_String(char *string)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	while (*string)
 80002b4:	e007      	b.n	80002c6 <LCD_String+0x1a>
	{
		LCD_Data(*string);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff62 	bl	8000184 <LCD_Data>
		string++;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	while (*string)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1f3      	bne.n	80002b6 <LCD_String+0xa>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <LCD_Cmd>:
*
*  @return None.
*
******************************************************************************/
void LCD_Cmd(uint8_t cmd)  // Fun��o para enviar um comando para o Display
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2108      	movs	r1, #8
 80002e6:	4855      	ldr	r0, [pc, #340]	; (800043c <LCD_Cmd+0x164>)
 80002e8:	f001 f80b 	bl	8001302 <HAL_GPIO_WritePin>

	if (cmd & 0x80)
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da06      	bge.n	8000302 <LCD_Cmd+0x2a>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fa:	4851      	ldr	r0, [pc, #324]	; (8000440 <LCD_Cmd+0x168>)
 80002fc:	f001 f801 	bl	8001302 <HAL_GPIO_WritePin>
 8000300:	e005      	b.n	800030e <LCD_Cmd+0x36>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000308:	484d      	ldr	r0, [pc, #308]	; (8000440 <LCD_Cmd+0x168>)
 800030a:	f000 fffa 	bl	8001302 <HAL_GPIO_WritePin>
	if (cmd & 0x40)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000314:	2b00      	cmp	r3, #0
 8000316:	d005      	beq.n	8000324 <LCD_Cmd+0x4c>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2108      	movs	r1, #8
 800031c:	4848      	ldr	r0, [pc, #288]	; (8000440 <LCD_Cmd+0x168>)
 800031e:	f000 fff0 	bl	8001302 <HAL_GPIO_WritePin>
 8000322:	e004      	b.n	800032e <LCD_Cmd+0x56>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2108      	movs	r1, #8
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <LCD_Cmd+0x168>)
 800032a:	f000 ffea 	bl	8001302 <HAL_GPIO_WritePin>
	if (cmd & 0x20)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d005      	beq.n	8000344 <LCD_Cmd+0x6c>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	483f      	ldr	r0, [pc, #252]	; (800043c <LCD_Cmd+0x164>)
 800033e:	f000 ffe0 	bl	8001302 <HAL_GPIO_WritePin>
 8000342:	e004      	b.n	800034e <LCD_Cmd+0x76>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2120      	movs	r1, #32
 8000348:	483c      	ldr	r0, [pc, #240]	; (800043c <LCD_Cmd+0x164>)
 800034a:	f000 ffda 	bl	8001302 <HAL_GPIO_WritePin>
	if (cmd & 0x10)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	2b00      	cmp	r3, #0
 8000356:	d005      	beq.n	8000364 <LCD_Cmd+0x8c>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2110      	movs	r1, #16
 800035c:	4837      	ldr	r0, [pc, #220]	; (800043c <LCD_Cmd+0x164>)
 800035e:	f000 ffd0 	bl	8001302 <HAL_GPIO_WritePin>
 8000362:	e004      	b.n	800036e <LCD_Cmd+0x96>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4834      	ldr	r0, [pc, #208]	; (800043c <LCD_Cmd+0x164>)
 800036a:	f000 ffca 	bl	8001302 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2101      	movs	r1, #1
 8000372:	4832      	ldr	r0, [pc, #200]	; (800043c <LCD_Cmd+0x164>)
 8000374:	f000 ffc5 	bl	8001302 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000378:	2001      	movs	r0, #1
 800037a:	f000 fd27 	bl	8000dcc <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2101      	movs	r1, #1
 8000382:	482e      	ldr	r0, [pc, #184]	; (800043c <LCD_Cmd+0x164>)
 8000384:	f000 ffbd 	bl	8001302 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f000 fd1f 	bl	8000dcc <HAL_Delay>

	if (cmd & 0x08)
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	2b00      	cmp	r3, #0
 8000396:	d006      	beq.n	80003a6 <LCD_Cmd+0xce>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039e:	4828      	ldr	r0, [pc, #160]	; (8000440 <LCD_Cmd+0x168>)
 80003a0:	f000 ffaf 	bl	8001302 <HAL_GPIO_WritePin>
 80003a4:	e005      	b.n	80003b2 <LCD_Cmd+0xda>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4824      	ldr	r0, [pc, #144]	; (8000440 <LCD_Cmd+0x168>)
 80003ae:	f000 ffa8 	bl	8001302 <HAL_GPIO_WritePin>
	if (cmd & 0x04)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d005      	beq.n	80003c8 <LCD_Cmd+0xf0>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	481f      	ldr	r0, [pc, #124]	; (8000440 <LCD_Cmd+0x168>)
 80003c2:	f000 ff9e 	bl	8001302 <HAL_GPIO_WritePin>
 80003c6:	e004      	b.n	80003d2 <LCD_Cmd+0xfa>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2108      	movs	r1, #8
 80003cc:	481c      	ldr	r0, [pc, #112]	; (8000440 <LCD_Cmd+0x168>)
 80003ce:	f000 ff98 	bl	8001302 <HAL_GPIO_WritePin>
	if (cmd & 0x02)
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 0302 	and.w	r3, r3, #2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d005      	beq.n	80003e8 <LCD_Cmd+0x110>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	4816      	ldr	r0, [pc, #88]	; (800043c <LCD_Cmd+0x164>)
 80003e2:	f000 ff8e 	bl	8001302 <HAL_GPIO_WritePin>
 80003e6:	e004      	b.n	80003f2 <LCD_Cmd+0x11a>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2120      	movs	r1, #32
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <LCD_Cmd+0x164>)
 80003ee:	f000 ff88 	bl	8001302 <HAL_GPIO_WritePin>
	if (cmd & 0x01)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d005      	beq.n	8000408 <LCD_Cmd+0x130>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2110      	movs	r1, #16
 8000400:	480e      	ldr	r0, [pc, #56]	; (800043c <LCD_Cmd+0x164>)
 8000402:	f000 ff7e 	bl	8001302 <HAL_GPIO_WritePin>
 8000406:	e004      	b.n	8000412 <LCD_Cmd+0x13a>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2110      	movs	r1, #16
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LCD_Cmd+0x164>)
 800040e:	f000 ff78 	bl	8001302 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2101      	movs	r1, #1
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <LCD_Cmd+0x164>)
 8000418:	f000 ff73 	bl	8001302 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f000 fcd5 	bl	8000dcc <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2101      	movs	r1, #1
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <LCD_Cmd+0x164>)
 8000428:	f000 ff6b 	bl	8001302 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 fccd 	bl	8000dcc <HAL_Delay>

}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010800 	.word	0x40010800
 8000440:	40010c00 	.word	0x40010c00

08000444 <LCD_Clear>:
*
*  @return None.
*
******************************************************************************/
void LCD_Clear(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	LCD_Cmd(0x01);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff ff45 	bl	80002d8 <LCD_Cmd>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}

08000452 <LCD_Init>:
*
*  @return None.
*
******************************************************************************/
void LCD_Init(void)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0
	LCD_Cmd(0x33);
 8000456:	2033      	movs	r0, #51	; 0x33
 8000458:	f7ff ff3e 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x32);
 800045c:	2032      	movs	r0, #50	; 0x32
 800045e:	f7ff ff3b 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x28);
 8000462:	2028      	movs	r0, #40	; 0x28
 8000464:	f7ff ff38 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x06);
 8000468:	2006      	movs	r0, #6
 800046a:	f7ff ff35 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x0C);
 800046e:	200c      	movs	r0, #12
 8000470:	f7ff ff32 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x01);
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff2f 	bl	80002d8 <LCD_Cmd>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fc40 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 fa0a 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 fac4 	bl	8000a18 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000490:	f000 fa4c 	bl	800092c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000494:	2108      	movs	r1, #8
 8000496:	4859      	ldr	r0, [pc, #356]	; (80005fc <main+0x17c>)
 8000498:	f001 fbd2 	bl	8001c40 <HAL_TIM_PWM_Start>
  TIM2->CCR3 = 0;
 800049c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a0:	2200      	movs	r2, #0
 80004a2:	63da      	str	r2, [r3, #60]	; 0x3c
  LCD_Init();
 80004a4:	f7ff ffd5 	bl	8000452 <LCD_Init>
  LCD_Cursor(0,2);
 80004a8:	2102      	movs	r1, #2
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff fe4e 	bl	800014c <LCD_Cursor>
  LCD_String("DC MOTOR SYS" );
 80004b0:	4853      	ldr	r0, [pc, #332]	; (8000600 <main+0x180>)
 80004b2:	f7ff fefb 	bl	80002ac <LCD_String>
  LCD_Cursor(1,2);
 80004b6:	2102      	movs	r1, #2
 80004b8:	2001      	movs	r0, #1
 80004ba:	f7ff fe47 	bl	800014c <LCD_Cursor>
  LCD_String("VERSION: 1.0" );
 80004be:	4851      	ldr	r0, [pc, #324]	; (8000604 <main+0x184>)
 80004c0:	f7ff fef4 	bl	80002ac <LCD_String>
  HAL_Delay(3000);
 80004c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004c8:	f000 fc80 	bl	8000dcc <HAL_Delay>

  LCD_Cursor(0,2);
 80004cc:	2102      	movs	r1, #2
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fe3c 	bl	800014c <LCD_Cursor>
  LCD_String("DC MOTOR SYS");
 80004d4:	484a      	ldr	r0, [pc, #296]	; (8000600 <main+0x180>)
 80004d6:	f7ff fee9 	bl	80002ac <LCD_String>
  LCD_Cursor(1,0);
 80004da:	2100      	movs	r1, #0
 80004dc:	2001      	movs	r0, #1
 80004de:	f7ff fe35 	bl	800014c <LCD_Cursor>
  LCD_String("     START     >");
 80004e2:	4849      	ldr	r0, [pc, #292]	; (8000608 <main+0x188>)
 80004e4:	f7ff fee2 	bl	80002ac <LCD_String>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
		if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin))
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	4848      	ldr	r0, [pc, #288]	; (800060c <main+0x18c>)
 80004ec:	f000 fef2 	bl	80012d4 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d026      	beq.n	8000544 <main+0xc4>
		{
			HAL_Delay(10);
 80004f6:	200a      	movs	r0, #10
 80004f8:	f000 fc68 	bl	8000dcc <HAL_Delay>
			while (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin));
 80004fc:	bf00      	nop
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	4842      	ldr	r0, [pc, #264]	; (800060c <main+0x18c>)
 8000502:	f000 fee7 	bl	80012d4 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1f8      	bne.n	80004fe <main+0x7e>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2102      	movs	r1, #2
 8000510:	483f      	ldr	r0, [pc, #252]	; (8000610 <main+0x190>)
 8000512:	f000 fef6 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8000516:	2032      	movs	r0, #50	; 0x32
 8000518:	f000 fc58 	bl	8000dcc <HAL_Delay>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2102      	movs	r1, #2
 8000520:	483b      	ldr	r0, [pc, #236]	; (8000610 <main+0x190>)
 8000522:	f000 feee 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8000526:	2032      	movs	r0, #50	; 0x32
 8000528:	f000 fc50 	bl	8000dcc <HAL_Delay>
			LCD_Clear();
 800052c:	f7ff ff8a 	bl	8000444 <LCD_Clear>
			aux_menu = 0;
 8000530:	4b38      	ldr	r3, [pc, #224]	; (8000614 <main+0x194>)
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
			start = 1;
 8000536:	4b38      	ldr	r3, [pc, #224]	; (8000618 <main+0x198>)
 8000538:	2201      	movs	r2, #1
 800053a:	601a      	str	r2, [r3, #0]
			menu = 0;
 800053c:	4b37      	ldr	r3, [pc, #220]	; (800061c <main+0x19c>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	e011      	b.n	8000568 <main+0xe8>
		}
		else if (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin) && start == 1)
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4830      	ldr	r0, [pc, #192]	; (800060c <main+0x18c>)
 800054a:	f000 fec3 	bl	80012d4 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d009      	beq.n	8000568 <main+0xe8>
 8000554:	4b30      	ldr	r3, [pc, #192]	; (8000618 <main+0x198>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d105      	bne.n	8000568 <main+0xe8>
		{
			aux_menu = 0;
 800055c:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <main+0x194>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
			aux_start = 1;
 8000562:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <main+0x1a0>)
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
		}

		if ((aux_start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000568:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <main+0x1a0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d12b      	bne.n	80005c8 <main+0x148>
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	4825      	ldr	r0, [pc, #148]	; (800060c <main+0x18c>)
 8000576:	f000 fead 	bl	80012d4 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d023      	beq.n	80005c8 <main+0x148>
		{
			HAL_Delay(10);
 8000580:	200a      	movs	r0, #10
 8000582:	f000 fc23 	bl	8000dcc <HAL_Delay>
			while (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin));
 8000586:	bf00      	nop
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	481f      	ldr	r0, [pc, #124]	; (800060c <main+0x18c>)
 800058e:	f000 fea1 	bl	80012d4 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f7      	bne.n	8000588 <main+0x108>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2102      	movs	r1, #2
 800059c:	481c      	ldr	r0, [pc, #112]	; (8000610 <main+0x190>)
 800059e:	f000 feb0 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80005a2:	2032      	movs	r0, #50	; 0x32
 80005a4:	f000 fc12 	bl	8000dcc <HAL_Delay>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2102      	movs	r1, #2
 80005ac:	4818      	ldr	r0, [pc, #96]	; (8000610 <main+0x190>)
 80005ae:	f000 fea8 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80005b2:	2032      	movs	r0, #50	; 0x32
 80005b4:	f000 fc0a 	bl	8000dcc <HAL_Delay>
			LCD_Clear();
 80005b8:	f7ff ff44 	bl	8000444 <LCD_Clear>
			start = 2;
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <main+0x198>)
 80005be:	2202      	movs	r2, #2
 80005c0:	601a      	str	r2, [r3, #0]
			menu = 0;
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0x19c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
		}

		switch (start)
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0x198>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d002      	beq.n	80005d6 <main+0x156>
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d027      	beq.n	8000624 <main+0x1a4>
 80005d4:	e074      	b.n	80006c0 <main+0x240>
		{
		case 1:
			LCD_Cursor(0, 2);
 80005d6:	2102      	movs	r1, #2
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff fdb7 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <main+0x180>)
 80005e0:	f7ff fe64 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 80005e4:	2100      	movs	r1, #0
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff fdb0 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <main+0x188>)
 80005ee:	f7ff fe5d 	bl	80002ac <LCD_String>
			aux_start = 1;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <main+0x1a0>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
			break;
 80005f8:	e062      	b.n	80006c0 <main+0x240>
 80005fa:	bf00      	nop
 80005fc:	20000028 	.word	0x20000028
 8000600:	080026e0 	.word	0x080026e0
 8000604:	080026f0 	.word	0x080026f0
 8000608:	08002700 	.word	0x08002700
 800060c:	40010c00 	.word	0x40010c00
 8000610:	40010800 	.word	0x40010800
 8000614:	20000078 	.word	0x20000078
 8000618:	20000074 	.word	0x20000074
 800061c:	20000070 	.word	0x20000070
 8000620:	2000007c 	.word	0x2000007c

		case 2:

			aux_menu = 0;
 8000624:	4b8a      	ldr	r3, [pc, #552]	; (8000850 <main+0x3d0>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
			accel_set = 1;
 800062a:	4b8a      	ldr	r3, [pc, #552]	; (8000854 <main+0x3d4>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
			LCD_Cursor(0, 0);
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fd8a 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    ACCEL");
 8000638:	4887      	ldr	r0, [pc, #540]	; (8000858 <main+0x3d8>)
 800063a:	f7ff fe37 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 800063e:	2100      	movs	r1, #0
 8000640:	2001      	movs	r0, #1
 8000642:	f7ff fd83 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000  t:10s");
 8000646:	4885      	ldr	r0, [pc, #532]	; (800085c <main+0x3dc>)
 8000648:	f7ff fe30 	bl	80002ac <LCD_String>
			HAL_Delay(10000);
 800064c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000650:	f000 fbbc 	bl	8000dcc <HAL_Delay>
			LCD_Clear();
 8000654:	f7ff fef6 	bl	8000444 <LCD_Clear>

			accel_set = 0;
 8000658:	4b7e      	ldr	r3, [pc, #504]	; (8000854 <main+0x3d4>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
			running_set = 1;
 800065e:	4b80      	ldr	r3, [pc, #512]	; (8000860 <main+0x3e0>)
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
			LCD_Cursor(0, 0);
 8000664:	2100      	movs	r1, #0
 8000666:	2000      	movs	r0, #0
 8000668:	f7ff fd70 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:  RUNNING");
 800066c:	487d      	ldr	r0, [pc, #500]	; (8000864 <main+0x3e4>)
 800066e:	f7ff fe1d 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000672:	2100      	movs	r1, #0
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff fd69 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000 t:120s");
 800067a:	487b      	ldr	r0, [pc, #492]	; (8000868 <main+0x3e8>)
 800067c:	f7ff fe16 	bl	80002ac <LCD_String>
			HAL_Delay(120000);
 8000680:	487a      	ldr	r0, [pc, #488]	; (800086c <main+0x3ec>)
 8000682:	f000 fba3 	bl	8000dcc <HAL_Delay>
			LCD_Clear();
 8000686:	f7ff fedd 	bl	8000444 <LCD_Clear>

			LCD_Cursor(0, 0);
 800068a:	2100      	movs	r1, #0
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff fd5d 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    DECEL");
 8000692:	4877      	ldr	r0, [pc, #476]	; (8000870 <main+0x3f0>)
 8000694:	f7ff fe0a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000698:	2100      	movs	r1, #0
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff fd56 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000  t:10s");
 80006a0:	486e      	ldr	r0, [pc, #440]	; (800085c <main+0x3dc>)
 80006a2:	f7ff fe03 	bl	80002ac <LCD_String>
			HAL_Delay(10000);
 80006a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80006aa:	f000 fb8f 	bl	8000dcc <HAL_Delay>
			LCD_Clear();
 80006ae:	f7ff fec9 	bl	8000444 <LCD_Clear>
			start = 1;
 80006b2:	4b70      	ldr	r3, [pc, #448]	; (8000874 <main+0x3f4>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
			menu = 0;
 80006b8:	4b6f      	ldr	r3, [pc, #444]	; (8000878 <main+0x3f8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
			break;
 80006be:	bf00      	nop
		}

		if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin))
 80006c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c4:	486d      	ldr	r0, [pc, #436]	; (800087c <main+0x3fc>)
 80006c6:	f000 fe05 	bl	80012d4 <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d023      	beq.n	8000718 <main+0x298>
		{
			HAL_Delay(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f000 fb7b 	bl	8000dcc <HAL_Delay>
			while (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin));
 80006d6:	bf00      	nop
 80006d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006dc:	4867      	ldr	r0, [pc, #412]	; (800087c <main+0x3fc>)
 80006de:	f000 fdf9 	bl	80012d4 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f7      	bne.n	80006d8 <main+0x258>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2102      	movs	r1, #2
 80006ec:	4864      	ldr	r0, [pc, #400]	; (8000880 <main+0x400>)
 80006ee:	f000 fe08 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80006f2:	2032      	movs	r0, #50	; 0x32
 80006f4:	f000 fb6a 	bl	8000dcc <HAL_Delay>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2102      	movs	r1, #2
 80006fc:	4860      	ldr	r0, [pc, #384]	; (8000880 <main+0x400>)
 80006fe:	f000 fe00 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8000702:	2032      	movs	r0, #50	; 0x32
 8000704:	f000 fb62 	bl	8000dcc <HAL_Delay>
			LCD_Clear();
 8000708:	f7ff fe9c 	bl	8000444 <LCD_Clear>
			menu = 1;
 800070c:	4b5a      	ldr	r3, [pc, #360]	; (8000878 <main+0x3f8>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
			start = 0;
 8000712:	4b58      	ldr	r3, [pc, #352]	; (8000874 <main+0x3f4>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
		}

		if ((aux_menu == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000718:	4b4d      	ldr	r3, [pc, #308]	; (8000850 <main+0x3d0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d12b      	bne.n	8000778 <main+0x2f8>
 8000720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000724:	4855      	ldr	r0, [pc, #340]	; (800087c <main+0x3fc>)
 8000726:	f000 fdd5 	bl	80012d4 <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d023      	beq.n	8000778 <main+0x2f8>
		{
			aux_start = 0;
 8000730:	4b54      	ldr	r3, [pc, #336]	; (8000884 <main+0x404>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
			HAL_Delay(10);
 8000736:	200a      	movs	r0, #10
 8000738:	f000 fb48 	bl	8000dcc <HAL_Delay>
			while (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin));
 800073c:	bf00      	nop
 800073e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000742:	484e      	ldr	r0, [pc, #312]	; (800087c <main+0x3fc>)
 8000744:	f000 fdc6 	bl	80012d4 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f7      	bne.n	800073e <main+0x2be>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2102      	movs	r1, #2
 8000752:	484b      	ldr	r0, [pc, #300]	; (8000880 <main+0x400>)
 8000754:	f000 fdd5 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8000758:	2032      	movs	r0, #50	; 0x32
 800075a:	f000 fb37 	bl	8000dcc <HAL_Delay>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2102      	movs	r1, #2
 8000762:	4847      	ldr	r0, [pc, #284]	; (8000880 <main+0x400>)
 8000764:	f000 fdcd 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8000768:	2032      	movs	r0, #50	; 0x32
 800076a:	f000 fb2f 	bl	8000dcc <HAL_Delay>
			LCD_Clear();
 800076e:	f7ff fe69 	bl	8000444 <LCD_Clear>
			menu = 2;
 8000772:	4b41      	ldr	r3, [pc, #260]	; (8000878 <main+0x3f8>)
 8000774:	2202      	movs	r2, #2
 8000776:	601a      	str	r2, [r3, #0]
		}

		if ((accel_time == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin)))
 8000778:	4b43      	ldr	r3, [pc, #268]	; (8000888 <main+0x408>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d135      	bne.n	80007ec <main+0x36c>
 8000780:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000784:	483d      	ldr	r0, [pc, #244]	; (800087c <main+0x3fc>)
 8000786:	f000 fda5 	bl	80012d4 <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d02d      	beq.n	80007ec <main+0x36c>
		{
			HAL_Delay(10);
 8000790:	200a      	movs	r0, #10
 8000792:	f000 fb1b 	bl	8000dcc <HAL_Delay>
			while (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin));
 8000796:	bf00      	nop
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	4837      	ldr	r0, [pc, #220]	; (800087c <main+0x3fc>)
 800079e:	f000 fd99 	bl	80012d4 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f7      	bne.n	8000798 <main+0x318>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2102      	movs	r1, #2
 80007ac:	4834      	ldr	r0, [pc, #208]	; (8000880 <main+0x400>)
 80007ae:	f000 fda8 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80007b2:	2032      	movs	r0, #50	; 0x32
 80007b4:	f000 fb0a 	bl	8000dcc <HAL_Delay>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2102      	movs	r1, #2
 80007bc:	4830      	ldr	r0, [pc, #192]	; (8000880 <main+0x400>)
 80007be:	f000 fda0 	bl	8001302 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f000 fb02 	bl	8000dcc <HAL_Delay>

			for (a_inc = 5; a_inc <= 80; a_inc += 5)
 80007c8:	4b30      	ldr	r3, [pc, #192]	; (800088c <main+0x40c>)
 80007ca:	2205      	movs	r2, #5
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	e009      	b.n	80007e4 <main+0x364>
			{
				a_inc += 5;
 80007d0:	4b2e      	ldr	r3, [pc, #184]	; (800088c <main+0x40c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3305      	adds	r3, #5
 80007d6:	4a2d      	ldr	r2, [pc, #180]	; (800088c <main+0x40c>)
 80007d8:	6013      	str	r3, [r2, #0]
			for (a_inc = 5; a_inc <= 80; a_inc += 5)
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <main+0x40c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3305      	adds	r3, #5
 80007e0:	4a2a      	ldr	r2, [pc, #168]	; (800088c <main+0x40c>)
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <main+0x40c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b50      	cmp	r3, #80	; 0x50
 80007ea:	ddf1      	ble.n	80007d0 <main+0x350>
			}
		}

		switch(menu)
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <main+0x3f8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d002      	beq.n	80007fa <main+0x37a>
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d018      	beq.n	800082a <main+0x3aa>
 80007f8:	e029      	b.n	800084e <main+0x3ce>
		{
		case 1:
			LCD_Cursor(0, 2);
 80007fa:	2102      	movs	r1, #2
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fca5 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000802:	4823      	ldr	r0, [pc, #140]	; (8000890 <main+0x410>)
 8000804:	f7ff fd52 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000808:	2100      	movs	r1, #0
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fc9e 	bl	800014c <LCD_Cursor>
			LCD_String("<     MENU     ");
 8000810:	4820      	ldr	r0, [pc, #128]	; (8000894 <main+0x414>)
 8000812:	f7ff fd4b 	bl	80002ac <LCD_String>
			aux_menu = 1;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <main+0x3d0>)
 8000818:	2201      	movs	r2, #1
 800081a:	601a      	str	r2, [r3, #0]
			aux_start = 0;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <main+0x404>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
			start = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <main+0x3f4>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
			break;
 8000828:	e011      	b.n	800084e <main+0x3ce>

		case 2:
			LCD_Cursor(0, 0);
 800082a:	2100      	movs	r1, #0
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fc8d 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 8000832:	4819      	ldr	r0, [pc, #100]	; (8000898 <main+0x418>)
 8000834:	f7ff fd3a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000838:	2100      	movs	r1, #0
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fc86 	bl	800014c <LCD_Cursor>
			LCD_String("        s      ");
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <main+0x41c>)
 8000842:	f7ff fd33 	bl	80002ac <LCD_String>
			accel_time = 1;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <main+0x408>)
 8000848:	2201      	movs	r2, #1
 800084a:	601a      	str	r2, [r3, #0]
			break;
 800084c:	bf00      	nop
		if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin))
 800084e:	e64b      	b.n	80004e8 <main+0x68>
 8000850:	20000078 	.word	0x20000078
 8000854:	20000088 	.word	0x20000088
 8000858:	08002714 	.word	0x08002714
 800085c:	08002728 	.word	0x08002728
 8000860:	2000008c 	.word	0x2000008c
 8000864:	0800273c 	.word	0x0800273c
 8000868:	08002750 	.word	0x08002750
 800086c:	0001d4c0 	.word	0x0001d4c0
 8000870:	08002764 	.word	0x08002764
 8000874:	20000074 	.word	0x20000074
 8000878:	20000070 	.word	0x20000070
 800087c:	40010c00 	.word	0x40010c00
 8000880:	40010800 	.word	0x40010800
 8000884:	2000007c 	.word	0x2000007c
 8000888:	20000080 	.word	0x20000080
 800088c:	20000084 	.word	0x20000084
 8000890:	080026e0 	.word	0x080026e0
 8000894:	08002778 	.word	0x08002778
 8000898:	08002788 	.word	0x08002788
 800089c:	0800279c 	.word	0x0800279c

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2228      	movs	r2, #40	; 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fede 	bl	8002670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fd23 	bl	8001334 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008f4:	f000 f930 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2102      	movs	r1, #2
 8000912:	4618      	mov	r0, r3
 8000914:	f000 ff90 	bl	8001838 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800091e:	f000 f91b 	bl	8000b58 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3740      	adds	r7, #64	; 0x40
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	; 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <MX_TIM2_Init+0xe8>)
 800095e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000962:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <MX_TIM2_Init+0xe8>)
 8000966:	2247      	movs	r2, #71	; 0x47
 8000968:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <MX_TIM2_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <MX_TIM2_Init+0xe8>)
 8000972:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000976:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_TIM2_Init+0xe8>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <MX_TIM2_Init+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000984:	4823      	ldr	r0, [pc, #140]	; (8000a14 <MX_TIM2_Init+0xe8>)
 8000986:	f001 f8b3 	bl	8001af0 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000990:	f000 f8e2 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800099a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099e:	4619      	mov	r1, r3
 80009a0:	481c      	ldr	r0, [pc, #112]	; (8000a14 <MX_TIM2_Init+0xe8>)
 80009a2:	f001 faab 	bl	8001efc <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009ac:	f000 f8d4 	bl	8000b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009b0:	4818      	ldr	r0, [pc, #96]	; (8000a14 <MX_TIM2_Init+0xe8>)
 80009b2:	f001 f8ec 	bl	8001b8e <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009bc:	f000 f8cc 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	4619      	mov	r1, r3
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_TIM2_Init+0xe8>)
 80009d0:	f001 fdf6 	bl	80025c0 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009da:	f000 f8bd 	bl	8000b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	; 0x60
 80009e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80009ea:	2304      	movs	r3, #4
 80009ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2208      	movs	r2, #8
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <MX_TIM2_Init+0xe8>)
 80009f6:	f001 f9bf 	bl	8001d78 <HAL_TIM_PWM_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a00:	f000 f8aa 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <MX_TIM2_Init+0xe8>)
 8000a06:	f000 f8fb 	bl	8000c00 <HAL_TIM_MspPostInit>

}
 8000a0a:	bf00      	nop
 8000a0c:	3738      	adds	r7, #56	; 0x38
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000028 	.word	0x20000028

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2c:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a44      	ldr	r2, [pc, #272]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a44:	4b3f      	ldr	r3, [pc, #252]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a3e      	ldr	r2, [pc, #248]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a4a:	f043 0320 	orr.w	r3, r3, #32
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0320 	and.w	r3, r3, #32
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a38      	ldr	r2, [pc, #224]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <MX_GPIO_Init+0x12c>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a92:	482d      	ldr	r0, [pc, #180]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a94:	f000 fc35 	bl	8001302 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 8000a98:	2200      	movs	r2, #0
 8000a9a:	213b      	movs	r1, #59	; 0x3b
 8000a9c:	482b      	ldr	r0, [pc, #172]	; (8000b4c <MX_GPIO_Init+0x134>)
 8000a9e:	f000 fc30 	bl	8001302 <HAL_GPIO_WritePin>
                          |D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f241 0108 	movw	r1, #4104	; 0x1008
 8000aa8:	4829      	ldr	r0, [pc, #164]	; (8000b50 <MX_GPIO_Init+0x138>)
 8000aaa:	f000 fc2a 	bl	8001302 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4820      	ldr	r0, [pc, #128]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000ac8:	f000 fa88 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin BUZZER_Pin RS_Pin D4_Pin
                           D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 8000acc:	233b      	movs	r3, #59	; 0x3b
 8000ace:	613b      	str	r3, [r7, #16]
                          |D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481a      	ldr	r0, [pc, #104]	; (8000b4c <MX_GPIO_Init+0x134>)
 8000ae4:	f000 fa7a 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin;
 8000ae8:	f241 0308 	movw	r3, #4104	; 0x1008
 8000aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	4619      	mov	r1, r3
 8000b00:	4813      	ldr	r0, [pc, #76]	; (8000b50 <MX_GPIO_Init+0x138>)
 8000b02:	f000 fa6b 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : TACHOMETER_Pin */
  GPIO_InitStruct.Pin = TACHOMETER_Pin;
 8000b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TACHOMETER_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_GPIO_Init+0x138>)
 8000b1c:	f000 fa5e 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : DEC_Pin ENTER_Pin INC_Pin */
  GPIO_InitStruct.Pin = DEC_Pin|ENTER_Pin|INC_Pin;
 8000b20:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4619      	mov	r1, r3
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <MX_GPIO_Init+0x138>)
 8000b36:	f000 fa51 	bl	8000fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00
 8000b54:	10110000 	.word	0x10110000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	61d3      	str	r3, [r2, #28]
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_MspInit+0x60>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_MspInit+0x60>)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_TIM_Base_MspInit+0x34>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_TIM_Base_MspInit+0x34>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_TIM_Base_MspInit+0x34>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c1e:	d117      	bne.n	8000c50 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_TIM_MspPostInit+0x58>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <HAL_TIM_MspPostInit+0x58>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_TIM_MspPostInit+0x58>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_Pin;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <HAL_TIM_MspPostInit+0x5c>)
 8000c4c:	f000 f9c6 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010800 	.word	0x40010800

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca6:	f000 f875 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}

08000cae <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
	...

08000cbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff fff7 	bl	8000cae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cc2:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd8:	4c09      	ldr	r4, [pc, #36]	; (8000d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f001 fccb 	bl	8002680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cea:	f7ff fbc9 	bl	8000480 <main>
  bx lr
 8000cee:	4770      	bx	lr
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf8:	080027d8 	.word	0x080027d8
  ldr r2, =_sbss
 8000cfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d00:	20000094 	.word	0x20000094

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_Init+0x28>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_Init+0x28>)
 8000d12:	f043 0310 	orr.w	r3, r3, #16
 8000d16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f92b 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f000 f808 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff ff1e 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40022000 	.word	0x40022000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f935 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f90b 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_IncTick+0x1c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_IncTick+0x20>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <HAL_IncTick+0x20>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000090 	.word	0x20000090

08000db8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <HAL_GetTick+0x10>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	20000090 	.word	0x20000090

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff fff0 	bl	8000db8 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d005      	beq.n	8000df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_Delay+0x44>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df2:	bf00      	nop
 8000df4:	f7ff ffe0 	bl	8000db8 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d8f7      	bhi.n	8000df4 <HAL_Delay+0x28>
  {
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff90 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff49 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5e 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff90 	bl	8000ecc <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b08b      	sub	sp, #44	; 0x2c
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e161      	b.n	80012b4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8150 	bne.w	80012ae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4a97      	ldr	r2, [pc, #604]	; (8001270 <HAL_GPIO_Init+0x294>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d05e      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001018:	4a95      	ldr	r2, [pc, #596]	; (8001270 <HAL_GPIO_Init+0x294>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d875      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 800101e:	4a95      	ldr	r2, [pc, #596]	; (8001274 <HAL_GPIO_Init+0x298>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d058      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001024:	4a93      	ldr	r2, [pc, #588]	; (8001274 <HAL_GPIO_Init+0x298>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d86f      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 800102a:	4a93      	ldr	r2, [pc, #588]	; (8001278 <HAL_GPIO_Init+0x29c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d052      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001030:	4a91      	ldr	r2, [pc, #580]	; (8001278 <HAL_GPIO_Init+0x29c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d869      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 8001036:	4a91      	ldr	r2, [pc, #580]	; (800127c <HAL_GPIO_Init+0x2a0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d04c      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 800103c:	4a8f      	ldr	r2, [pc, #572]	; (800127c <HAL_GPIO_Init+0x2a0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d863      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 8001042:	4a8f      	ldr	r2, [pc, #572]	; (8001280 <HAL_GPIO_Init+0x2a4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d046      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
 8001048:	4a8d      	ldr	r2, [pc, #564]	; (8001280 <HAL_GPIO_Init+0x2a4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d85d      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 800104e:	2b12      	cmp	r3, #18
 8001050:	d82a      	bhi.n	80010a8 <HAL_GPIO_Init+0xcc>
 8001052:	2b12      	cmp	r3, #18
 8001054:	d859      	bhi.n	800110a <HAL_GPIO_Init+0x12e>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <HAL_GPIO_Init+0x80>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	080010d7 	.word	0x080010d7
 8001060:	080010b1 	.word	0x080010b1
 8001064:	080010c3 	.word	0x080010c3
 8001068:	08001105 	.word	0x08001105
 800106c:	0800110b 	.word	0x0800110b
 8001070:	0800110b 	.word	0x0800110b
 8001074:	0800110b 	.word	0x0800110b
 8001078:	0800110b 	.word	0x0800110b
 800107c:	0800110b 	.word	0x0800110b
 8001080:	0800110b 	.word	0x0800110b
 8001084:	0800110b 	.word	0x0800110b
 8001088:	0800110b 	.word	0x0800110b
 800108c:	0800110b 	.word	0x0800110b
 8001090:	0800110b 	.word	0x0800110b
 8001094:	0800110b 	.word	0x0800110b
 8001098:	0800110b 	.word	0x0800110b
 800109c:	0800110b 	.word	0x0800110b
 80010a0:	080010b9 	.word	0x080010b9
 80010a4:	080010cd 	.word	0x080010cd
 80010a8:	4a76      	ldr	r2, [pc, #472]	; (8001284 <HAL_GPIO_Init+0x2a8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ae:	e02c      	b.n	800110a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e029      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	3304      	adds	r3, #4
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e024      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	3308      	adds	r3, #8
 80010c8:	623b      	str	r3, [r7, #32]
          break;
 80010ca:	e01f      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	330c      	adds	r3, #12
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e01a      	b.n	800110c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010de:	2304      	movs	r3, #4
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e013      	b.n	800110c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ec:	2308      	movs	r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	611a      	str	r2, [r3, #16]
          break;
 80010f6:	e009      	b.n	800110c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f8:	2308      	movs	r3, #8
 80010fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	615a      	str	r2, [r3, #20]
          break;
 8001102:	e003      	b.n	800110c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x130>
          break;
 800110a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	2bff      	cmp	r3, #255	; 0xff
 8001110:	d801      	bhi.n	8001116 <HAL_GPIO_Init+0x13a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	e001      	b.n	800111a <HAL_GPIO_Init+0x13e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3304      	adds	r3, #4
 800111a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2bff      	cmp	r3, #255	; 0xff
 8001120:	d802      	bhi.n	8001128 <HAL_GPIO_Init+0x14c>
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	e002      	b.n	800112e <HAL_GPIO_Init+0x152>
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	3b08      	subs	r3, #8
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	210f      	movs	r1, #15
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	6a39      	ldr	r1, [r7, #32]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	431a      	orrs	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 80a9 	beq.w	80012ae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800115c:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <HAL_GPIO_Init+0x2ac>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a49      	ldr	r2, [pc, #292]	; (8001288 <HAL_GPIO_Init+0x2ac>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b47      	ldr	r3, [pc, #284]	; (8001288 <HAL_GPIO_Init+0x2ac>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001174:	4a45      	ldr	r2, [pc, #276]	; (800128c <HAL_GPIO_Init+0x2b0>)
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a3d      	ldr	r2, [pc, #244]	; (8001290 <HAL_GPIO_Init+0x2b4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d00d      	beq.n	80011bc <HAL_GPIO_Init+0x1e0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d007      	beq.n	80011b8 <HAL_GPIO_Init+0x1dc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a3b      	ldr	r2, [pc, #236]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d101      	bne.n	80011b4 <HAL_GPIO_Init+0x1d8>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e004      	b.n	80011be <HAL_GPIO_Init+0x1e2>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e002      	b.n	80011be <HAL_GPIO_Init+0x1e2>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <HAL_GPIO_Init+0x1e2>
 80011bc:	2300      	movs	r3, #0
 80011be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c0:	f002 0203 	and.w	r2, r2, #3
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4093      	lsls	r3, r2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ce:	492f      	ldr	r1, [pc, #188]	; (800128c <HAL_GPIO_Init+0x2b0>)
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <HAL_GPIO_Init+0x2c0>)
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	492b      	ldr	r1, [pc, #172]	; (800129c <HAL_GPIO_Init+0x2c0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011f6:	4b29      	ldr	r3, [pc, #164]	; (800129c <HAL_GPIO_Init+0x2c0>)
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4927      	ldr	r1, [pc, #156]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001200:	4013      	ands	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	4921      	ldr	r1, [pc, #132]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	60cb      	str	r3, [r1, #12]
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	43db      	mvns	r3, r3
 8001226:	491d      	ldr	r1, [pc, #116]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001228:	4013      	ands	r3, r2
 800122a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_GPIO_Init+0x2c0>)
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4917      	ldr	r1, [pc, #92]	; (800129c <HAL_GPIO_Init+0x2c0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	43db      	mvns	r3, r3
 800124e:	4913      	ldr	r1, [pc, #76]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001250:	4013      	ands	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d01f      	beq.n	80012a0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	490d      	ldr	r1, [pc, #52]	; (800129c <HAL_GPIO_Init+0x2c0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e01f      	b.n	80012ae <HAL_GPIO_Init+0x2d2>
 800126e:	bf00      	nop
 8001270:	10320000 	.word	0x10320000
 8001274:	10310000 	.word	0x10310000
 8001278:	10220000 	.word	0x10220000
 800127c:	10210000 	.word	0x10210000
 8001280:	10120000 	.word	0x10120000
 8001284:	10110000 	.word	0x10110000
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	40010800 	.word	0x40010800
 8001294:	40010c00 	.word	0x40010c00
 8001298:	40011000 	.word	0x40011000
 800129c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_GPIO_Init+0x2f4>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	4909      	ldr	r1, [pc, #36]	; (80012d0 <HAL_GPIO_Init+0x2f4>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	3301      	adds	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f47f ae96 	bne.w	8000ff0 <HAL_GPIO_Init+0x14>
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	372c      	adds	r7, #44	; 0x2c
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40010400 	.word	0x40010400

080012d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e001      	b.n	80012f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	807b      	strh	r3, [r7, #2]
 800130e:	4613      	mov	r3, r2
 8001310:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001312:	787b      	ldrb	r3, [r7, #1]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001318:	887a      	ldrh	r2, [r7, #2]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800131e:	e003      	b.n	8001328 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	041a      	lsls	r2, r3, #16
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	611a      	str	r2, [r3, #16]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
	...

08001334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e272      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8087 	beq.w	8001462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001354:	4b92      	ldr	r3, [pc, #584]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b04      	cmp	r3, #4
 800135e:	d00c      	beq.n	800137a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001360:	4b8f      	ldr	r3, [pc, #572]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d112      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
 800136c:	4b8c      	ldr	r3, [pc, #560]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001378:	d10b      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137a:	4b89      	ldr	r3, [pc, #548]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d06c      	beq.n	8001460 <HAL_RCC_OscConfig+0x12c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d168      	bne.n	8001460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e24c      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x76>
 800139c:	4b80      	ldr	r3, [pc, #512]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a7f      	ldr	r2, [pc, #508]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e02e      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b7b      	ldr	r3, [pc, #492]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7a      	ldr	r2, [pc, #488]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a77      	ldr	r2, [pc, #476]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0xbc>
 80013d6:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a71      	ldr	r2, [pc, #452]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6f      	ldr	r3, [pc, #444]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013f0:	4b6b      	ldr	r3, [pc, #428]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a6a      	ldr	r2, [pc, #424]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b68      	ldr	r3, [pc, #416]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a67      	ldr	r2, [pc, #412]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fcd2 	bl	8000db8 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fcce 	bl	8000db8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e200      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xe4>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fcbe 	bl	8000db8 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fcba 	bl	8000db8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1ec      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x10c>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800146e:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147a:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1c0      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4939      	ldr	r1, [pc, #228]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_RCC_OscConfig+0x270>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fc73 	bl	8000db8 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc6f 	bl	8000db8 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1a1      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4927      	ldr	r1, [pc, #156]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fc52 	bl	8000db8 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fc4e 	bl	8000db8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e180      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03a      	beq.n	80015b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_RCC_OscConfig+0x274>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fc32 	bl	8000db8 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fc2e 	bl	8000db8 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e160      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fa9c 	bl	8001ab4 <RCC_Delay>
 800157c:	e01c      	b.n	80015b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_RCC_OscConfig+0x274>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fc18 	bl	8000db8 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	e00f      	b.n	80015ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fc14 	bl	8000db8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d908      	bls.n	80015ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e146      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	42420000 	.word	0x42420000
 80015a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b92      	ldr	r3, [pc, #584]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e9      	bne.n	800158c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a6 	beq.w	8001712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b8b      	ldr	r3, [pc, #556]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10d      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a87      	ldr	r2, [pc, #540]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b85      	ldr	r3, [pc, #532]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b82      	ldr	r3, [pc, #520]	; (80017fc <HAL_RCC_OscConfig+0x4c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d118      	bne.n	8001630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b7f      	ldr	r3, [pc, #508]	; (80017fc <HAL_RCC_OscConfig+0x4c8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a7e      	ldr	r2, [pc, #504]	; (80017fc <HAL_RCC_OscConfig+0x4c8>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160a:	f7ff fbd5 	bl	8000db8 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7ff fbd1 	bl	8000db8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	; 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e103      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b75      	ldr	r3, [pc, #468]	; (80017fc <HAL_RCC_OscConfig+0x4c8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x312>
 8001638:	4b6f      	ldr	r3, [pc, #444]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	e02d      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x334>
 800164e:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a69      	ldr	r2, [pc, #420]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a66      	ldr	r2, [pc, #408]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	e01c      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x356>
 8001670:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a60      	ldr	r2, [pc, #384]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a5d      	ldr	r2, [pc, #372]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 800168a:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a5a      	ldr	r2, [pc, #360]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a57      	ldr	r2, [pc, #348]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d015      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb85 	bl	8000db8 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fb81 	bl	8000db8 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0b1      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4b4b      	ldr	r3, [pc, #300]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ee      	beq.n	80016b2 <HAL_RCC_OscConfig+0x37e>
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb6f 	bl	8000db8 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fb6b 	bl	8000db8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e09b      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8087 	beq.w	800182a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d061      	beq.n	80017ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d146      	bne.n	80017be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001730:	4b33      	ldr	r3, [pc, #204]	; (8001800 <HAL_RCC_OscConfig+0x4cc>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fb3f 	bl	8000db8 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fb3b 	bl	8000db8 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e06d      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001764:	d108      	bne.n	8001778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4921      	ldr	r1, [pc, #132]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a19      	ldr	r1, [r3, #32]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	430b      	orrs	r3, r1
 800178a:	491b      	ldr	r1, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x4cc>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fb0f 	bl	8000db8 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fb0b 	bl	8000db8 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e03d      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x46a>
 80017bc:	e035      	b.n	800182a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_RCC_OscConfig+0x4cc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff faf8 	bl	8000db8 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff faf4 	bl	8000db8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e026      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x498>
 80017ea:	e01e      	b.n	800182a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e019      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40007000 	.word	0x40007000
 8001800:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_OscConfig+0x500>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	429a      	cmp	r2, r3
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000

08001838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0d0      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d910      	bls.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4965      	ldr	r1, [pc, #404]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a58      	ldr	r2, [pc, #352]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800189e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	494d      	ldr	r1, [pc, #308]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d040      	beq.n	8001958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d115      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e073      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06b      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001916:	4b39      	ldr	r3, [pc, #228]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f023 0203 	bic.w	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4936      	ldr	r1, [pc, #216]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001928:	f7ff fa46 	bl	8000db8 <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	e00a      	b.n	8001946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001930:	f7ff fa42 	bl	8000db8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e053      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 020c 	and.w	r2, r3, #12
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	429a      	cmp	r2, r3
 8001956:	d1eb      	bne.n	8001930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d210      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4922      	ldr	r1, [pc, #136]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4916      	ldr	r1, [pc, #88]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f821 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	490a      	ldr	r1, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	5ccb      	ldrb	r3, [r1, r3]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1cc>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x1d0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f9a4 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	080027ac 	.word	0x080027ac
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x30>
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x36>
 8001a3a:	e027      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a3e:	613b      	str	r3, [r7, #16]
      break;
 8001a40:	e027      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	0c9b      	lsrs	r3, r3, #18
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d010      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	0c5b      	lsrs	r3, r3, #17
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	4a11      	ldr	r2, [pc, #68]	; (8001aac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a6e:	fb03 f202 	mul.w	r2, r3, r2
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e004      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	613b      	str	r3, [r7, #16]
      break;
 8001a8a:	e002      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a8e:	613b      	str	r3, [r7, #16]
      break;
 8001a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a92:	693b      	ldr	r3, [r7, #16]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	007a1200 	.word	0x007a1200
 8001aa8:	080027bc 	.word	0x080027bc
 8001aac:	080027cc 	.word	0x080027cc
 8001ab0:	003d0900 	.word	0x003d0900

08001ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <RCC_Delay+0x34>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <RCC_Delay+0x38>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	0a5b      	lsrs	r3, r3, #9
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad0:	bf00      	nop
  }
  while (Delay --);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	60fa      	str	r2, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f9      	bne.n	8001ad0 <RCC_Delay+0x1c>
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	10624dd3 	.word	0x10624dd3

08001af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e041      	b.n	8001b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff f856 	bl	8000bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f000 faac 	bl	800208c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e041      	b.n	8001c24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d106      	bne.n	8001bba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f839 	bl	8001c2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f000 fa5d 	bl	800208c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_TIM_PWM_Start+0x24>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e022      	b.n	8001caa <HAL_TIM_PWM_Start+0x6a>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d109      	bne.n	8001c7e <HAL_TIM_PWM_Start+0x3e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	e015      	b.n	8001caa <HAL_TIM_PWM_Start+0x6a>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d109      	bne.n	8001c98 <HAL_TIM_PWM_Start+0x58>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e008      	b.n	8001caa <HAL_TIM_PWM_Start+0x6a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e059      	b.n	8001d66 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d104      	bne.n	8001cc2 <HAL_TIM_PWM_Start+0x82>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc0:	e013      	b.n	8001cea <HAL_TIM_PWM_Start+0xaa>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d104      	bne.n	8001cd2 <HAL_TIM_PWM_Start+0x92>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cd0:	e00b      	b.n	8001cea <HAL_TIM_PWM_Start+0xaa>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d104      	bne.n	8001ce2 <HAL_TIM_PWM_Start+0xa2>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ce0:	e003      	b.n	8001cea <HAL_TIM_PWM_Start+0xaa>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fc40 	bl	8002578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_TIM_PWM_Start+0x130>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d107      	bne.n	8001d12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <HAL_TIM_PWM_Start+0x130>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_TIM_PWM_Start+0xf0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d24:	d004      	beq.n	8001d30 <HAL_TIM_PWM_Start+0xf0>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <HAL_TIM_PWM_Start+0x134>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d111      	bne.n	8001d54 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d010      	beq.n	8001d64 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d52:	e007      	b.n	8001d64 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	40000400 	.word	0x40000400

08001d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e0ae      	b.n	8001ef4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	f200 809f 	bhi.w	8001ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001de1 	.word	0x08001de1
 8001db0:	08001ee5 	.word	0x08001ee5
 8001db4:	08001ee5 	.word	0x08001ee5
 8001db8:	08001ee5 	.word	0x08001ee5
 8001dbc:	08001e21 	.word	0x08001e21
 8001dc0:	08001ee5 	.word	0x08001ee5
 8001dc4:	08001ee5 	.word	0x08001ee5
 8001dc8:	08001ee5 	.word	0x08001ee5
 8001dcc:	08001e63 	.word	0x08001e63
 8001dd0:	08001ee5 	.word	0x08001ee5
 8001dd4:	08001ee5 	.word	0x08001ee5
 8001dd8:	08001ee5 	.word	0x08001ee5
 8001ddc:	08001ea3 	.word	0x08001ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f9a8 	bl	800213c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0208 	orr.w	r2, r2, #8
 8001dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0204 	bic.w	r2, r2, #4
 8001e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6999      	ldr	r1, [r3, #24]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	619a      	str	r2, [r3, #24]
      break;
 8001e1e:	e064      	b.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f9ee 	bl	8002208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6999      	ldr	r1, [r3, #24]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	021a      	lsls	r2, r3, #8
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	619a      	str	r2, [r3, #24]
      break;
 8001e60:	e043      	b.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fa37 	bl	80022dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0208 	orr.w	r2, r2, #8
 8001e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0204 	bic.w	r2, r2, #4
 8001e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69d9      	ldr	r1, [r3, #28]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	61da      	str	r2, [r3, #28]
      break;
 8001ea0:	e023      	b.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fa81 	bl	80023b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69d9      	ldr	r1, [r3, #28]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	61da      	str	r2, [r3, #28]
      break;
 8001ee2:	e002      	b.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_TIM_ConfigClockSource+0x1c>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e0b4      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x186>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f50:	d03e      	beq.n	8001fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8001f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f56:	f200 8087 	bhi.w	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5e:	f000 8086 	beq.w	800206e <HAL_TIM_ConfigClockSource+0x172>
 8001f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f66:	d87f      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f68:	2b70      	cmp	r3, #112	; 0x70
 8001f6a:	d01a      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8001f6c:	2b70      	cmp	r3, #112	; 0x70
 8001f6e:	d87b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f70:	2b60      	cmp	r3, #96	; 0x60
 8001f72:	d050      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0x11a>
 8001f74:	2b60      	cmp	r3, #96	; 0x60
 8001f76:	d877      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f78:	2b50      	cmp	r3, #80	; 0x50
 8001f7a:	d03c      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8001f7c:	2b50      	cmp	r3, #80	; 0x50
 8001f7e:	d873      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d058      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0x13a>
 8001f84:	2b40      	cmp	r3, #64	; 0x40
 8001f86:	d86f      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f88:	2b30      	cmp	r3, #48	; 0x30
 8001f8a:	d064      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f8c:	2b30      	cmp	r3, #48	; 0x30
 8001f8e:	d86b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d060      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d867      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05c      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d05a      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001fa0:	e062      	b.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fb2:	f000 fac2 	bl	800253a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	609a      	str	r2, [r3, #8]
      break;
 8001fce:	e04f      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fe0:	f000 faab 	bl	800253a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ff2:	609a      	str	r2, [r3, #8]
      break;
 8001ff4:	e03c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002002:	461a      	mov	r2, r3
 8002004:	f000 fa22 	bl	800244c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2150      	movs	r1, #80	; 0x50
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fa79 	bl	8002506 <TIM_ITRx_SetConfig>
      break;
 8002014:	e02c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002022:	461a      	mov	r2, r3
 8002024:	f000 fa40 	bl	80024a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2160      	movs	r1, #96	; 0x60
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fa69 	bl	8002506 <TIM_ITRx_SetConfig>
      break;
 8002034:	e01c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002042:	461a      	mov	r2, r3
 8002044:	f000 fa02 	bl	800244c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2140      	movs	r1, #64	; 0x40
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fa59 	bl	8002506 <TIM_ITRx_SetConfig>
      break;
 8002054:	e00c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f000 fa50 	bl	8002506 <TIM_ITRx_SetConfig>
      break;
 8002066:	e003      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      break;
 800206c:	e000      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800206e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a25      	ldr	r2, [pc, #148]	; (8002134 <TIM_Base_SetConfig+0xa8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d007      	beq.n	80020b4 <TIM_Base_SetConfig+0x28>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d003      	beq.n	80020b4 <TIM_Base_SetConfig+0x28>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a22      	ldr	r2, [pc, #136]	; (8002138 <TIM_Base_SetConfig+0xac>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d108      	bne.n	80020c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <TIM_Base_SetConfig+0xa8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0x52>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0x52>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <TIM_Base_SetConfig+0xac>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <TIM_Base_SetConfig+0xa8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40000400 	.word	0x40000400

0800213c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f023 0201 	bic.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f023 0302 	bic.w	r3, r3, #2
 8002184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <TIM_OC1_SetConfig+0xc8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d10c      	bne.n	80021b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f023 0308 	bic.w	r3, r3, #8
 800219e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a13      	ldr	r2, [pc, #76]	; (8002204 <TIM_OC1_SetConfig+0xc8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d111      	bne.n	80021de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	621a      	str	r2, [r3, #32]
}
 80021f8:	bf00      	nop
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40012c00 	.word	0x40012c00

08002208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f023 0210 	bic.w	r2, r3, #16
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f023 0320 	bic.w	r3, r3, #32
 8002252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <TIM_OC2_SetConfig+0xd0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d10d      	bne.n	8002284 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800226e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <TIM_OC2_SetConfig+0xd0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d113      	bne.n	80022b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800229a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	621a      	str	r2, [r3, #32]
}
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	40012c00 	.word	0x40012c00

080022dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <TIM_OC3_SetConfig+0xd0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10d      	bne.n	8002356 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a14      	ldr	r2, [pc, #80]	; (80023ac <TIM_OC3_SetConfig+0xd0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d113      	bne.n	8002386 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800236c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	621a      	str	r2, [r3, #32]
}
 80023a0:	bf00      	nop
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40012c00 	.word	0x40012c00

080023b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	031b      	lsls	r3, r3, #12
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <TIM_OC4_SetConfig+0x98>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d109      	bne.n	8002424 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	621a      	str	r2, [r3, #32]
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	40012c00 	.word	0x40012c00

0800244c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f023 0201 	bic.w	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f023 030a 	bic.w	r3, r3, #10
 8002488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	621a      	str	r2, [r3, #32]
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	f023 0210 	bic.w	r2, r3, #16
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	031b      	lsls	r3, r3, #12
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	621a      	str	r2, [r3, #32]
}
 80024fc:	bf00      	nop
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	f043 0307 	orr.w	r3, r3, #7
 8002528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	609a      	str	r2, [r3, #8]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800253a:	b480      	push	{r7}
 800253c:	b087      	sub	sp, #28
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002554:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	021a      	lsls	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	431a      	orrs	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4313      	orrs	r3, r2
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	609a      	str	r2, [r3, #8]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	2201      	movs	r2, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	43db      	mvns	r3, r3
 800259a:	401a      	ands	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	431a      	orrs	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	621a      	str	r2, [r3, #32]
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e041      	b.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a14      	ldr	r2, [pc, #80]	; (8002668 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002624:	d004      	beq.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10c      	bne.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	4313      	orrs	r3, r2
 8002640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40000400 	.word	0x40000400

08002670 <memset>:
 8002670:	4603      	mov	r3, r0
 8002672:	4402      	add	r2, r0
 8002674:	4293      	cmp	r3, r2
 8002676:	d100      	bne.n	800267a <memset+0xa>
 8002678:	4770      	bx	lr
 800267a:	f803 1b01 	strb.w	r1, [r3], #1
 800267e:	e7f9      	b.n	8002674 <memset+0x4>

08002680 <__libc_init_array>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	2600      	movs	r6, #0
 8002684:	4d0c      	ldr	r5, [pc, #48]	; (80026b8 <__libc_init_array+0x38>)
 8002686:	4c0d      	ldr	r4, [pc, #52]	; (80026bc <__libc_init_array+0x3c>)
 8002688:	1b64      	subs	r4, r4, r5
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	42a6      	cmp	r6, r4
 800268e:	d109      	bne.n	80026a4 <__libc_init_array+0x24>
 8002690:	f000 f81a 	bl	80026c8 <_init>
 8002694:	2600      	movs	r6, #0
 8002696:	4d0a      	ldr	r5, [pc, #40]	; (80026c0 <__libc_init_array+0x40>)
 8002698:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <__libc_init_array+0x44>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	42a6      	cmp	r6, r4
 80026a0:	d105      	bne.n	80026ae <__libc_init_array+0x2e>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a8:	4798      	blx	r3
 80026aa:	3601      	adds	r6, #1
 80026ac:	e7ee      	b.n	800268c <__libc_init_array+0xc>
 80026ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b2:	4798      	blx	r3
 80026b4:	3601      	adds	r6, #1
 80026b6:	e7f2      	b.n	800269e <__libc_init_array+0x1e>
 80026b8:	080027d0 	.word	0x080027d0
 80026bc:	080027d0 	.word	0x080027d0
 80026c0:	080027d0 	.word	0x080027d0
 80026c4:	080027d4 	.word	0x080027d4

080026c8 <_init>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr

080026d4 <_fini>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr
