
CONTROLE MOTOR DC_IHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003180  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080033d0  080033d0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d0  080033d0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080033d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000005c  08003434  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003434  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007bb1  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001701  00000000  00000000  00027c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00029380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000776  00000000  00000000  00029d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171a1  00000000  00000000  0002a4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000abfd  00000000  00000000  0004164f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085bfa  00000000  00000000  0004c24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cb4  00000000  00000000  000d1e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000d4afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003274 	.word	0x08003274

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003274 	.word	0x08003274

0800014c <LCD_Cursor>:
 *  @return None
 *
 ******************************************************************************/

void LCD_Cursor(uint8_t x, uint8_t y)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if (x == 0)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d102      	bne.n	8000168 <LCD_Cursor+0x1c>
		temp = 0x80;
 8000162:	2380      	movs	r3, #128	; 0x80
 8000164:	73fb      	strb	r3, [r7, #15]
 8000166:	e001      	b.n	800016c <LCD_Cursor+0x20>
	else
		temp = 0xC0;
 8000168:	23c0      	movs	r3, #192	; 0xc0
 800016a:	73fb      	strb	r3, [r7, #15]

	temp = temp + y;
 800016c:	7bfa      	ldrb	r2, [r7, #15]
 800016e:	79bb      	ldrb	r3, [r7, #6]
 8000170:	4413      	add	r3, r2
 8000172:	73fb      	strb	r3, [r7, #15]

	LCD_Cmd(temp);
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	4618      	mov	r0, r3
 8000178:	f000 f8ae 	bl	80002d8 <LCD_Cmd>


}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <LCD_Data>:
*
*  @return  None
*
******************************************************************************/
void LCD_Data(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	RS_GPIO_Port->BSRR = RS_Pin;
 800018e:	4b45      	ldr	r3, [pc, #276]	; (80002a4 <LCD_Data+0x120>)
 8000190:	2208      	movs	r2, #8
 8000192:	611a      	str	r2, [r3, #16]
	if (data & 0x80)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	da04      	bge.n	80001a6 <LCD_Data+0x22>
		D7_GPIO_Port->BSRR = D7_Pin;
 800019c:	4b42      	ldr	r3, [pc, #264]	; (80002a8 <LCD_Data+0x124>)
 800019e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001a2:	611a      	str	r2, [r3, #16]
 80001a4:	e003      	b.n	80001ae <LCD_Data+0x2a>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 80001a6:	4b40      	ldr	r3, [pc, #256]	; (80002a8 <LCD_Data+0x124>)
 80001a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001ac:	611a      	str	r2, [r3, #16]
	if (data & 0x40)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <LCD_Data+0x3c>
		D6_GPIO_Port->BSRR = D6_Pin;
 80001b8:	4b3b      	ldr	r3, [pc, #236]	; (80002a8 <LCD_Data+0x124>)
 80001ba:	2208      	movs	r2, #8
 80001bc:	611a      	str	r2, [r3, #16]
 80001be:	e003      	b.n	80001c8 <LCD_Data+0x44>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 80001c0:	4b39      	ldr	r3, [pc, #228]	; (80002a8 <LCD_Data+0x124>)
 80001c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80001c6:	611a      	str	r2, [r3, #16]
	if (data & 0x20)
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	f003 0320 	and.w	r3, r3, #32
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d003      	beq.n	80001da <LCD_Data+0x56>
		D5_GPIO_Port->BSRR = D5_Pin;
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <LCD_Data+0x120>)
 80001d4:	2220      	movs	r2, #32
 80001d6:	611a      	str	r2, [r3, #16]
 80001d8:	e003      	b.n	80001e2 <LCD_Data+0x5e>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 80001da:	4b32      	ldr	r3, [pc, #200]	; (80002a4 <LCD_Data+0x120>)
 80001dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80001e0:	611a      	str	r2, [r3, #16]
	if (data & 0x10)
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f003 0310 	and.w	r3, r3, #16
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d003      	beq.n	80001f4 <LCD_Data+0x70>
		D4_GPIO_Port->BSRR = D4_Pin;
 80001ec:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <LCD_Data+0x120>)
 80001ee:	2210      	movs	r2, #16
 80001f0:	611a      	str	r2, [r3, #16]
 80001f2:	e003      	b.n	80001fc <LCD_Data+0x78>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 80001f4:	4b2b      	ldr	r3, [pc, #172]	; (80002a4 <LCD_Data+0x120>)
 80001f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80001fa:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <LCD_Data+0x120>)
 80001fe:	2201      	movs	r2, #1
 8000200:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f000 fff2 	bl	80011ec <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 8000208:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <LCD_Data+0x120>)
 800020a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800020e:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 ffeb 	bl	80011ec <HAL_Delay>

	if (data & 0x08)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 0308 	and.w	r3, r3, #8
 800021c:	2b00      	cmp	r3, #0
 800021e:	d004      	beq.n	800022a <LCD_Data+0xa6>
		D7_GPIO_Port->BSRR = D7_Pin;
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <LCD_Data+0x124>)
 8000222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	e003      	b.n	8000232 <LCD_Data+0xae>
	else
		D7_GPIO_Port->BSRR = (uint32_t) D7_Pin << 16u;
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <LCD_Data+0x124>)
 800022c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000230:	611a      	str	r2, [r3, #16]
	if (data & 0x04)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	2b00      	cmp	r3, #0
 800023a:	d003      	beq.n	8000244 <LCD_Data+0xc0>
		D6_GPIO_Port->BSRR = D6_Pin;
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <LCD_Data+0x124>)
 800023e:	2208      	movs	r2, #8
 8000240:	611a      	str	r2, [r3, #16]
 8000242:	e003      	b.n	800024c <LCD_Data+0xc8>
	else
		D6_GPIO_Port->BSRR = (uint32_t) D6_Pin << 16u;
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <LCD_Data+0x124>)
 8000246:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800024a:	611a      	str	r2, [r3, #16]
	if (data & 0x02)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <LCD_Data+0xda>
		D5_GPIO_Port->BSRR = D5_Pin;
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <LCD_Data+0x120>)
 8000258:	2220      	movs	r2, #32
 800025a:	611a      	str	r2, [r3, #16]
 800025c:	e003      	b.n	8000266 <LCD_Data+0xe2>
	else
		D5_GPIO_Port->BSRR = (uint32_t) D5_Pin << 16u;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <LCD_Data+0x120>)
 8000260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000264:	611a      	str	r2, [r3, #16]
	if (data & 0x01)
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d003      	beq.n	8000278 <LCD_Data+0xf4>
		D4_GPIO_Port->BSRR = D4_Pin;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <LCD_Data+0x120>)
 8000272:	2210      	movs	r2, #16
 8000274:	611a      	str	r2, [r3, #16]
 8000276:	e003      	b.n	8000280 <LCD_Data+0xfc>
	else
		D4_GPIO_Port->BSRR = (uint32_t) D4_Pin << 16u;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <LCD_Data+0x120>)
 800027a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800027e:	611a      	str	r2, [r3, #16]

	EN_GPIO_Port->BSRR = EN_Pin;
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <LCD_Data+0x120>)
 8000282:	2201      	movs	r2, #1
 8000284:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f000 ffb0 	bl	80011ec <HAL_Delay>
	EN_GPIO_Port->BSRR = (uint32_t) EN_Pin << 16u;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <LCD_Data+0x120>)
 800028e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000292:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 ffa9 	bl	80011ec <HAL_Delay>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40010c00 	.word	0x40010c00

080002ac <LCD_String>:
*
*  @param1 String to be sended.
*
******************************************************************************/
void LCD_String(char *string)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	while (*string)
 80002b4:	e007      	b.n	80002c6 <LCD_String+0x1a>
	{
		LCD_Data(*string);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff62 	bl	8000184 <LCD_Data>
		string++;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
	while (*string)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1f3      	bne.n	80002b6 <LCD_String+0xa>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <LCD_Cmd>:
*
*  @return None.
*
******************************************************************************/
void LCD_Cmd(uint8_t cmd)  // Fun��o para enviar um comando para o Display
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2108      	movs	r1, #8
 80002e6:	4855      	ldr	r0, [pc, #340]	; (800043c <LCD_Cmd+0x164>)
 80002e8:	f001 fa1b 	bl	8001722 <HAL_GPIO_WritePin>

	if (cmd & 0x80)
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da06      	bge.n	8000302 <LCD_Cmd+0x2a>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fa:	4851      	ldr	r0, [pc, #324]	; (8000440 <LCD_Cmd+0x168>)
 80002fc:	f001 fa11 	bl	8001722 <HAL_GPIO_WritePin>
 8000300:	e005      	b.n	800030e <LCD_Cmd+0x36>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000308:	484d      	ldr	r0, [pc, #308]	; (8000440 <LCD_Cmd+0x168>)
 800030a:	f001 fa0a 	bl	8001722 <HAL_GPIO_WritePin>
	if (cmd & 0x40)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000314:	2b00      	cmp	r3, #0
 8000316:	d005      	beq.n	8000324 <LCD_Cmd+0x4c>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2108      	movs	r1, #8
 800031c:	4848      	ldr	r0, [pc, #288]	; (8000440 <LCD_Cmd+0x168>)
 800031e:	f001 fa00 	bl	8001722 <HAL_GPIO_WritePin>
 8000322:	e004      	b.n	800032e <LCD_Cmd+0x56>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2108      	movs	r1, #8
 8000328:	4845      	ldr	r0, [pc, #276]	; (8000440 <LCD_Cmd+0x168>)
 800032a:	f001 f9fa 	bl	8001722 <HAL_GPIO_WritePin>
	if (cmd & 0x20)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	2b00      	cmp	r3, #0
 8000336:	d005      	beq.n	8000344 <LCD_Cmd+0x6c>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	483f      	ldr	r0, [pc, #252]	; (800043c <LCD_Cmd+0x164>)
 800033e:	f001 f9f0 	bl	8001722 <HAL_GPIO_WritePin>
 8000342:	e004      	b.n	800034e <LCD_Cmd+0x76>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2120      	movs	r1, #32
 8000348:	483c      	ldr	r0, [pc, #240]	; (800043c <LCD_Cmd+0x164>)
 800034a:	f001 f9ea 	bl	8001722 <HAL_GPIO_WritePin>
	if (cmd & 0x10)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	2b00      	cmp	r3, #0
 8000356:	d005      	beq.n	8000364 <LCD_Cmd+0x8c>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2110      	movs	r1, #16
 800035c:	4837      	ldr	r0, [pc, #220]	; (800043c <LCD_Cmd+0x164>)
 800035e:	f001 f9e0 	bl	8001722 <HAL_GPIO_WritePin>
 8000362:	e004      	b.n	800036e <LCD_Cmd+0x96>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4834      	ldr	r0, [pc, #208]	; (800043c <LCD_Cmd+0x164>)
 800036a:	f001 f9da 	bl	8001722 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2101      	movs	r1, #1
 8000372:	4832      	ldr	r0, [pc, #200]	; (800043c <LCD_Cmd+0x164>)
 8000374:	f001 f9d5 	bl	8001722 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000378:	2001      	movs	r0, #1
 800037a:	f000 ff37 	bl	80011ec <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2101      	movs	r1, #1
 8000382:	482e      	ldr	r0, [pc, #184]	; (800043c <LCD_Cmd+0x164>)
 8000384:	f001 f9cd 	bl	8001722 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f000 ff2f 	bl	80011ec <HAL_Delay>

	if (cmd & 0x08)
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	2b00      	cmp	r3, #0
 8000396:	d006      	beq.n	80003a6 <LCD_Cmd+0xce>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800039e:	4828      	ldr	r0, [pc, #160]	; (8000440 <LCD_Cmd+0x168>)
 80003a0:	f001 f9bf 	bl	8001722 <HAL_GPIO_WritePin>
 80003a4:	e005      	b.n	80003b2 <LCD_Cmd+0xda>
	else
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4824      	ldr	r0, [pc, #144]	; (8000440 <LCD_Cmd+0x168>)
 80003ae:	f001 f9b8 	bl	8001722 <HAL_GPIO_WritePin>
	if (cmd & 0x04)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d005      	beq.n	80003c8 <LCD_Cmd+0xf0>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2108      	movs	r1, #8
 80003c0:	481f      	ldr	r0, [pc, #124]	; (8000440 <LCD_Cmd+0x168>)
 80003c2:	f001 f9ae 	bl	8001722 <HAL_GPIO_WritePin>
 80003c6:	e004      	b.n	80003d2 <LCD_Cmd+0xfa>
	else
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2108      	movs	r1, #8
 80003cc:	481c      	ldr	r0, [pc, #112]	; (8000440 <LCD_Cmd+0x168>)
 80003ce:	f001 f9a8 	bl	8001722 <HAL_GPIO_WritePin>
	if (cmd & 0x02)
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f003 0302 	and.w	r3, r3, #2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d005      	beq.n	80003e8 <LCD_Cmd+0x110>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	4816      	ldr	r0, [pc, #88]	; (800043c <LCD_Cmd+0x164>)
 80003e2:	f001 f99e 	bl	8001722 <HAL_GPIO_WritePin>
 80003e6:	e004      	b.n	80003f2 <LCD_Cmd+0x11a>
	else
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2120      	movs	r1, #32
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <LCD_Cmd+0x164>)
 80003ee:	f001 f998 	bl	8001722 <HAL_GPIO_WritePin>
	if (cmd & 0x01)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d005      	beq.n	8000408 <LCD_Cmd+0x130>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2110      	movs	r1, #16
 8000400:	480e      	ldr	r0, [pc, #56]	; (800043c <LCD_Cmd+0x164>)
 8000402:	f001 f98e 	bl	8001722 <HAL_GPIO_WritePin>
 8000406:	e004      	b.n	8000412 <LCD_Cmd+0x13a>
	else
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2110      	movs	r1, #16
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LCD_Cmd+0x164>)
 800040e:	f001 f988 	bl	8001722 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2101      	movs	r1, #1
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <LCD_Cmd+0x164>)
 8000418:	f001 f983 	bl	8001722 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800041c:	2001      	movs	r0, #1
 800041e:	f000 fee5 	bl	80011ec <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2101      	movs	r1, #1
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <LCD_Cmd+0x164>)
 8000428:	f001 f97b 	bl	8001722 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800042c:	2001      	movs	r0, #1
 800042e:	f000 fedd 	bl	80011ec <HAL_Delay>

}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010800 	.word	0x40010800
 8000440:	40010c00 	.word	0x40010c00

08000444 <LCD_Clear>:
*
*  @return None.
*
******************************************************************************/
void LCD_Clear(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	LCD_Cmd(0x01);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff ff45 	bl	80002d8 <LCD_Cmd>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}

08000452 <LCD_Init>:
*
*  @return None.
*
******************************************************************************/
void LCD_Init(void)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0
	LCD_Cmd(0x33);
 8000456:	2033      	movs	r0, #51	; 0x33
 8000458:	f7ff ff3e 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x32);
 800045c:	2032      	movs	r0, #50	; 0x32
 800045e:	f7ff ff3b 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x28);
 8000462:	2028      	movs	r0, #40	; 0x28
 8000464:	f7ff ff38 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x06);
 8000468:	2006      	movs	r0, #6
 800046a:	f7ff ff35 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x0C);
 800046e:	200c      	movs	r0, #12
 8000470:	f7ff ff32 	bl	80002d8 <LCD_Cmd>
	LCD_Cmd(0x01);
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff2f 	bl	80002d8 <LCD_Cmd>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000484:	f000 fe50 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000488:	f000 fbe4 	bl	8000c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048c:	f000 fc9e 	bl	8000dcc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000490:	f000 fc26 	bl	8000ce0 <MX_TIM2_Init>
  void Buzzer_Teclas();
  void ENTER_Boucing();
  void DEC_Boucing();
  void INC_Boucing();

  LCD_Init();
 8000494:	f7ff ffdd 	bl	8000452 <LCD_Init>
  LCD_Cursor(0,2);
 8000498:	2102      	movs	r1, #2
 800049a:	2000      	movs	r0, #0
 800049c:	f7ff fe56 	bl	800014c <LCD_Cursor>
  LCD_String("DC MOTOR SYS" );
 80004a0:	4898      	ldr	r0, [pc, #608]	; (8000704 <main+0x284>)
 80004a2:	f7ff ff03 	bl	80002ac <LCD_String>
  LCD_Cursor(1,2);
 80004a6:	2102      	movs	r1, #2
 80004a8:	2001      	movs	r0, #1
 80004aa:	f7ff fe4f 	bl	800014c <LCD_Cursor>
  LCD_String("VERSION: 1.0" );
 80004ae:	4896      	ldr	r0, [pc, #600]	; (8000708 <main+0x288>)
 80004b0:	f7ff fefc 	bl	80002ac <LCD_String>
  HAL_Delay(3000);
 80004b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004b8:	f000 fe98 	bl	80011ec <HAL_Delay>
  LCD_Clear();
 80004bc:	f7ff ffc2 	bl	8000444 <LCD_Clear>
  start = 1;
 80004c0:	4b92      	ldr	r3, [pc, #584]	; (800070c <main+0x28c>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 80004c6:	4b91      	ldr	r3, [pc, #580]	; (800070c <main+0x28c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d10e      	bne.n	80004ec <main+0x6c>
 80004ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d2:	488f      	ldr	r0, [pc, #572]	; (8000710 <main+0x290>)
 80004d4:	f001 f90e 	bl	80016f4 <HAL_GPIO_ReadPin>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d006      	beq.n	80004ec <main+0x6c>
		{
			ENTER_Boucing();
 80004de:	f000 fba5 	bl	8000c2c <ENTER_Boucing>
			Buzzer_Teclas();
 80004e2:	f000 fb67 	bl	8000bb4 <Buzzer_Teclas>
			start = 3;
 80004e6:	4b89      	ldr	r3, [pc, #548]	; (800070c <main+0x28c>)
 80004e8:	2203      	movs	r2, #3
 80004ea:	601a      	str	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (start == 1))
 80004ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f0:	4887      	ldr	r0, [pc, #540]	; (8000710 <main+0x290>)
 80004f2:	f001 f8ff 	bl	80016f4 <HAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00f      	beq.n	800051c <main+0x9c>
 80004fc:	4b83      	ldr	r3, [pc, #524]	; (800070c <main+0x28c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d10b      	bne.n	800051c <main+0x9c>
		{
			INC_Boucing();
 8000504:	f000 fb6c 	bl	8000be0 <INC_Boucing>
			Buzzer_Teclas();
 8000508:	f000 fb54 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 800050c:	f7ff ff9a 	bl	8000444 <LCD_Clear>
			menu = 1;
 8000510:	4b80      	ldr	r3, [pc, #512]	; (8000714 <main+0x294>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
			start = 0;
 8000516:	4b7d      	ldr	r3, [pc, #500]	; (800070c <main+0x28c>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
		}

		if ((menu == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin)))
 800051c:	4b7d      	ldr	r3, [pc, #500]	; (8000714 <main+0x294>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d112      	bne.n	800054a <main+0xca>
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	487a      	ldr	r0, [pc, #488]	; (8000710 <main+0x290>)
 8000528:	f001 f8e4 	bl	80016f4 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00b      	beq.n	800054a <main+0xca>
		{
			DEC_Boucing();
 8000532:	f000 fb69 	bl	8000c08 <DEC_Boucing>
			Buzzer_Teclas();
 8000536:	f000 fb3d 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 800053a:	f7ff ff83 	bl	8000444 <LCD_Clear>
			menu = 0;
 800053e:	4b75      	ldr	r3, [pc, #468]	; (8000714 <main+0x294>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
			start = 2;
 8000544:	4b71      	ldr	r3, [pc, #452]	; (800070c <main+0x28c>)
 8000546:	2202      	movs	r2, #2
 8000548:	601a      	str	r2, [r3, #0]
		}

		if ((aux_start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800054a:	4b73      	ldr	r3, [pc, #460]	; (8000718 <main+0x298>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d113      	bne.n	800057a <main+0xfa>
 8000552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000556:	486e      	ldr	r0, [pc, #440]	; (8000710 <main+0x290>)
 8000558:	f001 f8cc 	bl	80016f4 <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00b      	beq.n	800057a <main+0xfa>
		{
			ENTER_Boucing();
 8000562:	f000 fb63 	bl	8000c2c <ENTER_Boucing>
			Buzzer_Teclas();
 8000566:	f000 fb25 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 800056a:	f7ff ff6b 	bl	8000444 <LCD_Clear>
			start = 3;
 800056e:	4b67      	ldr	r3, [pc, #412]	; (800070c <main+0x28c>)
 8000570:	2203      	movs	r2, #3
 8000572:	601a      	str	r2, [r3, #0]
			aux_start = 0;
 8000574:	4b68      	ldr	r3, [pc, #416]	; (8000718 <main+0x298>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
		}

		if ((aux_menu == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800057a:	4b68      	ldr	r3, [pc, #416]	; (800071c <main+0x29c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d11d      	bne.n	80005be <main+0x13e>
 8000582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000586:	4862      	ldr	r0, [pc, #392]	; (8000710 <main+0x290>)
 8000588:	f001 f8b4 	bl	80016f4 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d015      	beq.n	80005be <main+0x13e>
		{
			ENTER_Boucing();
 8000592:	f000 fb4b 	bl	8000c2c <ENTER_Boucing>
			Buzzer_Teclas();
 8000596:	f000 fb0d 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 800059a:	f7ff ff53 	bl	8000444 <LCD_Clear>
			menu = 2;
 800059e:	4b5d      	ldr	r3, [pc, #372]	; (8000714 <main+0x294>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	601a      	str	r2, [r3, #0]
			aux_menu = 0;
 80005a4:	4b5d      	ldr	r3, [pc, #372]	; (800071c <main+0x29c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
			a_inc = 5;
 80005aa:	4b5d      	ldr	r3, [pc, #372]	; (8000720 <main+0x2a0>)
 80005ac:	2205      	movs	r2, #5
 80005ae:	601a      	str	r2, [r3, #0]

			sprintf(buffer_accel, "%d", a_inc);
 80005b0:	4b5b      	ldr	r3, [pc, #364]	; (8000720 <main+0x2a0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	495b      	ldr	r1, [pc, #364]	; (8000724 <main+0x2a4>)
 80005b8:	485b      	ldr	r0, [pc, #364]	; (8000728 <main+0x2a8>)
 80005ba:	f002 f9a9 	bl	8002910 <siprintf>
		}

		if ((aux_accel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (a_inc <= 80)))
 80005be:	4b5b      	ldr	r3, [pc, #364]	; (800072c <main+0x2ac>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d124      	bne.n	8000610 <main+0x190>
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	4851      	ldr	r0, [pc, #324]	; (8000710 <main+0x290>)
 80005cc:	f001 f892 	bl	80016f4 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d01c      	beq.n	8000610 <main+0x190>
 80005d6:	4b52      	ldr	r3, [pc, #328]	; (8000720 <main+0x2a0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b50      	cmp	r3, #80	; 0x50
 80005dc:	dc18      	bgt.n	8000610 <main+0x190>
		{
			aux_menu =0;
 80005de:	4b4f      	ldr	r3, [pc, #316]	; (800071c <main+0x29c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
			INC_Boucing();
 80005e4:	f000 fafc 	bl	8000be0 <INC_Boucing>
			Buzzer_Teclas();
 80005e8:	f000 fae4 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 80005ec:	f7ff ff2a 	bl	8000444 <LCD_Clear>
			a_inc += 5;
 80005f0:	4b4b      	ldr	r3, [pc, #300]	; (8000720 <main+0x2a0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3305      	adds	r3, #5
 80005f6:	4a4a      	ldr	r2, [pc, #296]	; (8000720 <main+0x2a0>)
 80005f8:	6013      	str	r3, [r2, #0]
			sprintf(buffer_accel, "%d", a_inc);
 80005fa:	4b49      	ldr	r3, [pc, #292]	; (8000720 <main+0x2a0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	4948      	ldr	r1, [pc, #288]	; (8000724 <main+0x2a4>)
 8000602:	4849      	ldr	r0, [pc, #292]	; (8000728 <main+0x2a8>)
 8000604:	f002 f984 	bl	8002910 <siprintf>
			menu = 3;
 8000608:	4b42      	ldr	r3, [pc, #264]	; (8000714 <main+0x294>)
 800060a:	2203      	movs	r2, #3
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	e02a      	b.n	8000666 <main+0x1e6>
		}
		else if (((aux_accel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (a_inc <= 80) && (a_inc >5))))
 8000610:	4b46      	ldr	r3, [pc, #280]	; (800072c <main+0x2ac>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d126      	bne.n	8000666 <main+0x1e6>
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	483d      	ldr	r0, [pc, #244]	; (8000710 <main+0x290>)
 800061c:	f001 f86a 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d01f      	beq.n	8000666 <main+0x1e6>
 8000626:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <main+0x2a0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b50      	cmp	r3, #80	; 0x50
 800062c:	dc1b      	bgt.n	8000666 <main+0x1e6>
 800062e:	4b3c      	ldr	r3, [pc, #240]	; (8000720 <main+0x2a0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b05      	cmp	r3, #5
 8000634:	dd17      	ble.n	8000666 <main+0x1e6>
		{
			aux_menu =0;
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <main+0x29c>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
			DEC_Boucing();
 800063c:	f000 fae4 	bl	8000c08 <DEC_Boucing>
			Buzzer_Teclas();
 8000640:	f000 fab8 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 8000644:	f7ff fefe 	bl	8000444 <LCD_Clear>
			a_inc -= 5;
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <main+0x2a0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3b05      	subs	r3, #5
 800064e:	4a34      	ldr	r2, [pc, #208]	; (8000720 <main+0x2a0>)
 8000650:	6013      	str	r3, [r2, #0]
			sprintf(buffer_accel, "%d", a_inc);
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <main+0x2a0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	4932      	ldr	r1, [pc, #200]	; (8000724 <main+0x2a4>)
 800065a:	4833      	ldr	r0, [pc, #204]	; (8000728 <main+0x2a8>)
 800065c:	f002 f958 	bl	8002910 <siprintf>
			menu = 3;
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <main+0x294>)
 8000662:	2203      	movs	r2, #3
 8000664:	601a      	str	r2, [r3, #0]
		}

		if ((aux_running == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <main+0x2b0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d121      	bne.n	80006b2 <main+0x232>
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	4827      	ldr	r0, [pc, #156]	; (8000710 <main+0x290>)
 8000674:	f001 f83e 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d019      	beq.n	80006b2 <main+0x232>
		{
			a_inc = a_inc;
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <main+0x2a0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <main+0x2a0>)
 8000684:	6013      	str	r3, [r2, #0]
			aux_accel = 0;
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <main+0x2ac>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
			ENTER_Boucing();
 800068c:	f000 face 	bl	8000c2c <ENTER_Boucing>
			Buzzer_Teclas();
 8000690:	f000 fa90 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 8000694:	f7ff fed6 	bl	8000444 <LCD_Clear>
			menu = 4;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <main+0x294>)
 800069a:	2204      	movs	r2, #4
 800069c:	601a      	str	r2, [r3, #0]
			r_inc = 5;
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <main+0x2b4>)
 80006a0:	2205      	movs	r2, #5
 80006a2:	601a      	str	r2, [r3, #0]
			sprintf(buffer_running, "%d", r_inc);
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <main+0x2b4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	491e      	ldr	r1, [pc, #120]	; (8000724 <main+0x2a4>)
 80006ac:	4822      	ldr	r0, [pc, #136]	; (8000738 <main+0x2b8>)
 80006ae:	f002 f92f 	bl	8002910 <siprintf>
		}

		if ((inc_running == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (r_inc <= 120)))
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <main+0x2bc>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d142      	bne.n	8000740 <main+0x2c0>
 80006ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <main+0x290>)
 80006c0:	f001 f818 	bl	80016f4 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d03a      	beq.n	8000740 <main+0x2c0>
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <main+0x2b4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b78      	cmp	r3, #120	; 0x78
 80006d0:	dc36      	bgt.n	8000740 <main+0x2c0>
		{
			aux_running = 0;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <main+0x2b0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			INC_Boucing();
 80006d8:	f000 fa82 	bl	8000be0 <INC_Boucing>
			Buzzer_Teclas();
 80006dc:	f000 fa6a 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 80006e0:	f7ff feb0 	bl	8000444 <LCD_Clear>
			r_inc += 5;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <main+0x2b4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3305      	adds	r3, #5
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <main+0x2b4>)
 80006ec:	6013      	str	r3, [r2, #0]
			sprintf(buffer_running, "%d", r_inc);
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <main+0x2b4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	490b      	ldr	r1, [pc, #44]	; (8000724 <main+0x2a4>)
 80006f6:	4810      	ldr	r0, [pc, #64]	; (8000738 <main+0x2b8>)
 80006f8:	f002 f90a 	bl	8002910 <siprintf>
			menu = 5;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <main+0x294>)
 80006fe:	2205      	movs	r2, #5
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	e048      	b.n	8000796 <main+0x316>
 8000704:	0800328c 	.word	0x0800328c
 8000708:	0800329c 	.word	0x0800329c
 800070c:	200000c4 	.word	0x200000c4
 8000710:	40010c00 	.word	0x40010c00
 8000714:	200000c0 	.word	0x200000c0
 8000718:	200000cc 	.word	0x200000cc
 800071c:	200000c8 	.word	0x200000c8
 8000720:	200000e0 	.word	0x200000e0
 8000724:	080032ac 	.word	0x080032ac
 8000728:	200000f4 	.word	0x200000f4
 800072c:	200000d0 	.word	0x200000d0
 8000730:	200000d4 	.word	0x200000d4
 8000734:	200000e4 	.word	0x200000e4
 8000738:	20000104 	.word	0x20000104
 800073c:	200000ec 	.word	0x200000ec
		}
		else if ((inc_running == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (r_inc <= 120) && (r_inc > 5)))
 8000740:	4ba9      	ldr	r3, [pc, #676]	; (80009e8 <main+0x568>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d126      	bne.n	8000796 <main+0x316>
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	48a8      	ldr	r0, [pc, #672]	; (80009ec <main+0x56c>)
 800074c:	f000 ffd2 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d01f      	beq.n	8000796 <main+0x316>
 8000756:	4ba6      	ldr	r3, [pc, #664]	; (80009f0 <main+0x570>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b78      	cmp	r3, #120	; 0x78
 800075c:	dc1b      	bgt.n	8000796 <main+0x316>
 800075e:	4ba4      	ldr	r3, [pc, #656]	; (80009f0 <main+0x570>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b05      	cmp	r3, #5
 8000764:	dd17      	ble.n	8000796 <main+0x316>
		{
			aux_running = 0;
 8000766:	4ba3      	ldr	r3, [pc, #652]	; (80009f4 <main+0x574>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
			DEC_Boucing();
 800076c:	f000 fa4c 	bl	8000c08 <DEC_Boucing>
			Buzzer_Teclas();
 8000770:	f000 fa20 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 8000774:	f7ff fe66 	bl	8000444 <LCD_Clear>
			r_inc -= 5;
 8000778:	4b9d      	ldr	r3, [pc, #628]	; (80009f0 <main+0x570>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3b05      	subs	r3, #5
 800077e:	4a9c      	ldr	r2, [pc, #624]	; (80009f0 <main+0x570>)
 8000780:	6013      	str	r3, [r2, #0]
			sprintf(buffer_running, "%d", r_inc);
 8000782:	4b9b      	ldr	r3, [pc, #620]	; (80009f0 <main+0x570>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	499b      	ldr	r1, [pc, #620]	; (80009f8 <main+0x578>)
 800078a:	489c      	ldr	r0, [pc, #624]	; (80009fc <main+0x57c>)
 800078c:	f002 f8c0 	bl	8002910 <siprintf>
			menu = 5;
 8000790:	4b9b      	ldr	r3, [pc, #620]	; (8000a00 <main+0x580>)
 8000792:	2205      	movs	r2, #5
 8000794:	601a      	str	r2, [r3, #0]
		}

		if ((aux_decel == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000796:	4b9b      	ldr	r3, [pc, #620]	; (8000a04 <main+0x584>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d121      	bne.n	80007e2 <main+0x362>
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	4892      	ldr	r0, [pc, #584]	; (80009ec <main+0x56c>)
 80007a4:	f000 ffa6 	bl	80016f4 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d019      	beq.n	80007e2 <main+0x362>
		{
			r_inc = r_inc;
 80007ae:	4b90      	ldr	r3, [pc, #576]	; (80009f0 <main+0x570>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a8f      	ldr	r2, [pc, #572]	; (80009f0 <main+0x570>)
 80007b4:	6013      	str	r3, [r2, #0]
			inc_running = 0;
 80007b6:	4b8c      	ldr	r3, [pc, #560]	; (80009e8 <main+0x568>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
			ENTER_Boucing();
 80007bc:	f000 fa36 	bl	8000c2c <ENTER_Boucing>
			Buzzer_Teclas();
 80007c0:	f000 f9f8 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 80007c4:	f7ff fe3e 	bl	8000444 <LCD_Clear>
			menu = 6;
 80007c8:	4b8d      	ldr	r3, [pc, #564]	; (8000a00 <main+0x580>)
 80007ca:	2206      	movs	r2, #6
 80007cc:	601a      	str	r2, [r3, #0]
			d_inc = 5;
 80007ce:	4b8e      	ldr	r3, [pc, #568]	; (8000a08 <main+0x588>)
 80007d0:	2205      	movs	r2, #5
 80007d2:	601a      	str	r2, [r3, #0]
			sprintf(buffer_decel, "%d", d_inc);
 80007d4:	4b8c      	ldr	r3, [pc, #560]	; (8000a08 <main+0x588>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4987      	ldr	r1, [pc, #540]	; (80009f8 <main+0x578>)
 80007dc:	488b      	ldr	r0, [pc, #556]	; (8000a0c <main+0x58c>)
 80007de:	f002 f897 	bl	8002910 <siprintf>
		}

		if ((inc_decel == 1) && (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) && (d_inc <= 80)))
 80007e2:	4b8b      	ldr	r3, [pc, #556]	; (8000a10 <main+0x590>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d124      	bne.n	8000834 <main+0x3b4>
 80007ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ee:	487f      	ldr	r0, [pc, #508]	; (80009ec <main+0x56c>)
 80007f0:	f000 ff80 	bl	80016f4 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d01c      	beq.n	8000834 <main+0x3b4>
 80007fa:	4b83      	ldr	r3, [pc, #524]	; (8000a08 <main+0x588>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b50      	cmp	r3, #80	; 0x50
 8000800:	dc18      	bgt.n	8000834 <main+0x3b4>
		{
			aux_decel = 0;
 8000802:	4b80      	ldr	r3, [pc, #512]	; (8000a04 <main+0x584>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
			INC_Boucing();
 8000808:	f000 f9ea 	bl	8000be0 <INC_Boucing>
			Buzzer_Teclas();
 800080c:	f000 f9d2 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 8000810:	f7ff fe18 	bl	8000444 <LCD_Clear>
			d_inc += 5;
 8000814:	4b7c      	ldr	r3, [pc, #496]	; (8000a08 <main+0x588>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3305      	adds	r3, #5
 800081a:	4a7b      	ldr	r2, [pc, #492]	; (8000a08 <main+0x588>)
 800081c:	6013      	str	r3, [r2, #0]
			sprintf(buffer_decel, "%d", d_inc);
 800081e:	4b7a      	ldr	r3, [pc, #488]	; (8000a08 <main+0x588>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	4974      	ldr	r1, [pc, #464]	; (80009f8 <main+0x578>)
 8000826:	4879      	ldr	r0, [pc, #484]	; (8000a0c <main+0x58c>)
 8000828:	f002 f872 	bl	8002910 <siprintf>
			menu = 7;
 800082c:	4b74      	ldr	r3, [pc, #464]	; (8000a00 <main+0x580>)
 800082e:	2207      	movs	r2, #7
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	e02a      	b.n	800088a <main+0x40a>
		}
		else if ((inc_decel == 1) && (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) && (d_inc <= 80) && (d_inc > 5)))
 8000834:	4b76      	ldr	r3, [pc, #472]	; (8000a10 <main+0x590>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d126      	bne.n	800088a <main+0x40a>
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	486b      	ldr	r0, [pc, #428]	; (80009ec <main+0x56c>)
 8000840:	f000 ff58 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d01f      	beq.n	800088a <main+0x40a>
 800084a:	4b6f      	ldr	r3, [pc, #444]	; (8000a08 <main+0x588>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b50      	cmp	r3, #80	; 0x50
 8000850:	dc1b      	bgt.n	800088a <main+0x40a>
 8000852:	4b6d      	ldr	r3, [pc, #436]	; (8000a08 <main+0x588>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b05      	cmp	r3, #5
 8000858:	dd17      	ble.n	800088a <main+0x40a>
		{
			aux_decel = 0;
 800085a:	4b6a      	ldr	r3, [pc, #424]	; (8000a04 <main+0x584>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
			DEC_Boucing();
 8000860:	f000 f9d2 	bl	8000c08 <DEC_Boucing>
			Buzzer_Teclas();
 8000864:	f000 f9a6 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 8000868:	f7ff fdec 	bl	8000444 <LCD_Clear>
			d_inc -= 5;
 800086c:	4b66      	ldr	r3, [pc, #408]	; (8000a08 <main+0x588>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3b05      	subs	r3, #5
 8000872:	4a65      	ldr	r2, [pc, #404]	; (8000a08 <main+0x588>)
 8000874:	6013      	str	r3, [r2, #0]
			sprintf(buffer_decel, "%d", d_inc);
 8000876:	4b64      	ldr	r3, [pc, #400]	; (8000a08 <main+0x588>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	495e      	ldr	r1, [pc, #376]	; (80009f8 <main+0x578>)
 800087e:	4863      	ldr	r0, [pc, #396]	; (8000a0c <main+0x58c>)
 8000880:	f002 f846 	bl	8002910 <siprintf>
			menu = 7;
 8000884:	4b5e      	ldr	r3, [pc, #376]	; (8000a00 <main+0x580>)
 8000886:	2207      	movs	r2, #7
 8000888:	601a      	str	r2, [r3, #0]
		}

		if ((config_finish == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 800088a:	4b62      	ldr	r3, [pc, #392]	; (8000a14 <main+0x594>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d11d      	bne.n	80008ce <main+0x44e>
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	4855      	ldr	r0, [pc, #340]	; (80009ec <main+0x56c>)
 8000898:	f000 ff2c 	bl	80016f4 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d015      	beq.n	80008ce <main+0x44e>
		{
			d_inc = d_inc;
 80008a2:	4b59      	ldr	r3, [pc, #356]	; (8000a08 <main+0x588>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a58      	ldr	r2, [pc, #352]	; (8000a08 <main+0x588>)
 80008a8:	6013      	str	r3, [r2, #0]
			inc_decel = 0;
 80008aa:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <main+0x590>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
			ENTER_Boucing();
 80008b0:	f000 f9bc 	bl	8000c2c <ENTER_Boucing>
			Buzzer_Teclas();
 80008b4:	f000 f97e 	bl	8000bb4 <Buzzer_Teclas>
			LCD_Clear();
 80008b8:	f7ff fdc4 	bl	8000444 <LCD_Clear>
			start = 1;
 80008bc:	4b56      	ldr	r3, [pc, #344]	; (8000a18 <main+0x598>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
			menu = 0;
 80008c2:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <main+0x580>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
			config_finish = 0;
 80008c8:	4b52      	ldr	r3, [pc, #328]	; (8000a14 <main+0x594>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
		}

		switch (menu)
 80008ce:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <main+0x580>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	2b06      	cmp	r3, #6
 80008d6:	f200 80e3 	bhi.w	8000aa0 <main+0x620>
 80008da:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <main+0x460>)
 80008dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e0:	080008fd 	.word	0x080008fd
 80008e4:	08000921 	.word	0x08000921
 80008e8:	08000953 	.word	0x08000953
 80008ec:	08000985 	.word	0x08000985
 80008f0:	080009b7 	.word	0x080009b7
 80008f4:	08000a3d 	.word	0x08000a3d
 80008f8:	08000a6f 	.word	0x08000a6f
		{
		case 1:
			LCD_Cursor(0, 2);
 80008fc:	2102      	movs	r1, #2
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fc24 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000904:	4845      	ldr	r0, [pc, #276]	; (8000a1c <main+0x59c>)
 8000906:	f7ff fcd1 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 800090a:	2100      	movs	r1, #0
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fc1d 	bl	800014c <LCD_Cursor>
			LCD_String("<     MENU    ");
 8000912:	4843      	ldr	r0, [pc, #268]	; (8000a20 <main+0x5a0>)
 8000914:	f7ff fcca 	bl	80002ac <LCD_String>
			aux_menu = 1;
 8000918:	4b42      	ldr	r3, [pc, #264]	; (8000a24 <main+0x5a4>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]
			break;
 800091e:	e0bf      	b.n	8000aa0 <main+0x620>

		case 2:
			LCD_Cursor(0, 0);
 8000920:	2100      	movs	r1, #0
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fc12 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 8000928:	483f      	ldr	r0, [pc, #252]	; (8000a28 <main+0x5a8>)
 800092a:	f7ff fcbf 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 800092e:	2107      	movs	r1, #7
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fc0b 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 8000936:	483d      	ldr	r0, [pc, #244]	; (8000a2c <main+0x5ac>)
 8000938:	f7ff fcb8 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 800093c:	2108      	movs	r1, #8
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff fc04 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000944:	483a      	ldr	r0, [pc, #232]	; (8000a30 <main+0x5b0>)
 8000946:	f7ff fcb1 	bl	80002ac <LCD_String>
			aux_accel = 1;
 800094a:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <main+0x5b4>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
			break;
 8000950:	e0a6      	b.n	8000aa0 <main+0x620>

		case 3:
			LCD_Cursor(0, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fbf9 	bl	800014c <LCD_Cursor>
			LCD_String("   ACCEL TIME   ");
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <main+0x5a8>)
 800095c:	f7ff fca6 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 8000960:	2106      	movs	r1, #6
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff fbf2 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_accel);
 8000968:	4830      	ldr	r0, [pc, #192]	; (8000a2c <main+0x5ac>)
 800096a:	f7ff fc9f 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 800096e:	2108      	movs	r1, #8
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fbeb 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000976:	482e      	ldr	r0, [pc, #184]	; (8000a30 <main+0x5b0>)
 8000978:	f7ff fc98 	bl	80002ac <LCD_String>
			aux_running = 1;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <main+0x574>)
 800097e:	2201      	movs	r2, #1
 8000980:	601a      	str	r2, [r3, #0]
			break;
 8000982:	e08d      	b.n	8000aa0 <main+0x620>

		case 4:
			LCD_Cursor(0, 0);
 8000984:	2100      	movs	r1, #0
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fbe0 	bl	800014c <LCD_Cursor>
			LCD_String("  RUNNING TIME  ");
 800098c:	482a      	ldr	r0, [pc, #168]	; (8000a38 <main+0x5b8>)
 800098e:	f7ff fc8d 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 8000992:	2107      	movs	r1, #7
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fbd9 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <main+0x57c>)
 800099c:	f7ff fc86 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 80009a0:	2108      	movs	r1, #8
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff fbd2 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 80009a8:	4821      	ldr	r0, [pc, #132]	; (8000a30 <main+0x5b0>)
 80009aa:	f7ff fc7f 	bl	80002ac <LCD_String>
			inc_running = 1;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <main+0x568>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
			break;
 80009b4:	e074      	b.n	8000aa0 <main+0x620>

		case 5:
			LCD_Cursor(0, 0);
 80009b6:	2100      	movs	r1, #0
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff fbc7 	bl	800014c <LCD_Cursor>
			LCD_String("  RUNNING TIME  ");
 80009be:	481e      	ldr	r0, [pc, #120]	; (8000a38 <main+0x5b8>)
 80009c0:	f7ff fc74 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 80009c4:	2106      	movs	r1, #6
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff fbc0 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_running);
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <main+0x57c>)
 80009ce:	f7ff fc6d 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 80009d2:	2108      	movs	r1, #8
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff fbb9 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 80009da:	4815      	ldr	r0, [pc, #84]	; (8000a30 <main+0x5b0>)
 80009dc:	f7ff fc66 	bl	80002ac <LCD_String>
			aux_decel = 1;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <main+0x584>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
			break;
 80009e6:	e05b      	b.n	8000aa0 <main+0x620>
 80009e8:	200000ec 	.word	0x200000ec
 80009ec:	40010c00 	.word	0x40010c00
 80009f0:	200000e4 	.word	0x200000e4
 80009f4:	200000d4 	.word	0x200000d4
 80009f8:	080032ac 	.word	0x080032ac
 80009fc:	20000104 	.word	0x20000104
 8000a00:	200000c0 	.word	0x200000c0
 8000a04:	200000d8 	.word	0x200000d8
 8000a08:	200000e8 	.word	0x200000e8
 8000a0c:	20000114 	.word	0x20000114
 8000a10:	200000f0 	.word	0x200000f0
 8000a14:	200000dc 	.word	0x200000dc
 8000a18:	200000c4 	.word	0x200000c4
 8000a1c:	0800328c 	.word	0x0800328c
 8000a20:	080032b0 	.word	0x080032b0
 8000a24:	200000c8 	.word	0x200000c8
 8000a28:	080032c0 	.word	0x080032c0
 8000a2c:	200000f4 	.word	0x200000f4
 8000a30:	080032d4 	.word	0x080032d4
 8000a34:	200000d0 	.word	0x200000d0
 8000a38:	080032d8 	.word	0x080032d8

		case 6:
			LCD_Cursor(0, 0);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fb84 	bl	800014c <LCD_Cursor>
			LCD_String("   DECEL TIME   ");
 8000a44:	484d      	ldr	r0, [pc, #308]	; (8000b7c <main+0x6fc>)
 8000a46:	f7ff fc31 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 7);
 8000a4a:	2107      	movs	r1, #7
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fb7d 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000a52:	484b      	ldr	r0, [pc, #300]	; (8000b80 <main+0x700>)
 8000a54:	f7ff fc2a 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000a58:	2108      	movs	r1, #8
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff fb76 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000a60:	4848      	ldr	r0, [pc, #288]	; (8000b84 <main+0x704>)
 8000a62:	f7ff fc23 	bl	80002ac <LCD_String>
			inc_decel = 1;
 8000a66:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <main+0x708>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
			break;
 8000a6c:	e018      	b.n	8000aa0 <main+0x620>

		case 7:
			LCD_Cursor(0, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fb6b 	bl	800014c <LCD_Cursor>
			LCD_String("   DECEL TIME   ");
 8000a76:	4841      	ldr	r0, [pc, #260]	; (8000b7c <main+0x6fc>)
 8000a78:	f7ff fc18 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 6);
 8000a7c:	2106      	movs	r1, #6
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff fb64 	bl	800014c <LCD_Cursor>
			LCD_String(buffer_decel);
 8000a84:	483e      	ldr	r0, [pc, #248]	; (8000b80 <main+0x700>)
 8000a86:	f7ff fc11 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 8);
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff fb5d 	bl	800014c <LCD_Cursor>
			LCD_String("s");
 8000a92:	483c      	ldr	r0, [pc, #240]	; (8000b84 <main+0x704>)
 8000a94:	f7ff fc0a 	bl	80002ac <LCD_String>
			config_finish = 1;
 8000a98:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <main+0x70c>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
			break;
 8000a9e:	bf00      	nop
		}

		switch (start)
 8000aa0:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <main+0x710>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d028      	beq.n	8000afa <main+0x67a>
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	f73f ad0c 	bgt.w	80004c6 <main+0x46>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d002      	beq.n	8000ab8 <main+0x638>
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d00f      	beq.n	8000ad6 <main+0x656>
 8000ab6:	e060      	b.n	8000b7a <main+0x6fa>
		{

		case 1:
			LCD_Cursor(0, 2);
 8000ab8:	2102      	movs	r1, #2
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff fb46 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000ac0:	4834      	ldr	r0, [pc, #208]	; (8000b94 <main+0x714>)
 8000ac2:	f7ff fbf3 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff fb3f 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000ace:	4832      	ldr	r0, [pc, #200]	; (8000b98 <main+0x718>)
 8000ad0:	f7ff fbec 	bl	80002ac <LCD_String>
			break;
 8000ad4:	e051      	b.n	8000b7a <main+0x6fa>

		case 2:
			LCD_Cursor(0, 2);
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff fb37 	bl	800014c <LCD_Cursor>
			LCD_String("DC MOTOR SYS");
 8000ade:	482d      	ldr	r0, [pc, #180]	; (8000b94 <main+0x714>)
 8000ae0:	f7ff fbe4 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fb30 	bl	800014c <LCD_Cursor>
			LCD_String("     START     >");
 8000aec:	482a      	ldr	r0, [pc, #168]	; (8000b98 <main+0x718>)
 8000aee:	f7ff fbdd 	bl	80002ac <LCD_String>
			aux_start = 1;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <main+0x71c>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
			break;
 8000af8:	e03f      	b.n	8000b7a <main+0x6fa>

		case 3:
			LCD_Cursor(0, 0);
 8000afa:	2100      	movs	r1, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fb25 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    ACCEL");
 8000b02:	4827      	ldr	r0, [pc, #156]	; (8000ba0 <main+0x720>)
 8000b04:	f7ff fbd2 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff fb1e 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000  t:10s");
 8000b10:	4824      	ldr	r0, [pc, #144]	; (8000ba4 <main+0x724>)
 8000b12:	f7ff fbcb 	bl	80002ac <LCD_String>
			HAL_Delay(10000);
 8000b16:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b1a:	f000 fb67 	bl	80011ec <HAL_Delay>
			LCD_Clear();
 8000b1e:	f7ff fc91 	bl	8000444 <LCD_Clear>

			LCD_Cursor(0, 0);
 8000b22:	2100      	movs	r1, #0
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fb11 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:  RUNNING");
 8000b2a:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <main+0x728>)
 8000b2c:	f7ff fbbe 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fb0a 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000 t:120s");
 8000b38:	481c      	ldr	r0, [pc, #112]	; (8000bac <main+0x72c>)
 8000b3a:	f7ff fbb7 	bl	80002ac <LCD_String>
			HAL_Delay(10000);
 8000b3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b42:	f000 fb53 	bl	80011ec <HAL_Delay>
			LCD_Clear();
 8000b46:	f7ff fc7d 	bl	8000444 <LCD_Clear>

			LCD_Cursor(0, 0);
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fafd 	bl	800014c <LCD_Cursor>
			LCD_String("STATUS:    DECEL");
 8000b52:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <main+0x730>)
 8000b54:	f7ff fbaa 	bl	80002ac <LCD_String>
			LCD_Cursor(1, 0);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff faf6 	bl	800014c <LCD_Cursor>
			LCD_String("RPM: 1000  t:10s");
 8000b60:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <main+0x724>)
 8000b62:	f7ff fba3 	bl	80002ac <LCD_String>
			HAL_Delay(10000);
 8000b66:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b6a:	f000 fb3f 	bl	80011ec <HAL_Delay>
			LCD_Clear();
 8000b6e:	f7ff fc69 	bl	8000444 <LCD_Clear>
			start = 1;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <main+0x710>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
			break;
 8000b78:	bf00      	nop
		if ((start == 1) && (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)))
 8000b7a:	e4a4      	b.n	80004c6 <main+0x46>
 8000b7c:	080032ec 	.word	0x080032ec
 8000b80:	20000114 	.word	0x20000114
 8000b84:	080032d4 	.word	0x080032d4
 8000b88:	200000f0 	.word	0x200000f0
 8000b8c:	200000dc 	.word	0x200000dc
 8000b90:	200000c4 	.word	0x200000c4
 8000b94:	0800328c 	.word	0x0800328c
 8000b98:	08003300 	.word	0x08003300
 8000b9c:	200000cc 	.word	0x200000cc
 8000ba0:	08003314 	.word	0x08003314
 8000ba4:	08003328 	.word	0x08003328
 8000ba8:	0800333c 	.word	0x0800333c
 8000bac:	08003350 	.word	0x08003350
 8000bb0:	08003364 	.word	0x08003364

08000bb4 <Buzzer_Teclas>:
	}

    /* USER CODE BEGIN 3 */
  }
	void Buzzer_Teclas()
	{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2102      	movs	r1, #2
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <Buzzer_Teclas+0x28>)
 8000bbe:	f000 fdb0 	bl	8001722 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000bc2:	2032      	movs	r0, #50	; 0x32
 8000bc4:	f000 fb12 	bl	80011ec <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2102      	movs	r1, #2
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <Buzzer_Teclas+0x28>)
 8000bce:	f000 fda8 	bl	8001722 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000bd2:	2032      	movs	r0, #50	; 0x32
 8000bd4:	f000 fb0a 	bl	80011ec <HAL_Delay>
	}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010800 	.word	0x40010800

08000be0 <INC_Boucing>:

	void INC_Boucing()
	{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000be4:	200a      	movs	r0, #10
 8000be6:	f000 fb01 	bl	80011ec <HAL_Delay>
		while (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin));
 8000bea:	bf00      	nop
 8000bec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <INC_Boucing+0x24>)
 8000bf2:	f000 fd7f 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f7      	bne.n	8000bec <INC_Boucing+0xc>
	}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40010c00 	.word	0x40010c00

08000c08 <DEC_Boucing>:
	void DEC_Boucing()
	{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f000 faed 	bl	80011ec <HAL_Delay>
		while (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin));
 8000c12:	bf00      	nop
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4804      	ldr	r0, [pc, #16]	; (8000c28 <DEC_Boucing+0x20>)
 8000c18:	f000 fd6c 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f8      	bne.n	8000c14 <DEC_Boucing+0xc>
	}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40010c00 	.word	0x40010c00

08000c2c <ENTER_Boucing>:
	void ENTER_Boucing()
	{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f000 fadb 	bl	80011ec <HAL_Delay>
		while (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin));
 8000c36:	bf00      	nop
 8000c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <ENTER_Boucing+0x24>)
 8000c3e:	f000 fd59 	bl	80016f4 <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1f7      	bne.n	8000c38 <ENTER_Boucing+0xc>
	}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b090      	sub	sp, #64	; 0x40
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	2228      	movs	r2, #40	; 0x28
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fe74 	bl	8002950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fd59 	bl	8001754 <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ca8:	f000 f930 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	230f      	movs	r3, #15
 8000cae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 ffc6 	bl	8001c58 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cd2:	f000 f91b 	bl	8000f0c <Error_Handler>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3740      	adds	r7, #64	; 0x40
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	f107 0320 	add.w	r3, r7, #32
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d1a:	2247      	movs	r2, #71	; 0x47
 8000d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d38:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d3a:	f001 f8e9 	bl	8001f10 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d44:	f000 f8e2 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d52:	4619      	mov	r1, r3
 8000d54:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d56:	f001 fa45 	bl	80021e4 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d60:	f000 f8d4 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d66:	f001 f922 	bl	8001fae <HAL_TIM_PWM_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d70:	f000 f8cc 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	4619      	mov	r1, r3
 8000d82:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000d84:	f001 fd6c 	bl	8002860 <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d8e:	f000 f8bd 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2360      	movs	r3, #96	; 0x60
 8000d94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2208      	movs	r2, #8
 8000da6:	4619      	mov	r1, r3
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000daa:	f001 f959 	bl	8002060 <HAL_TIM_PWM_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000db4:	f000 f8aa 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM2_Init+0xe8>)
 8000dba:	f000 f8fb 	bl	8000fb4 <HAL_TIM_MspPostInit>

}
 8000dbe:	bf00      	nop
 8000dc0:	3738      	adds	r7, #56	; 0x38
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000078 	.word	0x20000078

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a44      	ldr	r2, [pc, #272]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df8:	4b3f      	ldr	r3, [pc, #252]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a3e      	ldr	r2, [pc, #248]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0320 	and.w	r3, r3, #32
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a38      	ldr	r2, [pc, #224]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a32      	ldr	r2, [pc, #200]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <MX_GPIO_Init+0x12c>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e46:	482d      	ldr	r0, [pc, #180]	; (8000efc <MX_GPIO_Init+0x130>)
 8000e48:	f000 fc6b 	bl	8001722 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	213b      	movs	r1, #59	; 0x3b
 8000e50:	482b      	ldr	r0, [pc, #172]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e52:	f000 fc66 	bl	8001722 <HAL_GPIO_WritePin>
                          |D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f241 0108 	movw	r1, #4104	; 0x1008
 8000e5c:	4829      	ldr	r0, [pc, #164]	; (8000f04 <MX_GPIO_Init+0x138>)
 8000e5e:	f000 fc60 	bl	8001722 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4820      	ldr	r0, [pc, #128]	; (8000efc <MX_GPIO_Init+0x130>)
 8000e7c:	f000 fabe 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin BUZZER_Pin RS_Pin D4_Pin
                           D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|BUZZER_Pin|RS_Pin|D4_Pin
 8000e80:	233b      	movs	r3, #59	; 0x3b
 8000e82:	613b      	str	r3, [r7, #16]
                          |D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	481a      	ldr	r0, [pc, #104]	; (8000f00 <MX_GPIO_Init+0x134>)
 8000e98:	f000 fab0 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin;
 8000e9c:	f241 0308 	movw	r3, #4104	; 0x1008
 8000ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_GPIO_Init+0x138>)
 8000eb6:	f000 faa1 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TACHOMETER_Pin */
  GPIO_InitStruct.Pin = TACHOMETER_Pin;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_GPIO_Init+0x13c>)
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TACHOMETER_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_GPIO_Init+0x138>)
 8000ed0:	f000 fa94 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DEC_Pin ENTER_Pin INC_Pin */
  GPIO_InitStruct.Pin = DEC_Pin|ENTER_Pin|INC_Pin;
 8000ed4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_GPIO_Init+0x138>)
 8000eea:	f000 fa87 	bl	80013fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eee:	bf00      	nop
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40011000 	.word	0x40011000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	10110000 	.word	0x10110000

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>
	...

08000f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_MspInit+0x60>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_MspInit+0x60>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_TIM_Base_MspInit+0x34>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_TIM_Base_MspInit+0x34>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_TIM_Base_MspInit+0x34>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd2:	d117      	bne.n	8001004 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_TIM_MspPostInit+0x58>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <HAL_TIM_MspPostInit+0x58>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_TIM_MspPostInit+0x58>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_Pin;
 8000fec:	2304      	movs	r3, #4
 8000fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <HAL_TIM_MspPostInit+0x5c>)
 8001000:	f000 f9fc 	bl	80013fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	40010800 	.word	0x40010800

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f000 f8ab 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f001 fc64 	bl	8002960 <__errno>
 8001098:	4603      	mov	r3, r0
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20002800 	.word	0x20002800
 80010c4:	00000400 	.word	0x00000400
 80010c8:	20000124 	.word	0x20000124
 80010cc:	20000278 	.word	0x20000278

080010d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff fff8 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010e2:	490c      	ldr	r1, [pc, #48]	; (8001114 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010e4:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010f8:	4c09      	ldr	r4, [pc, #36]	; (8001120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f001 fc31 	bl	800296c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f7ff f9b9 	bl	8000480 <main>
  bx lr
 800110e:	4770      	bx	lr
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001118:	080033d8 	.word	0x080033d8
  ldr r2, =_sbss
 800111c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001120:	20000274 	.word	0x20000274

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_Init+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_Init+0x28>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f92b 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	200f      	movs	r0, #15
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fee8 	bl	8000f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f935 	bl	80013e2 <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f90b 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <HAL_IncTick+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000128 	.word	0x20000128

080011d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	20000128 	.word	0x20000128

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff fff0 	bl	80011d8 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffe0 	bl	80011d8 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff90 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff49 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff5e 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff90 	bl	80012ec <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5f 	bl	8001298 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffb0 	bl	8001350 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b08b      	sub	sp, #44	; 0x2c
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	e161      	b.n	80016d4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001410:	2201      	movs	r2, #1
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 8150 	bne.w	80016ce <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a97      	ldr	r2, [pc, #604]	; (8001690 <HAL_GPIO_Init+0x294>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d05e      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001438:	4a95      	ldr	r2, [pc, #596]	; (8001690 <HAL_GPIO_Init+0x294>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d875      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800143e:	4a95      	ldr	r2, [pc, #596]	; (8001694 <HAL_GPIO_Init+0x298>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d058      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001444:	4a93      	ldr	r2, [pc, #588]	; (8001694 <HAL_GPIO_Init+0x298>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d86f      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800144a:	4a93      	ldr	r2, [pc, #588]	; (8001698 <HAL_GPIO_Init+0x29c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d052      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001450:	4a91      	ldr	r2, [pc, #580]	; (8001698 <HAL_GPIO_Init+0x29c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d869      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001456:	4a91      	ldr	r2, [pc, #580]	; (800169c <HAL_GPIO_Init+0x2a0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d04c      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 800145c:	4a8f      	ldr	r2, [pc, #572]	; (800169c <HAL_GPIO_Init+0x2a0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d863      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001462:	4a8f      	ldr	r2, [pc, #572]	; (80016a0 <HAL_GPIO_Init+0x2a4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d046      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
 8001468:	4a8d      	ldr	r2, [pc, #564]	; (80016a0 <HAL_GPIO_Init+0x2a4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d85d      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 800146e:	2b12      	cmp	r3, #18
 8001470:	d82a      	bhi.n	80014c8 <HAL_GPIO_Init+0xcc>
 8001472:	2b12      	cmp	r3, #18
 8001474:	d859      	bhi.n	800152a <HAL_GPIO_Init+0x12e>
 8001476:	a201      	add	r2, pc, #4	; (adr r2, 800147c <HAL_GPIO_Init+0x80>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	080014f7 	.word	0x080014f7
 8001480:	080014d1 	.word	0x080014d1
 8001484:	080014e3 	.word	0x080014e3
 8001488:	08001525 	.word	0x08001525
 800148c:	0800152b 	.word	0x0800152b
 8001490:	0800152b 	.word	0x0800152b
 8001494:	0800152b 	.word	0x0800152b
 8001498:	0800152b 	.word	0x0800152b
 800149c:	0800152b 	.word	0x0800152b
 80014a0:	0800152b 	.word	0x0800152b
 80014a4:	0800152b 	.word	0x0800152b
 80014a8:	0800152b 	.word	0x0800152b
 80014ac:	0800152b 	.word	0x0800152b
 80014b0:	0800152b 	.word	0x0800152b
 80014b4:	0800152b 	.word	0x0800152b
 80014b8:	0800152b 	.word	0x0800152b
 80014bc:	0800152b 	.word	0x0800152b
 80014c0:	080014d9 	.word	0x080014d9
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	4a76      	ldr	r2, [pc, #472]	; (80016a4 <HAL_GPIO_Init+0x2a8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ce:	e02c      	b.n	800152a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e029      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	3304      	adds	r3, #4
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e024      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	3308      	adds	r3, #8
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e01f      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	330c      	adds	r3, #12
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	e01a      	b.n	800152c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014fe:	2304      	movs	r3, #4
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e013      	b.n	800152c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800150c:	2308      	movs	r3, #8
 800150e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	611a      	str	r2, [r3, #16]
          break;
 8001516:	e009      	b.n	800152c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001518:	2308      	movs	r3, #8
 800151a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	615a      	str	r2, [r3, #20]
          break;
 8001522:	e003      	b.n	800152c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x130>
          break;
 800152a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2bff      	cmp	r3, #255	; 0xff
 8001530:	d801      	bhi.n	8001536 <HAL_GPIO_Init+0x13a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	e001      	b.n	800153a <HAL_GPIO_Init+0x13e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3304      	adds	r3, #4
 800153a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2bff      	cmp	r3, #255	; 0xff
 8001540:	d802      	bhi.n	8001548 <HAL_GPIO_Init+0x14c>
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	e002      	b.n	800154e <HAL_GPIO_Init+0x152>
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	3b08      	subs	r3, #8
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	210f      	movs	r1, #15
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	401a      	ands	r2, r3
 8001560:	6a39      	ldr	r1, [r7, #32]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80a9 	beq.w	80016ce <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <HAL_GPIO_Init+0x2ac>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_GPIO_Init+0x2ac>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_GPIO_Init+0x2ac>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001594:	4a45      	ldr	r2, [pc, #276]	; (80016ac <HAL_GPIO_Init+0x2b0>)
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <HAL_GPIO_Init+0x2b4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00d      	beq.n	80015dc <HAL_GPIO_Init+0x1e0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <HAL_GPIO_Init+0x2b8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1dc>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3b      	ldr	r2, [pc, #236]	; (80016b8 <HAL_GPIO_Init+0x2bc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_GPIO_Init+0x1d8>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e004      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015d4:	2303      	movs	r3, #3
 80015d6:	e002      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015dc:	2300      	movs	r3, #0
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4093      	lsls	r3, r2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ee:	492f      	ldr	r1, [pc, #188]	; (80016ac <HAL_GPIO_Init+0x2b0>)
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	492b      	ldr	r1, [pc, #172]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	608b      	str	r3, [r1, #8]
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	43db      	mvns	r3, r3
 800161e:	4927      	ldr	r1, [pc, #156]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001620:	4013      	ands	r3, r2
 8001622:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	4921      	ldr	r1, [pc, #132]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	60cb      	str	r3, [r1, #12]
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800163e:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	43db      	mvns	r3, r3
 8001646:	491d      	ldr	r1, [pc, #116]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001648:	4013      	ands	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4917      	ldr	r1, [pc, #92]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001670:	4013      	ands	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01f      	beq.n	80016c0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	490d      	ldr	r1, [pc, #52]	; (80016bc <HAL_GPIO_Init+0x2c0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
 800168c:	e01f      	b.n	80016ce <HAL_GPIO_Init+0x2d2>
 800168e:	bf00      	nop
 8001690:	10320000 	.word	0x10320000
 8001694:	10310000 	.word	0x10310000
 8001698:	10220000 	.word	0x10220000
 800169c:	10210000 	.word	0x10210000
 80016a0:	10120000 	.word	0x10120000
 80016a4:	10110000 	.word	0x10110000
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010000 	.word	0x40010000
 80016b0:	40010800 	.word	0x40010800
 80016b4:	40010c00 	.word	0x40010c00
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_GPIO_Init+0x2f4>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	4909      	ldr	r1, [pc, #36]	; (80016f0 <HAL_GPIO_Init+0x2f4>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	3301      	adds	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f47f ae96 	bne.w	8001410 <HAL_GPIO_Init+0x14>
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	372c      	adds	r7, #44	; 0x2c
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e001      	b.n	8001716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001732:	787b      	ldrb	r3, [r7, #1]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001738:	887a      	ldrh	r2, [r7, #2]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800173e:	e003      	b.n	8001748 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	041a      	lsls	r2, r3, #16
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	611a      	str	r2, [r3, #16]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
	...

08001754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e272      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8087 	beq.w	8001882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001774:	4b92      	ldr	r3, [pc, #584]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b04      	cmp	r3, #4
 800177e:	d00c      	beq.n	800179a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001780:	4b8f      	ldr	r3, [pc, #572]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d112      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5e>
 800178c:	4b8c      	ldr	r3, [pc, #560]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d10b      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179a:	4b89      	ldr	r3, [pc, #548]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d06c      	beq.n	8001880 <HAL_RCC_OscConfig+0x12c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d168      	bne.n	8001880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e24c      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x76>
 80017bc:	4b80      	ldr	r3, [pc, #512]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a7f      	ldr	r2, [pc, #508]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e02e      	b.n	8001828 <HAL_RCC_OscConfig+0xd4>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x98>
 80017d2:	4b7b      	ldr	r3, [pc, #492]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7a      	ldr	r2, [pc, #488]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b78      	ldr	r3, [pc, #480]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a77      	ldr	r2, [pc, #476]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e01d      	b.n	8001828 <HAL_RCC_OscConfig+0xd4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0xbc>
 80017f6:	4b72      	ldr	r3, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a71      	ldr	r2, [pc, #452]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b6f      	ldr	r3, [pc, #444]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a6e      	ldr	r2, [pc, #440]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0xd4>
 8001810:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a6a      	ldr	r2, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a67      	ldr	r2, [pc, #412]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001826:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fcd2 	bl	80011d8 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fcce 	bl	80011d8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	; 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e200      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0xe4>
 8001856:	e014      	b.n	8001882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fcbe 	bl	80011d8 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fcba 	bl	80011d8 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e1ec      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x10c>
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d063      	beq.n	8001956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800188e:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800189a:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d11c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x18c>
 80018a6:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d116      	bne.n	80018e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_RCC_OscConfig+0x176>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e1c0      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4939      	ldr	r1, [pc, #228]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	e03a      	b.n	8001956 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fc73 	bl	80011d8 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fc6f 	bl	80011d8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1a1      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4927      	ldr	r1, [pc, #156]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
 8001928:	e015      	b.n	8001956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_RCC_OscConfig+0x270>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fc52 	bl	80011d8 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001938:	f7ff fc4e 	bl	80011d8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e180      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d03a      	beq.n	80019d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d019      	beq.n	800199e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_RCC_OscConfig+0x274>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff fc32 	bl	80011d8 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff fc2e 	bl	80011d8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e160      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_RCC_OscConfig+0x26c>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001996:	2001      	movs	r0, #1
 8001998:	f000 fa9c 	bl	8001ed4 <RCC_Delay>
 800199c:	e01c      	b.n	80019d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_RCC_OscConfig+0x274>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7ff fc18 	bl	80011d8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019aa:	e00f      	b.n	80019cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff fc14 	bl	80011d8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d908      	bls.n	80019cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e146      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	42420000 	.word	0x42420000
 80019c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	4b92      	ldr	r3, [pc, #584]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e9      	bne.n	80019ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80a6 	beq.w	8001b32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ea:	4b8b      	ldr	r3, [pc, #556]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10d      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a87      	ldr	r2, [pc, #540]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b85      	ldr	r3, [pc, #532]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d118      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4b7f      	ldr	r3, [pc, #508]	; (8001c1c <HAL_RCC_OscConfig+0x4c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7e      	ldr	r2, [pc, #504]	; (8001c1c <HAL_RCC_OscConfig+0x4c8>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fbd5 	bl	80011d8 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff fbd1 	bl	80011d8 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b64      	cmp	r3, #100	; 0x64
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e103      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	4b75      	ldr	r3, [pc, #468]	; (8001c1c <HAL_RCC_OscConfig+0x4c8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x312>
 8001a58:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	e02d      	b.n	8001ac2 <HAL_RCC_OscConfig+0x36e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x334>
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	4a69      	ldr	r2, [pc, #420]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6213      	str	r3, [r2, #32]
 8001a7a:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a66      	ldr	r2, [pc, #408]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	6213      	str	r3, [r2, #32]
 8001a86:	e01c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x36e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d10c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x356>
 8001a90:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4a60      	ldr	r2, [pc, #384]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6213      	str	r3, [r2, #32]
 8001a9c:	4b5e      	ldr	r3, [pc, #376]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a5d      	ldr	r2, [pc, #372]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	e00b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x36e>
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a57      	ldr	r2, [pc, #348]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d015      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aca:	f7ff fb85 	bl	80011d8 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff fb81 	bl	80011d8 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0b1      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ee      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x37e>
 8001af4:	e014      	b.n	8001b20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb6f 	bl	80011d8 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff fb6b 	bl	80011d8 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e09b      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	4b40      	ldr	r3, [pc, #256]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1ee      	bne.n	8001afe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b26:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a3b      	ldr	r2, [pc, #236]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8087 	beq.w	8001c4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d061      	beq.n	8001c0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d146      	bne.n	8001bde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <HAL_RCC_OscConfig+0x4cc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff fb3f 	bl	80011d8 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7ff fb3b 	bl	80011d8 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e06d      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d108      	bne.n	8001b98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4921      	ldr	r1, [pc, #132]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a19      	ldr	r1, [r3, #32]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	491b      	ldr	r1, [pc, #108]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x4cc>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fb0f 	bl	80011d8 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7ff fb0b 	bl	80011d8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e03d      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x46a>
 8001bdc:	e035      	b.n	8001c4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_OscConfig+0x4cc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff faf8 	bl	80011d8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff faf4 	bl	80011d8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e026      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x498>
 8001c0a:	e01e      	b.n	8001c4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e019      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_OscConfig+0x500>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0d0      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d910      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4965      	ldr	r1, [pc, #404]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b8      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	494d      	ldr	r1, [pc, #308]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d040      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d115      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e073      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06b      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4936      	ldr	r1, [pc, #216]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7ff fa46 	bl	80011d8 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7ff fa42 	bl	80011d8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e053      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d210      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 0207 	bic.w	r2, r3, #7
 8001d8e:	4922      	ldr	r1, [pc, #136]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4916      	ldr	r1, [pc, #88]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001de6:	f000 f821 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	490a      	ldr	r1, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
 8001dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1cc>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_ClockConfig+0x1d0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f9a4 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08003378 	.word	0x08003378
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x30>
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x36>
 8001e5a:	e027      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5e:	613b      	str	r3, [r7, #16]
      break;
 8001e60:	e027      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	0c9b      	lsrs	r3, r3, #18
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0c5b      	lsrs	r3, r3, #17
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e8e:	fb03 f202 	mul.w	r2, r3, r2
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e004      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	613b      	str	r3, [r7, #16]
      break;
 8001eaa:	e002      	b.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eae:	613b      	str	r3, [r7, #16]
      break;
 8001eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb2:	693b      	ldr	r3, [r7, #16]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	007a1200 	.word	0x007a1200
 8001ec8:	08003388 	.word	0x08003388
 8001ecc:	08003398 	.word	0x08003398
 8001ed0:	003d0900 	.word	0x003d0900

08001ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <RCC_Delay+0x34>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <RCC_Delay+0x38>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0a5b      	lsrs	r3, r3, #9
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ef0:	bf00      	nop
  }
  while (Delay --);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	60fa      	str	r2, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f9      	bne.n	8001ef0 <RCC_Delay+0x1c>
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	10624dd3 	.word	0x10624dd3

08001f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e041      	b.n	8001fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff f820 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 fa10 	bl	8002374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e041      	b.n	8002044 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d106      	bne.n	8001fda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f839 	bl	800204c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4610      	mov	r0, r2
 8001fee:	f000 f9c1 	bl	8002374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
	...

08002060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800207a:	2302      	movs	r3, #2
 800207c:	e0ae      	b.n	80021dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	f200 809f 	bhi.w	80021cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	080020c9 	.word	0x080020c9
 8002098:	080021cd 	.word	0x080021cd
 800209c:	080021cd 	.word	0x080021cd
 80020a0:	080021cd 	.word	0x080021cd
 80020a4:	08002109 	.word	0x08002109
 80020a8:	080021cd 	.word	0x080021cd
 80020ac:	080021cd 	.word	0x080021cd
 80020b0:	080021cd 	.word	0x080021cd
 80020b4:	0800214b 	.word	0x0800214b
 80020b8:	080021cd 	.word	0x080021cd
 80020bc:	080021cd 	.word	0x080021cd
 80020c0:	080021cd 	.word	0x080021cd
 80020c4:	0800218b 	.word	0x0800218b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f9a8 	bl	8002424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0208 	orr.w	r2, r2, #8
 80020e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0204 	bic.w	r2, r2, #4
 80020f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6999      	ldr	r1, [r3, #24]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	619a      	str	r2, [r3, #24]
      break;
 8002106:	e064      	b.n	80021d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f9ee 	bl	80024f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6999      	ldr	r1, [r3, #24]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	021a      	lsls	r2, r3, #8
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	619a      	str	r2, [r3, #24]
      break;
 8002148:	e043      	b.n	80021d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fa37 	bl	80025c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0208 	orr.w	r2, r2, #8
 8002164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0204 	bic.w	r2, r2, #4
 8002174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69d9      	ldr	r1, [r3, #28]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	61da      	str	r2, [r3, #28]
      break;
 8002188:	e023      	b.n	80021d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fa81 	bl	8002698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69d9      	ldr	r1, [r3, #28]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	021a      	lsls	r2, r3, #8
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	61da      	str	r2, [r3, #28]
      break;
 80021ca:	e002      	b.n	80021d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]
      break;
 80021d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021da:	7dfb      	ldrb	r3, [r7, #23]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_TIM_ConfigClockSource+0x1c>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e0b4      	b.n	800236a <HAL_TIM_ConfigClockSource+0x186>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800221e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002238:	d03e      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0xd4>
 800223a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223e:	f200 8087 	bhi.w	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002246:	f000 8086 	beq.w	8002356 <HAL_TIM_ConfigClockSource+0x172>
 800224a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224e:	d87f      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002250:	2b70      	cmp	r3, #112	; 0x70
 8002252:	d01a      	beq.n	800228a <HAL_TIM_ConfigClockSource+0xa6>
 8002254:	2b70      	cmp	r3, #112	; 0x70
 8002256:	d87b      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002258:	2b60      	cmp	r3, #96	; 0x60
 800225a:	d050      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0x11a>
 800225c:	2b60      	cmp	r3, #96	; 0x60
 800225e:	d877      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002260:	2b50      	cmp	r3, #80	; 0x50
 8002262:	d03c      	beq.n	80022de <HAL_TIM_ConfigClockSource+0xfa>
 8002264:	2b50      	cmp	r3, #80	; 0x50
 8002266:	d873      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d058      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x13a>
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d86f      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002270:	2b30      	cmp	r3, #48	; 0x30
 8002272:	d064      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x15a>
 8002274:	2b30      	cmp	r3, #48	; 0x30
 8002276:	d86b      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002278:	2b20      	cmp	r3, #32
 800227a:	d060      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x15a>
 800227c:	2b20      	cmp	r3, #32
 800227e:	d867      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d05c      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x15a>
 8002284:	2b10      	cmp	r3, #16
 8002286:	d05a      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x15a>
 8002288:	e062      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800229a:	f000 fac2 	bl	8002822 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	609a      	str	r2, [r3, #8]
      break;
 80022b6:	e04f      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022c8:	f000 faab 	bl	8002822 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022da:	609a      	str	r2, [r3, #8]
      break;
 80022dc:	e03c      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ea:	461a      	mov	r2, r3
 80022ec:	f000 fa22 	bl	8002734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2150      	movs	r1, #80	; 0x50
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fa79 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 80022fc:	e02c      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800230a:	461a      	mov	r2, r3
 800230c:	f000 fa40 	bl	8002790 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2160      	movs	r1, #96	; 0x60
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fa69 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 800231c:	e01c      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800232a:	461a      	mov	r2, r3
 800232c:	f000 fa02 	bl	8002734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2140      	movs	r1, #64	; 0x40
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fa59 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 800233c:	e00c      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f000 fa50 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 800234e:	e003      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      break;
 8002354:	e000      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a25      	ldr	r2, [pc, #148]	; (800241c <TIM_Base_SetConfig+0xa8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d007      	beq.n	800239c <TIM_Base_SetConfig+0x28>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0x28>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a22      	ldr	r2, [pc, #136]	; (8002420 <TIM_Base_SetConfig+0xac>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1a      	ldr	r2, [pc, #104]	; (800241c <TIM_Base_SetConfig+0xa8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0x52>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0x52>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <TIM_Base_SetConfig+0xac>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d108      	bne.n	80023d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <TIM_Base_SetConfig+0xa8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d103      	bne.n	800240c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	615a      	str	r2, [r3, #20]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40000400 	.word	0x40000400

08002424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f023 0201 	bic.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f023 0302 	bic.w	r3, r3, #2
 800246c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <TIM_OC1_SetConfig+0xc8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d10c      	bne.n	800249a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0308 	bic.w	r3, r3, #8
 8002486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a13      	ldr	r2, [pc, #76]	; (80024ec <TIM_OC1_SetConfig+0xc8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d111      	bne.n	80024c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	621a      	str	r2, [r3, #32]
}
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40012c00 	.word	0x40012c00

080024f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f023 0210 	bic.w	r2, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800251e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f023 0320 	bic.w	r3, r3, #32
 800253a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <TIM_OC2_SetConfig+0xd0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d10d      	bne.n	800256c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <TIM_OC2_SetConfig+0xd0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d113      	bne.n	800259c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	621a      	str	r2, [r3, #32]
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40012c00 	.word	0x40012c00

080025c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0303 	bic.w	r3, r3, #3
 80025fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800260c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <TIM_OC3_SetConfig+0xd0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10d      	bne.n	800263e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800263c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a14      	ldr	r2, [pc, #80]	; (8002694 <TIM_OC3_SetConfig+0xd0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d113      	bne.n	800266e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800264c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	621a      	str	r2, [r3, #32]
}
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40012c00 	.word	0x40012c00

08002698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	031b      	lsls	r3, r3, #12
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <TIM_OC4_SetConfig+0x98>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d109      	bne.n	800270c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	621a      	str	r2, [r3, #32]
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	40012c00 	.word	0x40012c00

08002734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f023 0201 	bic.w	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800275e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f023 030a 	bic.w	r3, r3, #10
 8002770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	621a      	str	r2, [r3, #32]
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f023 0210 	bic.w	r2, r3, #16
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	031b      	lsls	r3, r3, #12
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	621a      	str	r2, [r3, #32]
}
 80027e4:	bf00      	nop
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	f043 0307 	orr.w	r3, r3, #7
 8002810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002822:	b480      	push	{r7}
 8002824:	b087      	sub	sp, #28
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800283c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	021a      	lsls	r2, r3, #8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	431a      	orrs	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4313      	orrs	r3, r2
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	609a      	str	r2, [r3, #8]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002874:	2302      	movs	r3, #2
 8002876:	e041      	b.n	80028fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d004      	beq.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a10      	ldr	r2, [pc, #64]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d10c      	bne.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40012c00 	.word	0x40012c00
 800290c:	40000400 	.word	0x40000400

08002910 <siprintf>:
 8002910:	b40e      	push	{r1, r2, r3}
 8002912:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002916:	b500      	push	{lr}
 8002918:	b09c      	sub	sp, #112	; 0x70
 800291a:	ab1d      	add	r3, sp, #116	; 0x74
 800291c:	9002      	str	r0, [sp, #8]
 800291e:	9006      	str	r0, [sp, #24]
 8002920:	9107      	str	r1, [sp, #28]
 8002922:	9104      	str	r1, [sp, #16]
 8002924:	4808      	ldr	r0, [pc, #32]	; (8002948 <siprintf+0x38>)
 8002926:	4909      	ldr	r1, [pc, #36]	; (800294c <siprintf+0x3c>)
 8002928:	f853 2b04 	ldr.w	r2, [r3], #4
 800292c:	9105      	str	r1, [sp, #20]
 800292e:	6800      	ldr	r0, [r0, #0]
 8002930:	a902      	add	r1, sp, #8
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	f000 f98e 	bl	8002c54 <_svfiprintf_r>
 8002938:	2200      	movs	r2, #0
 800293a:	9b02      	ldr	r3, [sp, #8]
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	b01c      	add	sp, #112	; 0x70
 8002940:	f85d eb04 	ldr.w	lr, [sp], #4
 8002944:	b003      	add	sp, #12
 8002946:	4770      	bx	lr
 8002948:	20000058 	.word	0x20000058
 800294c:	ffff0208 	.word	0xffff0208

08002950 <memset>:
 8002950:	4603      	mov	r3, r0
 8002952:	4402      	add	r2, r0
 8002954:	4293      	cmp	r3, r2
 8002956:	d100      	bne.n	800295a <memset+0xa>
 8002958:	4770      	bx	lr
 800295a:	f803 1b01 	strb.w	r1, [r3], #1
 800295e:	e7f9      	b.n	8002954 <memset+0x4>

08002960 <__errno>:
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <__errno+0x8>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000058 	.word	0x20000058

0800296c <__libc_init_array>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	2600      	movs	r6, #0
 8002970:	4d0c      	ldr	r5, [pc, #48]	; (80029a4 <__libc_init_array+0x38>)
 8002972:	4c0d      	ldr	r4, [pc, #52]	; (80029a8 <__libc_init_array+0x3c>)
 8002974:	1b64      	subs	r4, r4, r5
 8002976:	10a4      	asrs	r4, r4, #2
 8002978:	42a6      	cmp	r6, r4
 800297a:	d109      	bne.n	8002990 <__libc_init_array+0x24>
 800297c:	f000 fc7a 	bl	8003274 <_init>
 8002980:	2600      	movs	r6, #0
 8002982:	4d0a      	ldr	r5, [pc, #40]	; (80029ac <__libc_init_array+0x40>)
 8002984:	4c0a      	ldr	r4, [pc, #40]	; (80029b0 <__libc_init_array+0x44>)
 8002986:	1b64      	subs	r4, r4, r5
 8002988:	10a4      	asrs	r4, r4, #2
 800298a:	42a6      	cmp	r6, r4
 800298c:	d105      	bne.n	800299a <__libc_init_array+0x2e>
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	f855 3b04 	ldr.w	r3, [r5], #4
 8002994:	4798      	blx	r3
 8002996:	3601      	adds	r6, #1
 8002998:	e7ee      	b.n	8002978 <__libc_init_array+0xc>
 800299a:	f855 3b04 	ldr.w	r3, [r5], #4
 800299e:	4798      	blx	r3
 80029a0:	3601      	adds	r6, #1
 80029a2:	e7f2      	b.n	800298a <__libc_init_array+0x1e>
 80029a4:	080033d0 	.word	0x080033d0
 80029a8:	080033d0 	.word	0x080033d0
 80029ac:	080033d0 	.word	0x080033d0
 80029b0:	080033d4 	.word	0x080033d4

080029b4 <__retarget_lock_acquire_recursive>:
 80029b4:	4770      	bx	lr

080029b6 <__retarget_lock_release_recursive>:
 80029b6:	4770      	bx	lr

080029b8 <_free_r>:
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	4605      	mov	r5, r0
 80029bc:	2900      	cmp	r1, #0
 80029be:	d040      	beq.n	8002a42 <_free_r+0x8a>
 80029c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c4:	1f0c      	subs	r4, r1, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bfb8      	it	lt
 80029ca:	18e4      	addlt	r4, r4, r3
 80029cc:	f000 f8dc 	bl	8002b88 <__malloc_lock>
 80029d0:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <_free_r+0x8c>)
 80029d2:	6813      	ldr	r3, [r2, #0]
 80029d4:	b933      	cbnz	r3, 80029e4 <_free_r+0x2c>
 80029d6:	6063      	str	r3, [r4, #4]
 80029d8:	6014      	str	r4, [r2, #0]
 80029da:	4628      	mov	r0, r5
 80029dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029e0:	f000 b8d8 	b.w	8002b94 <__malloc_unlock>
 80029e4:	42a3      	cmp	r3, r4
 80029e6:	d908      	bls.n	80029fa <_free_r+0x42>
 80029e8:	6820      	ldr	r0, [r4, #0]
 80029ea:	1821      	adds	r1, r4, r0
 80029ec:	428b      	cmp	r3, r1
 80029ee:	bf01      	itttt	eq
 80029f0:	6819      	ldreq	r1, [r3, #0]
 80029f2:	685b      	ldreq	r3, [r3, #4]
 80029f4:	1809      	addeq	r1, r1, r0
 80029f6:	6021      	streq	r1, [r4, #0]
 80029f8:	e7ed      	b.n	80029d6 <_free_r+0x1e>
 80029fa:	461a      	mov	r2, r3
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	b10b      	cbz	r3, 8002a04 <_free_r+0x4c>
 8002a00:	42a3      	cmp	r3, r4
 8002a02:	d9fa      	bls.n	80029fa <_free_r+0x42>
 8002a04:	6811      	ldr	r1, [r2, #0]
 8002a06:	1850      	adds	r0, r2, r1
 8002a08:	42a0      	cmp	r0, r4
 8002a0a:	d10b      	bne.n	8002a24 <_free_r+0x6c>
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	4401      	add	r1, r0
 8002a10:	1850      	adds	r0, r2, r1
 8002a12:	4283      	cmp	r3, r0
 8002a14:	6011      	str	r1, [r2, #0]
 8002a16:	d1e0      	bne.n	80029da <_free_r+0x22>
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4408      	add	r0, r1
 8002a1e:	6010      	str	r0, [r2, #0]
 8002a20:	6053      	str	r3, [r2, #4]
 8002a22:	e7da      	b.n	80029da <_free_r+0x22>
 8002a24:	d902      	bls.n	8002a2c <_free_r+0x74>
 8002a26:	230c      	movs	r3, #12
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	e7d6      	b.n	80029da <_free_r+0x22>
 8002a2c:	6820      	ldr	r0, [r4, #0]
 8002a2e:	1821      	adds	r1, r4, r0
 8002a30:	428b      	cmp	r3, r1
 8002a32:	bf01      	itttt	eq
 8002a34:	6819      	ldreq	r1, [r3, #0]
 8002a36:	685b      	ldreq	r3, [r3, #4]
 8002a38:	1809      	addeq	r1, r1, r0
 8002a3a:	6021      	streq	r1, [r4, #0]
 8002a3c:	6063      	str	r3, [r4, #4]
 8002a3e:	6054      	str	r4, [r2, #4]
 8002a40:	e7cb      	b.n	80029da <_free_r+0x22>
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	2000026c 	.word	0x2000026c

08002a48 <sbrk_aligned>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	4e0e      	ldr	r6, [pc, #56]	; (8002a84 <sbrk_aligned+0x3c>)
 8002a4c:	460c      	mov	r4, r1
 8002a4e:	6831      	ldr	r1, [r6, #0]
 8002a50:	4605      	mov	r5, r0
 8002a52:	b911      	cbnz	r1, 8002a5a <sbrk_aligned+0x12>
 8002a54:	f000 fbaa 	bl	80031ac <_sbrk_r>
 8002a58:	6030      	str	r0, [r6, #0]
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	f000 fba5 	bl	80031ac <_sbrk_r>
 8002a62:	1c43      	adds	r3, r0, #1
 8002a64:	d00a      	beq.n	8002a7c <sbrk_aligned+0x34>
 8002a66:	1cc4      	adds	r4, r0, #3
 8002a68:	f024 0403 	bic.w	r4, r4, #3
 8002a6c:	42a0      	cmp	r0, r4
 8002a6e:	d007      	beq.n	8002a80 <sbrk_aligned+0x38>
 8002a70:	1a21      	subs	r1, r4, r0
 8002a72:	4628      	mov	r0, r5
 8002a74:	f000 fb9a 	bl	80031ac <_sbrk_r>
 8002a78:	3001      	adds	r0, #1
 8002a7a:	d101      	bne.n	8002a80 <sbrk_aligned+0x38>
 8002a7c:	f04f 34ff 	mov.w	r4, #4294967295
 8002a80:	4620      	mov	r0, r4
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
 8002a84:	20000270 	.word	0x20000270

08002a88 <_malloc_r>:
 8002a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a8c:	1ccd      	adds	r5, r1, #3
 8002a8e:	f025 0503 	bic.w	r5, r5, #3
 8002a92:	3508      	adds	r5, #8
 8002a94:	2d0c      	cmp	r5, #12
 8002a96:	bf38      	it	cc
 8002a98:	250c      	movcc	r5, #12
 8002a9a:	2d00      	cmp	r5, #0
 8002a9c:	4607      	mov	r7, r0
 8002a9e:	db01      	blt.n	8002aa4 <_malloc_r+0x1c>
 8002aa0:	42a9      	cmp	r1, r5
 8002aa2:	d905      	bls.n	8002ab0 <_malloc_r+0x28>
 8002aa4:	230c      	movs	r3, #12
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4630      	mov	r0, r6
 8002aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ab0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002b84 <_malloc_r+0xfc>
 8002ab4:	f000 f868 	bl	8002b88 <__malloc_lock>
 8002ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8002abc:	461c      	mov	r4, r3
 8002abe:	bb5c      	cbnz	r4, 8002b18 <_malloc_r+0x90>
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	f7ff ffc0 	bl	8002a48 <sbrk_aligned>
 8002ac8:	1c43      	adds	r3, r0, #1
 8002aca:	4604      	mov	r4, r0
 8002acc:	d155      	bne.n	8002b7a <_malloc_r+0xf2>
 8002ace:	f8d8 4000 	ldr.w	r4, [r8]
 8002ad2:	4626      	mov	r6, r4
 8002ad4:	2e00      	cmp	r6, #0
 8002ad6:	d145      	bne.n	8002b64 <_malloc_r+0xdc>
 8002ad8:	2c00      	cmp	r4, #0
 8002ada:	d048      	beq.n	8002b6e <_malloc_r+0xe6>
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	4631      	mov	r1, r6
 8002ae0:	4638      	mov	r0, r7
 8002ae2:	eb04 0903 	add.w	r9, r4, r3
 8002ae6:	f000 fb61 	bl	80031ac <_sbrk_r>
 8002aea:	4581      	cmp	r9, r0
 8002aec:	d13f      	bne.n	8002b6e <_malloc_r+0xe6>
 8002aee:	6821      	ldr	r1, [r4, #0]
 8002af0:	4638      	mov	r0, r7
 8002af2:	1a6d      	subs	r5, r5, r1
 8002af4:	4629      	mov	r1, r5
 8002af6:	f7ff ffa7 	bl	8002a48 <sbrk_aligned>
 8002afa:	3001      	adds	r0, #1
 8002afc:	d037      	beq.n	8002b6e <_malloc_r+0xe6>
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	442b      	add	r3, r5
 8002b02:	6023      	str	r3, [r4, #0]
 8002b04:	f8d8 3000 	ldr.w	r3, [r8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d038      	beq.n	8002b7e <_malloc_r+0xf6>
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	42a2      	cmp	r2, r4
 8002b10:	d12b      	bne.n	8002b6a <_malloc_r+0xe2>
 8002b12:	2200      	movs	r2, #0
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	e00f      	b.n	8002b38 <_malloc_r+0xb0>
 8002b18:	6822      	ldr	r2, [r4, #0]
 8002b1a:	1b52      	subs	r2, r2, r5
 8002b1c:	d41f      	bmi.n	8002b5e <_malloc_r+0xd6>
 8002b1e:	2a0b      	cmp	r2, #11
 8002b20:	d917      	bls.n	8002b52 <_malloc_r+0xca>
 8002b22:	1961      	adds	r1, r4, r5
 8002b24:	42a3      	cmp	r3, r4
 8002b26:	6025      	str	r5, [r4, #0]
 8002b28:	bf18      	it	ne
 8002b2a:	6059      	strne	r1, [r3, #4]
 8002b2c:	6863      	ldr	r3, [r4, #4]
 8002b2e:	bf08      	it	eq
 8002b30:	f8c8 1000 	streq.w	r1, [r8]
 8002b34:	5162      	str	r2, [r4, r5]
 8002b36:	604b      	str	r3, [r1, #4]
 8002b38:	4638      	mov	r0, r7
 8002b3a:	f104 060b 	add.w	r6, r4, #11
 8002b3e:	f000 f829 	bl	8002b94 <__malloc_unlock>
 8002b42:	f026 0607 	bic.w	r6, r6, #7
 8002b46:	1d23      	adds	r3, r4, #4
 8002b48:	1af2      	subs	r2, r6, r3
 8002b4a:	d0ae      	beq.n	8002aaa <_malloc_r+0x22>
 8002b4c:	1b9b      	subs	r3, r3, r6
 8002b4e:	50a3      	str	r3, [r4, r2]
 8002b50:	e7ab      	b.n	8002aaa <_malloc_r+0x22>
 8002b52:	42a3      	cmp	r3, r4
 8002b54:	6862      	ldr	r2, [r4, #4]
 8002b56:	d1dd      	bne.n	8002b14 <_malloc_r+0x8c>
 8002b58:	f8c8 2000 	str.w	r2, [r8]
 8002b5c:	e7ec      	b.n	8002b38 <_malloc_r+0xb0>
 8002b5e:	4623      	mov	r3, r4
 8002b60:	6864      	ldr	r4, [r4, #4]
 8002b62:	e7ac      	b.n	8002abe <_malloc_r+0x36>
 8002b64:	4634      	mov	r4, r6
 8002b66:	6876      	ldr	r6, [r6, #4]
 8002b68:	e7b4      	b.n	8002ad4 <_malloc_r+0x4c>
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	e7cc      	b.n	8002b08 <_malloc_r+0x80>
 8002b6e:	230c      	movs	r3, #12
 8002b70:	4638      	mov	r0, r7
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	f000 f80e 	bl	8002b94 <__malloc_unlock>
 8002b78:	e797      	b.n	8002aaa <_malloc_r+0x22>
 8002b7a:	6025      	str	r5, [r4, #0]
 8002b7c:	e7dc      	b.n	8002b38 <_malloc_r+0xb0>
 8002b7e:	605b      	str	r3, [r3, #4]
 8002b80:	deff      	udf	#255	; 0xff
 8002b82:	bf00      	nop
 8002b84:	2000026c 	.word	0x2000026c

08002b88 <__malloc_lock>:
 8002b88:	4801      	ldr	r0, [pc, #4]	; (8002b90 <__malloc_lock+0x8>)
 8002b8a:	f7ff bf13 	b.w	80029b4 <__retarget_lock_acquire_recursive>
 8002b8e:	bf00      	nop
 8002b90:	20000268 	.word	0x20000268

08002b94 <__malloc_unlock>:
 8002b94:	4801      	ldr	r0, [pc, #4]	; (8002b9c <__malloc_unlock+0x8>)
 8002b96:	f7ff bf0e 	b.w	80029b6 <__retarget_lock_release_recursive>
 8002b9a:	bf00      	nop
 8002b9c:	20000268 	.word	0x20000268

08002ba0 <__ssputs_r>:
 8002ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba4:	461f      	mov	r7, r3
 8002ba6:	688e      	ldr	r6, [r1, #8]
 8002ba8:	4682      	mov	sl, r0
 8002baa:	42be      	cmp	r6, r7
 8002bac:	460c      	mov	r4, r1
 8002bae:	4690      	mov	r8, r2
 8002bb0:	680b      	ldr	r3, [r1, #0]
 8002bb2:	d82c      	bhi.n	8002c0e <__ssputs_r+0x6e>
 8002bb4:	898a      	ldrh	r2, [r1, #12]
 8002bb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bba:	d026      	beq.n	8002c0a <__ssputs_r+0x6a>
 8002bbc:	6965      	ldr	r5, [r4, #20]
 8002bbe:	6909      	ldr	r1, [r1, #16]
 8002bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bc4:	eba3 0901 	sub.w	r9, r3, r1
 8002bc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bcc:	1c7b      	adds	r3, r7, #1
 8002bce:	444b      	add	r3, r9
 8002bd0:	106d      	asrs	r5, r5, #1
 8002bd2:	429d      	cmp	r5, r3
 8002bd4:	bf38      	it	cc
 8002bd6:	461d      	movcc	r5, r3
 8002bd8:	0553      	lsls	r3, r2, #21
 8002bda:	d527      	bpl.n	8002c2c <__ssputs_r+0x8c>
 8002bdc:	4629      	mov	r1, r5
 8002bde:	f7ff ff53 	bl	8002a88 <_malloc_r>
 8002be2:	4606      	mov	r6, r0
 8002be4:	b360      	cbz	r0, 8002c40 <__ssputs_r+0xa0>
 8002be6:	464a      	mov	r2, r9
 8002be8:	6921      	ldr	r1, [r4, #16]
 8002bea:	f000 fafd 	bl	80031e8 <memcpy>
 8002bee:	89a3      	ldrh	r3, [r4, #12]
 8002bf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf8:	81a3      	strh	r3, [r4, #12]
 8002bfa:	6126      	str	r6, [r4, #16]
 8002bfc:	444e      	add	r6, r9
 8002bfe:	6026      	str	r6, [r4, #0]
 8002c00:	463e      	mov	r6, r7
 8002c02:	6165      	str	r5, [r4, #20]
 8002c04:	eba5 0509 	sub.w	r5, r5, r9
 8002c08:	60a5      	str	r5, [r4, #8]
 8002c0a:	42be      	cmp	r6, r7
 8002c0c:	d900      	bls.n	8002c10 <__ssputs_r+0x70>
 8002c0e:	463e      	mov	r6, r7
 8002c10:	4632      	mov	r2, r6
 8002c12:	4641      	mov	r1, r8
 8002c14:	6820      	ldr	r0, [r4, #0]
 8002c16:	f000 faaf 	bl	8003178 <memmove>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	68a3      	ldr	r3, [r4, #8]
 8002c1e:	1b9b      	subs	r3, r3, r6
 8002c20:	60a3      	str	r3, [r4, #8]
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	4433      	add	r3, r6
 8002c26:	6023      	str	r3, [r4, #0]
 8002c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c2c:	462a      	mov	r2, r5
 8002c2e:	f000 fae9 	bl	8003204 <_realloc_r>
 8002c32:	4606      	mov	r6, r0
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d1e0      	bne.n	8002bfa <__ssputs_r+0x5a>
 8002c38:	4650      	mov	r0, sl
 8002c3a:	6921      	ldr	r1, [r4, #16]
 8002c3c:	f7ff febc 	bl	80029b8 <_free_r>
 8002c40:	230c      	movs	r3, #12
 8002c42:	f8ca 3000 	str.w	r3, [sl]
 8002c46:	89a3      	ldrh	r3, [r4, #12]
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c50:	81a3      	strh	r3, [r4, #12]
 8002c52:	e7e9      	b.n	8002c28 <__ssputs_r+0x88>

08002c54 <_svfiprintf_r>:
 8002c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c58:	4698      	mov	r8, r3
 8002c5a:	898b      	ldrh	r3, [r1, #12]
 8002c5c:	4607      	mov	r7, r0
 8002c5e:	061b      	lsls	r3, r3, #24
 8002c60:	460d      	mov	r5, r1
 8002c62:	4614      	mov	r4, r2
 8002c64:	b09d      	sub	sp, #116	; 0x74
 8002c66:	d50e      	bpl.n	8002c86 <_svfiprintf_r+0x32>
 8002c68:	690b      	ldr	r3, [r1, #16]
 8002c6a:	b963      	cbnz	r3, 8002c86 <_svfiprintf_r+0x32>
 8002c6c:	2140      	movs	r1, #64	; 0x40
 8002c6e:	f7ff ff0b 	bl	8002a88 <_malloc_r>
 8002c72:	6028      	str	r0, [r5, #0]
 8002c74:	6128      	str	r0, [r5, #16]
 8002c76:	b920      	cbnz	r0, 8002c82 <_svfiprintf_r+0x2e>
 8002c78:	230c      	movs	r3, #12
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	e0d0      	b.n	8002e24 <_svfiprintf_r+0x1d0>
 8002c82:	2340      	movs	r3, #64	; 0x40
 8002c84:	616b      	str	r3, [r5, #20]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9309      	str	r3, [sp, #36]	; 0x24
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c90:	2330      	movs	r3, #48	; 0x30
 8002c92:	f04f 0901 	mov.w	r9, #1
 8002c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c9a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002e3c <_svfiprintf_r+0x1e8>
 8002c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ca2:	4623      	mov	r3, r4
 8002ca4:	469a      	mov	sl, r3
 8002ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002caa:	b10a      	cbz	r2, 8002cb0 <_svfiprintf_r+0x5c>
 8002cac:	2a25      	cmp	r2, #37	; 0x25
 8002cae:	d1f9      	bne.n	8002ca4 <_svfiprintf_r+0x50>
 8002cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8002cb4:	d00b      	beq.n	8002cce <_svfiprintf_r+0x7a>
 8002cb6:	465b      	mov	r3, fp
 8002cb8:	4622      	mov	r2, r4
 8002cba:	4629      	mov	r1, r5
 8002cbc:	4638      	mov	r0, r7
 8002cbe:	f7ff ff6f 	bl	8002ba0 <__ssputs_r>
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	f000 80a9 	beq.w	8002e1a <_svfiprintf_r+0x1c6>
 8002cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cca:	445a      	add	r2, fp
 8002ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8002cce:	f89a 3000 	ldrb.w	r3, [sl]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80a1 	beq.w	8002e1a <_svfiprintf_r+0x1c6>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f04f 32ff 	mov.w	r2, #4294967295
 8002cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ce2:	f10a 0a01 	add.w	sl, sl, #1
 8002ce6:	9304      	str	r3, [sp, #16]
 8002ce8:	9307      	str	r3, [sp, #28]
 8002cea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cee:	931a      	str	r3, [sp, #104]	; 0x68
 8002cf0:	4654      	mov	r4, sl
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cf8:	4850      	ldr	r0, [pc, #320]	; (8002e3c <_svfiprintf_r+0x1e8>)
 8002cfa:	f000 fa67 	bl	80031cc <memchr>
 8002cfe:	9a04      	ldr	r2, [sp, #16]
 8002d00:	b9d8      	cbnz	r0, 8002d3a <_svfiprintf_r+0xe6>
 8002d02:	06d0      	lsls	r0, r2, #27
 8002d04:	bf44      	itt	mi
 8002d06:	2320      	movmi	r3, #32
 8002d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d0c:	0711      	lsls	r1, r2, #28
 8002d0e:	bf44      	itt	mi
 8002d10:	232b      	movmi	r3, #43	; 0x2b
 8002d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d16:	f89a 3000 	ldrb.w	r3, [sl]
 8002d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d1c:	d015      	beq.n	8002d4a <_svfiprintf_r+0xf6>
 8002d1e:	4654      	mov	r4, sl
 8002d20:	2000      	movs	r0, #0
 8002d22:	f04f 0c0a 	mov.w	ip, #10
 8002d26:	9a07      	ldr	r2, [sp, #28]
 8002d28:	4621      	mov	r1, r4
 8002d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d2e:	3b30      	subs	r3, #48	; 0x30
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	d94d      	bls.n	8002dd0 <_svfiprintf_r+0x17c>
 8002d34:	b1b0      	cbz	r0, 8002d64 <_svfiprintf_r+0x110>
 8002d36:	9207      	str	r2, [sp, #28]
 8002d38:	e014      	b.n	8002d64 <_svfiprintf_r+0x110>
 8002d3a:	eba0 0308 	sub.w	r3, r0, r8
 8002d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d42:	4313      	orrs	r3, r2
 8002d44:	46a2      	mov	sl, r4
 8002d46:	9304      	str	r3, [sp, #16]
 8002d48:	e7d2      	b.n	8002cf0 <_svfiprintf_r+0x9c>
 8002d4a:	9b03      	ldr	r3, [sp, #12]
 8002d4c:	1d19      	adds	r1, r3, #4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	9103      	str	r1, [sp, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bfbb      	ittet	lt
 8002d56:	425b      	neglt	r3, r3
 8002d58:	f042 0202 	orrlt.w	r2, r2, #2
 8002d5c:	9307      	strge	r3, [sp, #28]
 8002d5e:	9307      	strlt	r3, [sp, #28]
 8002d60:	bfb8      	it	lt
 8002d62:	9204      	strlt	r2, [sp, #16]
 8002d64:	7823      	ldrb	r3, [r4, #0]
 8002d66:	2b2e      	cmp	r3, #46	; 0x2e
 8002d68:	d10c      	bne.n	8002d84 <_svfiprintf_r+0x130>
 8002d6a:	7863      	ldrb	r3, [r4, #1]
 8002d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d6e:	d134      	bne.n	8002dda <_svfiprintf_r+0x186>
 8002d70:	9b03      	ldr	r3, [sp, #12]
 8002d72:	3402      	adds	r4, #2
 8002d74:	1d1a      	adds	r2, r3, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	9203      	str	r2, [sp, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bfb8      	it	lt
 8002d7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d82:	9305      	str	r3, [sp, #20]
 8002d84:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002e40 <_svfiprintf_r+0x1ec>
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4650      	mov	r0, sl
 8002d8c:	7821      	ldrb	r1, [r4, #0]
 8002d8e:	f000 fa1d 	bl	80031cc <memchr>
 8002d92:	b138      	cbz	r0, 8002da4 <_svfiprintf_r+0x150>
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	9b04      	ldr	r3, [sp, #16]
 8002d98:	eba0 000a 	sub.w	r0, r0, sl
 8002d9c:	4082      	lsls	r2, r0
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	3401      	adds	r4, #1
 8002da2:	9304      	str	r3, [sp, #16]
 8002da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002da8:	2206      	movs	r2, #6
 8002daa:	4826      	ldr	r0, [pc, #152]	; (8002e44 <_svfiprintf_r+0x1f0>)
 8002dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002db0:	f000 fa0c 	bl	80031cc <memchr>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d038      	beq.n	8002e2a <_svfiprintf_r+0x1d6>
 8002db8:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <_svfiprintf_r+0x1f4>)
 8002dba:	bb1b      	cbnz	r3, 8002e04 <_svfiprintf_r+0x1b0>
 8002dbc:	9b03      	ldr	r3, [sp, #12]
 8002dbe:	3307      	adds	r3, #7
 8002dc0:	f023 0307 	bic.w	r3, r3, #7
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	9303      	str	r3, [sp, #12]
 8002dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dca:	4433      	add	r3, r6
 8002dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8002dce:	e768      	b.n	8002ca2 <_svfiprintf_r+0x4e>
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dd8:	e7a6      	b.n	8002d28 <_svfiprintf_r+0xd4>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f04f 0c0a 	mov.w	ip, #10
 8002de0:	4619      	mov	r1, r3
 8002de2:	3401      	adds	r4, #1
 8002de4:	9305      	str	r3, [sp, #20]
 8002de6:	4620      	mov	r0, r4
 8002de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dec:	3a30      	subs	r2, #48	; 0x30
 8002dee:	2a09      	cmp	r2, #9
 8002df0:	d903      	bls.n	8002dfa <_svfiprintf_r+0x1a6>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0c6      	beq.n	8002d84 <_svfiprintf_r+0x130>
 8002df6:	9105      	str	r1, [sp, #20]
 8002df8:	e7c4      	b.n	8002d84 <_svfiprintf_r+0x130>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e02:	e7f0      	b.n	8002de6 <_svfiprintf_r+0x192>
 8002e04:	ab03      	add	r3, sp, #12
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	462a      	mov	r2, r5
 8002e0a:	4638      	mov	r0, r7
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <_svfiprintf_r+0x1f8>)
 8002e0e:	a904      	add	r1, sp, #16
 8002e10:	f3af 8000 	nop.w
 8002e14:	1c42      	adds	r2, r0, #1
 8002e16:	4606      	mov	r6, r0
 8002e18:	d1d6      	bne.n	8002dc8 <_svfiprintf_r+0x174>
 8002e1a:	89ab      	ldrh	r3, [r5, #12]
 8002e1c:	065b      	lsls	r3, r3, #25
 8002e1e:	f53f af2d 	bmi.w	8002c7c <_svfiprintf_r+0x28>
 8002e22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e24:	b01d      	add	sp, #116	; 0x74
 8002e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e2a:	ab03      	add	r3, sp, #12
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	462a      	mov	r2, r5
 8002e30:	4638      	mov	r0, r7
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <_svfiprintf_r+0x1f8>)
 8002e34:	a904      	add	r1, sp, #16
 8002e36:	f000 f87d 	bl	8002f34 <_printf_i>
 8002e3a:	e7eb      	b.n	8002e14 <_svfiprintf_r+0x1c0>
 8002e3c:	0800339a 	.word	0x0800339a
 8002e40:	080033a0 	.word	0x080033a0
 8002e44:	080033a4 	.word	0x080033a4
 8002e48:	00000000 	.word	0x00000000
 8002e4c:	08002ba1 	.word	0x08002ba1

08002e50 <_printf_common>:
 8002e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e54:	4616      	mov	r6, r2
 8002e56:	4699      	mov	r9, r3
 8002e58:	688a      	ldr	r2, [r1, #8]
 8002e5a:	690b      	ldr	r3, [r1, #16]
 8002e5c:	4607      	mov	r7, r0
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	bfb8      	it	lt
 8002e62:	4613      	movlt	r3, r2
 8002e64:	6033      	str	r3, [r6, #0]
 8002e66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e6a:	460c      	mov	r4, r1
 8002e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e70:	b10a      	cbz	r2, 8002e76 <_printf_common+0x26>
 8002e72:	3301      	adds	r3, #1
 8002e74:	6033      	str	r3, [r6, #0]
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	0699      	lsls	r1, r3, #26
 8002e7a:	bf42      	ittt	mi
 8002e7c:	6833      	ldrmi	r3, [r6, #0]
 8002e7e:	3302      	addmi	r3, #2
 8002e80:	6033      	strmi	r3, [r6, #0]
 8002e82:	6825      	ldr	r5, [r4, #0]
 8002e84:	f015 0506 	ands.w	r5, r5, #6
 8002e88:	d106      	bne.n	8002e98 <_printf_common+0x48>
 8002e8a:	f104 0a19 	add.w	sl, r4, #25
 8002e8e:	68e3      	ldr	r3, [r4, #12]
 8002e90:	6832      	ldr	r2, [r6, #0]
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	42ab      	cmp	r3, r5
 8002e96:	dc2b      	bgt.n	8002ef0 <_printf_common+0xa0>
 8002e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e9c:	1e13      	subs	r3, r2, #0
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	bf18      	it	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	0692      	lsls	r2, r2, #26
 8002ea6:	d430      	bmi.n	8002f0a <_printf_common+0xba>
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	4638      	mov	r0, r7
 8002eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eb0:	47c0      	blx	r8
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	d023      	beq.n	8002efe <_printf_common+0xae>
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	6922      	ldr	r2, [r4, #16]
 8002eba:	f003 0306 	and.w	r3, r3, #6
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	bf14      	ite	ne
 8002ec2:	2500      	movne	r5, #0
 8002ec4:	6833      	ldreq	r3, [r6, #0]
 8002ec6:	f04f 0600 	mov.w	r6, #0
 8002eca:	bf08      	it	eq
 8002ecc:	68e5      	ldreq	r5, [r4, #12]
 8002ece:	f104 041a 	add.w	r4, r4, #26
 8002ed2:	bf08      	it	eq
 8002ed4:	1aed      	subeq	r5, r5, r3
 8002ed6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002eda:	bf08      	it	eq
 8002edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bfc4      	itt	gt
 8002ee4:	1a9b      	subgt	r3, r3, r2
 8002ee6:	18ed      	addgt	r5, r5, r3
 8002ee8:	42b5      	cmp	r5, r6
 8002eea:	d11a      	bne.n	8002f22 <_printf_common+0xd2>
 8002eec:	2000      	movs	r0, #0
 8002eee:	e008      	b.n	8002f02 <_printf_common+0xb2>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4652      	mov	r2, sl
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	47c0      	blx	r8
 8002efa:	3001      	adds	r0, #1
 8002efc:	d103      	bne.n	8002f06 <_printf_common+0xb6>
 8002efe:	f04f 30ff 	mov.w	r0, #4294967295
 8002f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f06:	3501      	adds	r5, #1
 8002f08:	e7c1      	b.n	8002e8e <_printf_common+0x3e>
 8002f0a:	2030      	movs	r0, #48	; 0x30
 8002f0c:	18e1      	adds	r1, r4, r3
 8002f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f18:	4422      	add	r2, r4
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f20:	e7c2      	b.n	8002ea8 <_printf_common+0x58>
 8002f22:	2301      	movs	r3, #1
 8002f24:	4622      	mov	r2, r4
 8002f26:	4649      	mov	r1, r9
 8002f28:	4638      	mov	r0, r7
 8002f2a:	47c0      	blx	r8
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d0e6      	beq.n	8002efe <_printf_common+0xae>
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7d9      	b.n	8002ee8 <_printf_common+0x98>

08002f34 <_printf_i>:
 8002f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f38:	7e0f      	ldrb	r7, [r1, #24]
 8002f3a:	4691      	mov	r9, r2
 8002f3c:	2f78      	cmp	r7, #120	; 0x78
 8002f3e:	4680      	mov	r8, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	469a      	mov	sl, r3
 8002f44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f4a:	d807      	bhi.n	8002f5c <_printf_i+0x28>
 8002f4c:	2f62      	cmp	r7, #98	; 0x62
 8002f4e:	d80a      	bhi.n	8002f66 <_printf_i+0x32>
 8002f50:	2f00      	cmp	r7, #0
 8002f52:	f000 80d5 	beq.w	8003100 <_printf_i+0x1cc>
 8002f56:	2f58      	cmp	r7, #88	; 0x58
 8002f58:	f000 80c1 	beq.w	80030de <_printf_i+0x1aa>
 8002f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f64:	e03a      	b.n	8002fdc <_printf_i+0xa8>
 8002f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f6a:	2b15      	cmp	r3, #21
 8002f6c:	d8f6      	bhi.n	8002f5c <_printf_i+0x28>
 8002f6e:	a101      	add	r1, pc, #4	; (adr r1, 8002f74 <_printf_i+0x40>)
 8002f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f74:	08002fcd 	.word	0x08002fcd
 8002f78:	08002fe1 	.word	0x08002fe1
 8002f7c:	08002f5d 	.word	0x08002f5d
 8002f80:	08002f5d 	.word	0x08002f5d
 8002f84:	08002f5d 	.word	0x08002f5d
 8002f88:	08002f5d 	.word	0x08002f5d
 8002f8c:	08002fe1 	.word	0x08002fe1
 8002f90:	08002f5d 	.word	0x08002f5d
 8002f94:	08002f5d 	.word	0x08002f5d
 8002f98:	08002f5d 	.word	0x08002f5d
 8002f9c:	08002f5d 	.word	0x08002f5d
 8002fa0:	080030e7 	.word	0x080030e7
 8002fa4:	0800300d 	.word	0x0800300d
 8002fa8:	080030a1 	.word	0x080030a1
 8002fac:	08002f5d 	.word	0x08002f5d
 8002fb0:	08002f5d 	.word	0x08002f5d
 8002fb4:	08003109 	.word	0x08003109
 8002fb8:	08002f5d 	.word	0x08002f5d
 8002fbc:	0800300d 	.word	0x0800300d
 8002fc0:	08002f5d 	.word	0x08002f5d
 8002fc4:	08002f5d 	.word	0x08002f5d
 8002fc8:	080030a9 	.word	0x080030a9
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	1d1a      	adds	r2, r3, #4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	602a      	str	r2, [r5, #0]
 8002fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0a0      	b.n	8003122 <_printf_i+0x1ee>
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	682b      	ldr	r3, [r5, #0]
 8002fe4:	0607      	lsls	r7, r0, #24
 8002fe6:	f103 0104 	add.w	r1, r3, #4
 8002fea:	6029      	str	r1, [r5, #0]
 8002fec:	d501      	bpl.n	8002ff2 <_printf_i+0xbe>
 8002fee:	681e      	ldr	r6, [r3, #0]
 8002ff0:	e003      	b.n	8002ffa <_printf_i+0xc6>
 8002ff2:	0646      	lsls	r6, r0, #25
 8002ff4:	d5fb      	bpl.n	8002fee <_printf_i+0xba>
 8002ff6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002ffa:	2e00      	cmp	r6, #0
 8002ffc:	da03      	bge.n	8003006 <_printf_i+0xd2>
 8002ffe:	232d      	movs	r3, #45	; 0x2d
 8003000:	4276      	negs	r6, r6
 8003002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003006:	230a      	movs	r3, #10
 8003008:	4859      	ldr	r0, [pc, #356]	; (8003170 <_printf_i+0x23c>)
 800300a:	e012      	b.n	8003032 <_printf_i+0xfe>
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	6820      	ldr	r0, [r4, #0]
 8003010:	1d19      	adds	r1, r3, #4
 8003012:	6029      	str	r1, [r5, #0]
 8003014:	0605      	lsls	r5, r0, #24
 8003016:	d501      	bpl.n	800301c <_printf_i+0xe8>
 8003018:	681e      	ldr	r6, [r3, #0]
 800301a:	e002      	b.n	8003022 <_printf_i+0xee>
 800301c:	0641      	lsls	r1, r0, #25
 800301e:	d5fb      	bpl.n	8003018 <_printf_i+0xe4>
 8003020:	881e      	ldrh	r6, [r3, #0]
 8003022:	2f6f      	cmp	r7, #111	; 0x6f
 8003024:	bf0c      	ite	eq
 8003026:	2308      	moveq	r3, #8
 8003028:	230a      	movne	r3, #10
 800302a:	4851      	ldr	r0, [pc, #324]	; (8003170 <_printf_i+0x23c>)
 800302c:	2100      	movs	r1, #0
 800302e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003032:	6865      	ldr	r5, [r4, #4]
 8003034:	2d00      	cmp	r5, #0
 8003036:	bfa8      	it	ge
 8003038:	6821      	ldrge	r1, [r4, #0]
 800303a:	60a5      	str	r5, [r4, #8]
 800303c:	bfa4      	itt	ge
 800303e:	f021 0104 	bicge.w	r1, r1, #4
 8003042:	6021      	strge	r1, [r4, #0]
 8003044:	b90e      	cbnz	r6, 800304a <_printf_i+0x116>
 8003046:	2d00      	cmp	r5, #0
 8003048:	d04b      	beq.n	80030e2 <_printf_i+0x1ae>
 800304a:	4615      	mov	r5, r2
 800304c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003050:	fb03 6711 	mls	r7, r3, r1, r6
 8003054:	5dc7      	ldrb	r7, [r0, r7]
 8003056:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800305a:	4637      	mov	r7, r6
 800305c:	42bb      	cmp	r3, r7
 800305e:	460e      	mov	r6, r1
 8003060:	d9f4      	bls.n	800304c <_printf_i+0x118>
 8003062:	2b08      	cmp	r3, #8
 8003064:	d10b      	bne.n	800307e <_printf_i+0x14a>
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	07de      	lsls	r6, r3, #31
 800306a:	d508      	bpl.n	800307e <_printf_i+0x14a>
 800306c:	6923      	ldr	r3, [r4, #16]
 800306e:	6861      	ldr	r1, [r4, #4]
 8003070:	4299      	cmp	r1, r3
 8003072:	bfde      	ittt	le
 8003074:	2330      	movle	r3, #48	; 0x30
 8003076:	f805 3c01 	strble.w	r3, [r5, #-1]
 800307a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800307e:	1b52      	subs	r2, r2, r5
 8003080:	6122      	str	r2, [r4, #16]
 8003082:	464b      	mov	r3, r9
 8003084:	4621      	mov	r1, r4
 8003086:	4640      	mov	r0, r8
 8003088:	f8cd a000 	str.w	sl, [sp]
 800308c:	aa03      	add	r2, sp, #12
 800308e:	f7ff fedf 	bl	8002e50 <_printf_common>
 8003092:	3001      	adds	r0, #1
 8003094:	d14a      	bne.n	800312c <_printf_i+0x1f8>
 8003096:	f04f 30ff 	mov.w	r0, #4294967295
 800309a:	b004      	add	sp, #16
 800309c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	f043 0320 	orr.w	r3, r3, #32
 80030a6:	6023      	str	r3, [r4, #0]
 80030a8:	2778      	movs	r7, #120	; 0x78
 80030aa:	4832      	ldr	r0, [pc, #200]	; (8003174 <_printf_i+0x240>)
 80030ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	6829      	ldr	r1, [r5, #0]
 80030b4:	061f      	lsls	r7, r3, #24
 80030b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80030ba:	d402      	bmi.n	80030c2 <_printf_i+0x18e>
 80030bc:	065f      	lsls	r7, r3, #25
 80030be:	bf48      	it	mi
 80030c0:	b2b6      	uxthmi	r6, r6
 80030c2:	07df      	lsls	r7, r3, #31
 80030c4:	bf48      	it	mi
 80030c6:	f043 0320 	orrmi.w	r3, r3, #32
 80030ca:	6029      	str	r1, [r5, #0]
 80030cc:	bf48      	it	mi
 80030ce:	6023      	strmi	r3, [r4, #0]
 80030d0:	b91e      	cbnz	r6, 80030da <_printf_i+0x1a6>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	f023 0320 	bic.w	r3, r3, #32
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	2310      	movs	r3, #16
 80030dc:	e7a6      	b.n	800302c <_printf_i+0xf8>
 80030de:	4824      	ldr	r0, [pc, #144]	; (8003170 <_printf_i+0x23c>)
 80030e0:	e7e4      	b.n	80030ac <_printf_i+0x178>
 80030e2:	4615      	mov	r5, r2
 80030e4:	e7bd      	b.n	8003062 <_printf_i+0x12e>
 80030e6:	682b      	ldr	r3, [r5, #0]
 80030e8:	6826      	ldr	r6, [r4, #0]
 80030ea:	1d18      	adds	r0, r3, #4
 80030ec:	6961      	ldr	r1, [r4, #20]
 80030ee:	6028      	str	r0, [r5, #0]
 80030f0:	0635      	lsls	r5, r6, #24
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	d501      	bpl.n	80030fa <_printf_i+0x1c6>
 80030f6:	6019      	str	r1, [r3, #0]
 80030f8:	e002      	b.n	8003100 <_printf_i+0x1cc>
 80030fa:	0670      	lsls	r0, r6, #25
 80030fc:	d5fb      	bpl.n	80030f6 <_printf_i+0x1c2>
 80030fe:	8019      	strh	r1, [r3, #0]
 8003100:	2300      	movs	r3, #0
 8003102:	4615      	mov	r5, r2
 8003104:	6123      	str	r3, [r4, #16]
 8003106:	e7bc      	b.n	8003082 <_printf_i+0x14e>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	2100      	movs	r1, #0
 800310c:	1d1a      	adds	r2, r3, #4
 800310e:	602a      	str	r2, [r5, #0]
 8003110:	681d      	ldr	r5, [r3, #0]
 8003112:	6862      	ldr	r2, [r4, #4]
 8003114:	4628      	mov	r0, r5
 8003116:	f000 f859 	bl	80031cc <memchr>
 800311a:	b108      	cbz	r0, 8003120 <_printf_i+0x1ec>
 800311c:	1b40      	subs	r0, r0, r5
 800311e:	6060      	str	r0, [r4, #4]
 8003120:	6863      	ldr	r3, [r4, #4]
 8003122:	6123      	str	r3, [r4, #16]
 8003124:	2300      	movs	r3, #0
 8003126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800312a:	e7aa      	b.n	8003082 <_printf_i+0x14e>
 800312c:	462a      	mov	r2, r5
 800312e:	4649      	mov	r1, r9
 8003130:	4640      	mov	r0, r8
 8003132:	6923      	ldr	r3, [r4, #16]
 8003134:	47d0      	blx	sl
 8003136:	3001      	adds	r0, #1
 8003138:	d0ad      	beq.n	8003096 <_printf_i+0x162>
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	079b      	lsls	r3, r3, #30
 800313e:	d413      	bmi.n	8003168 <_printf_i+0x234>
 8003140:	68e0      	ldr	r0, [r4, #12]
 8003142:	9b03      	ldr	r3, [sp, #12]
 8003144:	4298      	cmp	r0, r3
 8003146:	bfb8      	it	lt
 8003148:	4618      	movlt	r0, r3
 800314a:	e7a6      	b.n	800309a <_printf_i+0x166>
 800314c:	2301      	movs	r3, #1
 800314e:	4632      	mov	r2, r6
 8003150:	4649      	mov	r1, r9
 8003152:	4640      	mov	r0, r8
 8003154:	47d0      	blx	sl
 8003156:	3001      	adds	r0, #1
 8003158:	d09d      	beq.n	8003096 <_printf_i+0x162>
 800315a:	3501      	adds	r5, #1
 800315c:	68e3      	ldr	r3, [r4, #12]
 800315e:	9903      	ldr	r1, [sp, #12]
 8003160:	1a5b      	subs	r3, r3, r1
 8003162:	42ab      	cmp	r3, r5
 8003164:	dcf2      	bgt.n	800314c <_printf_i+0x218>
 8003166:	e7eb      	b.n	8003140 <_printf_i+0x20c>
 8003168:	2500      	movs	r5, #0
 800316a:	f104 0619 	add.w	r6, r4, #25
 800316e:	e7f5      	b.n	800315c <_printf_i+0x228>
 8003170:	080033ab 	.word	0x080033ab
 8003174:	080033bc 	.word	0x080033bc

08003178 <memmove>:
 8003178:	4288      	cmp	r0, r1
 800317a:	b510      	push	{r4, lr}
 800317c:	eb01 0402 	add.w	r4, r1, r2
 8003180:	d902      	bls.n	8003188 <memmove+0x10>
 8003182:	4284      	cmp	r4, r0
 8003184:	4623      	mov	r3, r4
 8003186:	d807      	bhi.n	8003198 <memmove+0x20>
 8003188:	1e43      	subs	r3, r0, #1
 800318a:	42a1      	cmp	r1, r4
 800318c:	d008      	beq.n	80031a0 <memmove+0x28>
 800318e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003196:	e7f8      	b.n	800318a <memmove+0x12>
 8003198:	4601      	mov	r1, r0
 800319a:	4402      	add	r2, r0
 800319c:	428a      	cmp	r2, r1
 800319e:	d100      	bne.n	80031a2 <memmove+0x2a>
 80031a0:	bd10      	pop	{r4, pc}
 80031a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031aa:	e7f7      	b.n	800319c <memmove+0x24>

080031ac <_sbrk_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	2300      	movs	r3, #0
 80031b0:	4d05      	ldr	r5, [pc, #20]	; (80031c8 <_sbrk_r+0x1c>)
 80031b2:	4604      	mov	r4, r0
 80031b4:	4608      	mov	r0, r1
 80031b6:	602b      	str	r3, [r5, #0]
 80031b8:	f7fd ff54 	bl	8001064 <_sbrk>
 80031bc:	1c43      	adds	r3, r0, #1
 80031be:	d102      	bne.n	80031c6 <_sbrk_r+0x1a>
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	b103      	cbz	r3, 80031c6 <_sbrk_r+0x1a>
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	bd38      	pop	{r3, r4, r5, pc}
 80031c8:	20000264 	.word	0x20000264

080031cc <memchr>:
 80031cc:	4603      	mov	r3, r0
 80031ce:	b510      	push	{r4, lr}
 80031d0:	b2c9      	uxtb	r1, r1
 80031d2:	4402      	add	r2, r0
 80031d4:	4293      	cmp	r3, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	d101      	bne.n	80031de <memchr+0x12>
 80031da:	2000      	movs	r0, #0
 80031dc:	e003      	b.n	80031e6 <memchr+0x1a>
 80031de:	7804      	ldrb	r4, [r0, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	428c      	cmp	r4, r1
 80031e4:	d1f6      	bne.n	80031d4 <memchr+0x8>
 80031e6:	bd10      	pop	{r4, pc}

080031e8 <memcpy>:
 80031e8:	440a      	add	r2, r1
 80031ea:	4291      	cmp	r1, r2
 80031ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80031f0:	d100      	bne.n	80031f4 <memcpy+0xc>
 80031f2:	4770      	bx	lr
 80031f4:	b510      	push	{r4, lr}
 80031f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031fa:	4291      	cmp	r1, r2
 80031fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003200:	d1f9      	bne.n	80031f6 <memcpy+0xe>
 8003202:	bd10      	pop	{r4, pc}

08003204 <_realloc_r>:
 8003204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003208:	4680      	mov	r8, r0
 800320a:	4614      	mov	r4, r2
 800320c:	460e      	mov	r6, r1
 800320e:	b921      	cbnz	r1, 800321a <_realloc_r+0x16>
 8003210:	4611      	mov	r1, r2
 8003212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003216:	f7ff bc37 	b.w	8002a88 <_malloc_r>
 800321a:	b92a      	cbnz	r2, 8003228 <_realloc_r+0x24>
 800321c:	f7ff fbcc 	bl	80029b8 <_free_r>
 8003220:	4625      	mov	r5, r4
 8003222:	4628      	mov	r0, r5
 8003224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003228:	f000 f81b 	bl	8003262 <_malloc_usable_size_r>
 800322c:	4284      	cmp	r4, r0
 800322e:	4607      	mov	r7, r0
 8003230:	d802      	bhi.n	8003238 <_realloc_r+0x34>
 8003232:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003236:	d812      	bhi.n	800325e <_realloc_r+0x5a>
 8003238:	4621      	mov	r1, r4
 800323a:	4640      	mov	r0, r8
 800323c:	f7ff fc24 	bl	8002a88 <_malloc_r>
 8003240:	4605      	mov	r5, r0
 8003242:	2800      	cmp	r0, #0
 8003244:	d0ed      	beq.n	8003222 <_realloc_r+0x1e>
 8003246:	42bc      	cmp	r4, r7
 8003248:	4622      	mov	r2, r4
 800324a:	4631      	mov	r1, r6
 800324c:	bf28      	it	cs
 800324e:	463a      	movcs	r2, r7
 8003250:	f7ff ffca 	bl	80031e8 <memcpy>
 8003254:	4631      	mov	r1, r6
 8003256:	4640      	mov	r0, r8
 8003258:	f7ff fbae 	bl	80029b8 <_free_r>
 800325c:	e7e1      	b.n	8003222 <_realloc_r+0x1e>
 800325e:	4635      	mov	r5, r6
 8003260:	e7df      	b.n	8003222 <_realloc_r+0x1e>

08003262 <_malloc_usable_size_r>:
 8003262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003266:	1f18      	subs	r0, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	bfbc      	itt	lt
 800326c:	580b      	ldrlt	r3, [r1, r0]
 800326e:	18c0      	addlt	r0, r0, r3
 8003270:	4770      	bx	lr
	...

08003274 <_init>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	bf00      	nop
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr

08003280 <_fini>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	bf00      	nop
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr
